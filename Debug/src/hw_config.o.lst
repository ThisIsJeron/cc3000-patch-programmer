   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"hw_config.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.NVIC_Configuration,"ax",%progbits
  19              		.align	1
  20              		.global	NVIC_Configuration
  21              		.thumb
  22              		.thumb_func
  24              	NVIC_Configuration:
  25              	.LFB57:
  26              		.file 1 "../src/hw_config.c"
   1:../src/hw_config.c **** /**
   2:../src/hw_config.c ****  ******************************************************************************
   3:../src/hw_config.c ****  * @file    hw_config.c
   4:../src/hw_config.c ****  * @author  Spark Application Team
   5:../src/hw_config.c ****  * @version V1.0.0
   6:../src/hw_config.c ****  * @date    03-June-2013
   7:../src/hw_config.c ****  * @brief   Hardware Configuration & Setup
   8:../src/hw_config.c ****  ******************************************************************************
   9:../src/hw_config.c ****  */
  10:../src/hw_config.c **** 
  11:../src/hw_config.c **** /* Includes ------------------------------------------------------------------*/
  12:../src/hw_config.c **** #include "hw_config.h"
  13:../src/hw_config.c **** 
  14:../src/hw_config.c **** /* Private typedef -----------------------------------------------------------*/
  15:../src/hw_config.c **** 
  16:../src/hw_config.c **** /* Private define ------------------------------------------------------------*/
  17:../src/hw_config.c **** 
  18:../src/hw_config.c **** /* Private macro -------------------------------------------------------------*/
  19:../src/hw_config.c **** 
  20:../src/hw_config.c **** /* Private variables ---------------------------------------------------------*/
  21:../src/hw_config.c **** GPIO_TypeDef* LED_PORT[LEDn] = {LED1_GPIO_PORT, LED2_GPIO_PORT};
  22:../src/hw_config.c **** const uint16_t LED_PIN[LEDn] = {LED1_PIN, LED2_PIN};
  23:../src/hw_config.c **** const uint32_t LED_CLK[LEDn] = {LED1_GPIO_CLK, LED2_GPIO_CLK};
  24:../src/hw_config.c **** 
  25:../src/hw_config.c **** GPIO_TypeDef* BUTTON_PORT[BUTTONn] = {BUTTON1_GPIO_PORT, BUTTON2_GPIO_PORT};
  26:../src/hw_config.c **** const uint16_t BUTTON_PIN[BUTTONn] = {BUTTON1_PIN, BUTTON2_PIN};
  27:../src/hw_config.c **** const uint32_t BUTTON_CLK[BUTTONn] = {BUTTON1_GPIO_CLK, BUTTON2_GPIO_CLK};
  28:../src/hw_config.c **** GPIOMode_TypeDef BUTTON_GPIO_MODE[BUTTONn] = {BUTTON1_GPIO_MODE, BUTTON2_GPIO_MODE};
  29:../src/hw_config.c **** __IO uint8_t BUTTON_DEBOUNCED[BUTTONn] = {0x00, 0x00};
  30:../src/hw_config.c **** 
  31:../src/hw_config.c **** const uint16_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON1_EXTI_LINE, BUTTON2_EXTI_LINE};
  32:../src/hw_config.c **** const uint16_t BUTTON_PORT_SOURCE[BUTTONn] = {BUTTON1_EXTI_PORT_SOURCE, BUTTON2_EXTI_PORT_SOURCE};
  33:../src/hw_config.c **** const uint16_t BUTTON_PIN_SOURCE[BUTTONn] = {BUTTON1_EXTI_PIN_SOURCE, BUTTON2_EXTI_PIN_SOURCE};
  34:../src/hw_config.c **** const uint16_t BUTTON_IRQn[BUTTONn] = {BUTTON1_EXTI_IRQn, BUTTON2_EXTI_IRQn};
  35:../src/hw_config.c **** EXTITrigger_TypeDef BUTTON_EXTI_TRIGGER[BUTTONn] = {BUTTON1_EXTI_TRIGGER, BUTTON2_EXTI_TRIGGER};
  36:../src/hw_config.c **** 
  37:../src/hw_config.c **** /* Private function prototypes -----------------------------------------------*/
  38:../src/hw_config.c **** 
  39:../src/hw_config.c **** /* Private functions ---------------------------------------------------------*/
  40:../src/hw_config.c **** /**
  41:../src/hw_config.c ****  * @brief  Configures Main system clocks & power.
  42:../src/hw_config.c ****  * @param  None
  43:../src/hw_config.c ****  * @retval None
  44:../src/hw_config.c ****  */
  45:../src/hw_config.c **** void Set_System(void)
  46:../src/hw_config.c **** {
  47:../src/hw_config.c **** 	/*!< At this stage the microcontroller clock setting is already configured,
  48:../src/hw_config.c **** 	 this is done through SystemInit() function which is called from startup
  49:../src/hw_config.c **** 	 file (startup_stm32f10x_xx.S) before to branch to application main.
  50:../src/hw_config.c **** 	 To reconfigure the default setting of SystemInit() function, refer to
  51:../src/hw_config.c **** 	 system_stm32f10x.c file
  52:../src/hw_config.c **** 	 */
  53:../src/hw_config.c **** 
  54:../src/hw_config.c **** 	/* Enable PWR and BKP clock */
  55:../src/hw_config.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
  56:../src/hw_config.c **** 
  57:../src/hw_config.c **** 	/* Enable write access to Backup domain */
  58:../src/hw_config.c **** 	PWR_BackupAccessCmd(ENABLE);
  59:../src/hw_config.c **** 
  60:../src/hw_config.c **** 	/* NVIC configuration */
  61:../src/hw_config.c **** 	NVIC_Configuration();
  62:../src/hw_config.c **** 
  63:../src/hw_config.c **** 	/* Configure the LEDs and set the default states */
  64:../src/hw_config.c **** 	int LEDx;
  65:../src/hw_config.c **** 	for(LEDx = 0; LEDx < LEDn; ++LEDx)
  66:../src/hw_config.c **** 	{
  67:../src/hw_config.c **** 	    LED_Init(LEDx);
  68:../src/hw_config.c **** 	    LED_Off(LEDx);
  69:../src/hw_config.c **** 	}
  70:../src/hw_config.c **** 
  71:../src/hw_config.c ****     /* Configure the Button */
  72:../src/hw_config.c ****     BUTTON_Init(BUTTON1, BUTTON_MODE_EXTI);
  73:../src/hw_config.c **** 
  74:../src/hw_config.c **** 	/* Setup SysTick Timer for 1 msec interrupts */
  75:../src/hw_config.c **** 	if (SysTick_Config(SystemCoreClock / 1000))
  76:../src/hw_config.c **** 	{
  77:../src/hw_config.c **** 		/* Capture error */
  78:../src/hw_config.c **** 		while (1)
  79:../src/hw_config.c **** 		{
  80:../src/hw_config.c **** 		}
  81:../src/hw_config.c **** 	}
  82:../src/hw_config.c **** 	/* Configure the SysTick Handler Priority: Preemption priority and subpriority */
  83:../src/hw_config.c **** 	NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0x03, 0x00));
  84:../src/hw_config.c **** }
  85:../src/hw_config.c **** 
  86:../src/hw_config.c **** /*******************************************************************************
  87:../src/hw_config.c ****  * Function Name  : NVIC_Configuration
  88:../src/hw_config.c ****  * Description    : Configures Vector Table base location.
  89:../src/hw_config.c ****  * Input          : None
  90:../src/hw_config.c ****  * Output         : None
  91:../src/hw_config.c ****  * Return         : None
  92:../src/hw_config.c ****  *******************************************************************************/
  93:../src/hw_config.c **** void NVIC_Configuration(void)
  94:../src/hw_config.c **** {
  27              		.loc 1 94 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              		@ link register save eliminated.
  95:../src/hw_config.c **** #ifdef DFU_BUILD_ENABLE
  96:../src/hw_config.c **** 	/* Set the Vector Table(VT) base location at 0xA000 */
  97:../src/hw_config.c **** 	NVIC_SetVectorTable(NVIC_VectTab_FLASH, 0xA000);
  98:../src/hw_config.c **** #endif
  99:../src/hw_config.c **** 
 100:../src/hw_config.c **** 	/* Configure the NVIC Preemption Priority Bits */
 101:../src/hw_config.c **** 	/* 4 bits for pre-emption priority(0-15 PreemptionPriority) and 0 bits for subpriority(0 SubPriori
 102:../src/hw_config.c **** 	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_4);
 103:../src/hw_config.c **** 
 104:../src/hw_config.c **** 	/* Configure the Priority Group to 2 bits */
 105:../src/hw_config.c **** 	/* 2 bits for pre-emption priority(0-3 PreemptionPriority) and 2 bits for subpriority(0-3 SubPrior
 106:../src/hw_config.c **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
  32              		.loc 1 106 0
  33 0000 4FF4A060 		mov	r0, #1280
 107:../src/hw_config.c **** }
  34              		.loc 1 107 0
 106:../src/hw_config.c **** 	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
  35              		.loc 1 106 0
  36 0004 FFF7FEBF 		b	NVIC_PriorityGroupConfig
  37              	.LVL0:
  38              		.cfi_endproc
  39              	.LFE57:
  41              		.section	.text.LED_Init,"ax",%progbits
  42              		.align	1
  43              		.global	LED_Init
  44              		.thumb
  45              		.thumb_func
  47              	LED_Init:
  48              	.LFB58:
 108:../src/hw_config.c **** 
 109:../src/hw_config.c **** /**
 110:../src/hw_config.c ****   * @brief  Configures LED GPIO.
 111:../src/hw_config.c ****   * @param  Led: Specifies the Led to be configured.
 112:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 113:../src/hw_config.c ****   *     @arg LED1
 114:../src/hw_config.c ****   *     @arg LED2
 115:../src/hw_config.c ****   * @retval None
 116:../src/hw_config.c ****   */
 117:../src/hw_config.c **** void LED_Init(Led_TypeDef Led)
 118:../src/hw_config.c **** {
  49              		.loc 1 118 0
  50              		.cfi_startproc
  51              		@ args = 0, pretend = 0, frame = 8
  52              		@ frame_needed = 0, uses_anonymous_args = 0
  53              	.LVL1:
  54 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
  55              	.LCFI0:
  56              		.cfi_def_cfa_offset 24
  57              		.cfi_offset 0, -24
  58              		.cfi_offset 1, -20
  59              		.cfi_offset 2, -16
  60              		.cfi_offset 4, -12
  61              		.cfi_offset 5, -8
  62              		.cfi_offset 14, -4
 119:../src/hw_config.c ****     GPIO_InitTypeDef  GPIO_InitStructure;
 120:../src/hw_config.c **** 
 121:../src/hw_config.c ****     /* Enable the GPIO_LED Clock */
 122:../src/hw_config.c ****     RCC_APB2PeriphClockCmd(LED_CLK[Led], ENABLE);
  63              		.loc 1 122 0
  64 0002 0C4D     		ldr	r5, .L3
 118:../src/hw_config.c **** {
  65              		.loc 1 118 0
  66 0004 0446     		mov	r4, r0
  67              		.loc 1 122 0
  68 0006 0121     		movs	r1, #1
  69 0008 55F82000 		ldr	r0, [r5, r0, lsl #2]
  70              	.LVL2:
  71 000c FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
  72              	.LVL3:
 123:../src/hw_config.c **** 
 124:../src/hw_config.c ****     /* Configure the GPIO_LED pin */
 125:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
  73              		.loc 1 125 0
  74 0010 05EB4405 		add	r5, r5, r4, lsl #1
 126:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 127:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 128:../src/hw_config.c **** 
 129:../src/hw_config.c ****     GPIO_Init(LED_PORT[Led], &GPIO_InitStructure);
  75              		.loc 1 129 0
  76 0014 084A     		ldr	r2, .L3+4
 126:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  77              		.loc 1 126 0
  78 0016 1020     		movs	r0, #16
 127:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  79              		.loc 1 127 0
  80 0018 0321     		movs	r1, #3
 125:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
  81              		.loc 1 125 0
  82 001a 2B89     		ldrh	r3, [r5, #8]
 126:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
  83              		.loc 1 126 0
  84 001c 8DF80700 		strb	r0, [sp, #7]
 127:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
  85              		.loc 1 127 0
  86 0020 8DF80610 		strb	r1, [sp, #6]
  87              		.loc 1 129 0
  88 0024 52F82400 		ldr	r0, [r2, r4, lsl #2]
  89 0028 01A9     		add	r1, sp, #4
 125:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = LED_PIN[Led];
  90              		.loc 1 125 0
  91 002a ADF80430 		strh	r3, [sp, #4]	@ movhi
  92              		.loc 1 129 0
  93 002e FFF7FEFF 		bl	GPIO_Init
  94              	.LVL4:
 130:../src/hw_config.c **** }
  95              		.loc 1 130 0
  96 0032 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
  97              	.L4:
  98              		.align	2
  99              	.L3:
 100 0034 00000000 		.word	.LANCHOR0
 101 0038 00000000 		.word	.LANCHOR1
 102              		.cfi_endproc
 103              	.LFE58:
 105              		.section	.text.LED_On,"ax",%progbits
 106              		.align	1
 107              		.global	LED_On
 108              		.thumb
 109              		.thumb_func
 111              	LED_On:
 112              	.LFB59:
 131:../src/hw_config.c **** 
 132:../src/hw_config.c **** /**
 133:../src/hw_config.c ****   * @brief  Turns selected LED On.
 134:../src/hw_config.c ****   * @param  Led: Specifies the Led to be set on.
 135:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 136:../src/hw_config.c ****   *     @arg LED1
 137:../src/hw_config.c ****   *     @arg LED2
 138:../src/hw_config.c ****   * @retval None
 139:../src/hw_config.c ****   */
 140:../src/hw_config.c **** void LED_On(Led_TypeDef Led)
 141:../src/hw_config.c **** {
 113              		.loc 1 141 0
 114              		.cfi_startproc
 115              		@ args = 0, pretend = 0, frame = 0
 116              		@ frame_needed = 0, uses_anonymous_args = 0
 117              		@ link register save eliminated.
 118              	.LVL5:
 142:../src/hw_config.c ****     LED_PORT[Led]->BSRR = LED_PIN[Led];
 119              		.loc 1 142 0
 120 0000 044B     		ldr	r3, .L6
 121 0002 054A     		ldr	r2, .L6+4
 122 0004 53F82010 		ldr	r1, [r3, r0, lsl #2]
 123 0008 02EB4000 		add	r0, r2, r0, lsl #1
 124              	.LVL6:
 125 000c 0389     		ldrh	r3, [r0, #8]
 126 000e 0B61     		str	r3, [r1, #16]
 127 0010 7047     		bx	lr
 128              	.L7:
 129 0012 00BF     		.align	2
 130              	.L6:
 131 0014 00000000 		.word	.LANCHOR1
 132 0018 00000000 		.word	.LANCHOR0
 133              		.cfi_endproc
 134              	.LFE59:
 136              		.section	.text.LED_Off,"ax",%progbits
 137              		.align	1
 138              		.global	LED_Off
 139              		.thumb
 140              		.thumb_func
 142              	LED_Off:
 143              	.LFB60:
 143:../src/hw_config.c **** }
 144:../src/hw_config.c **** 
 145:../src/hw_config.c **** /**
 146:../src/hw_config.c ****   * @brief  Turns selected LED Off.
 147:../src/hw_config.c ****   * @param  Led: Specifies the Led to be set off.
 148:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 149:../src/hw_config.c ****   *     @arg LED1
 150:../src/hw_config.c ****   *     @arg LED2
 151:../src/hw_config.c ****   * @retval None
 152:../src/hw_config.c ****   */
 153:../src/hw_config.c **** void LED_Off(Led_TypeDef Led)
 154:../src/hw_config.c **** {
 144              		.loc 1 154 0
 145              		.cfi_startproc
 146              		@ args = 0, pretend = 0, frame = 0
 147              		@ frame_needed = 0, uses_anonymous_args = 0
 148              		@ link register save eliminated.
 149              	.LVL7:
 155:../src/hw_config.c ****     LED_PORT[Led]->BRR = LED_PIN[Led];
 150              		.loc 1 155 0
 151 0000 044B     		ldr	r3, .L9
 152 0002 054A     		ldr	r2, .L9+4
 153 0004 53F82010 		ldr	r1, [r3, r0, lsl #2]
 154 0008 02EB4000 		add	r0, r2, r0, lsl #1
 155              	.LVL8:
 156 000c 0389     		ldrh	r3, [r0, #8]
 157 000e 4B61     		str	r3, [r1, #20]
 158 0010 7047     		bx	lr
 159              	.L10:
 160 0012 00BF     		.align	2
 161              	.L9:
 162 0014 00000000 		.word	.LANCHOR1
 163 0018 00000000 		.word	.LANCHOR0
 164              		.cfi_endproc
 165              	.LFE60:
 167              		.section	.text.LED_Toggle,"ax",%progbits
 168              		.align	1
 169              		.global	LED_Toggle
 170              		.thumb
 171              		.thumb_func
 173              	LED_Toggle:
 174              	.LFB61:
 156:../src/hw_config.c **** }
 157:../src/hw_config.c **** 
 158:../src/hw_config.c **** /**
 159:../src/hw_config.c ****   * @brief  Toggles the selected LED.
 160:../src/hw_config.c ****   * @param  Led: Specifies the Led to be toggled.
 161:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 162:../src/hw_config.c ****   *     @arg LED1
 163:../src/hw_config.c ****   *     @arg LED2
 164:../src/hw_config.c ****   * @retval None
 165:../src/hw_config.c ****   */
 166:../src/hw_config.c **** void LED_Toggle(Led_TypeDef Led)
 167:../src/hw_config.c **** {
 175              		.loc 1 167 0
 176              		.cfi_startproc
 177              		@ args = 0, pretend = 0, frame = 0
 178              		@ frame_needed = 0, uses_anonymous_args = 0
 179              		@ link register save eliminated.
 180              	.LVL9:
 168:../src/hw_config.c ****     LED_PORT[Led]->ODR ^= LED_PIN[Led];
 181              		.loc 1 168 0
 182 0000 054B     		ldr	r3, .L12
 183 0002 0649     		ldr	r1, .L12+4
 184 0004 53F82030 		ldr	r3, [r3, r0, lsl #2]
 185 0008 01EB4000 		add	r0, r1, r0, lsl #1
 186              	.LVL10:
 187 000c DA68     		ldr	r2, [r3, #12]
 188 000e 0189     		ldrh	r1, [r0, #8]
 189 0010 4A40     		eors	r2, r2, r1
 190 0012 DA60     		str	r2, [r3, #12]
 191 0014 7047     		bx	lr
 192              	.L13:
 193 0016 00BF     		.align	2
 194              	.L12:
 195 0018 00000000 		.word	.LANCHOR1
 196 001c 00000000 		.word	.LANCHOR0
 197              		.cfi_endproc
 198              	.LFE61:
 200              		.section	.text.BUTTON_EXTI_Config,"ax",%progbits
 201              		.align	1
 202              		.global	BUTTON_EXTI_Config
 203              		.thumb
 204              		.thumb_func
 206              	BUTTON_EXTI_Config:
 207              	.LFB63:
 169:../src/hw_config.c **** }
 170:../src/hw_config.c **** 
 171:../src/hw_config.c **** /**
 172:../src/hw_config.c ****   * @brief  Configures Button GPIO, EXTI Line and DEBOUNCE Timer.
 173:../src/hw_config.c ****   * @param  Button: Specifies the Button to be configured.
 174:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 175:../src/hw_config.c ****   *     @arg BUTTON1: Button1
 176:../src/hw_config.c ****   *     @arg BUTTON2: Button2
 177:../src/hw_config.c ****   * @param  Button_Mode: Specifies Button mode.
 178:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 179:../src/hw_config.c ****   *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO
 180:../src/hw_config.c ****   *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
 181:../src/hw_config.c ****   *                     generation capability
 182:../src/hw_config.c ****   * @retval None
 183:../src/hw_config.c ****   */
 184:../src/hw_config.c **** void BUTTON_Init(Button_TypeDef Button, ButtonMode_TypeDef Button_Mode)
 185:../src/hw_config.c **** {
 186:../src/hw_config.c ****     GPIO_InitTypeDef GPIO_InitStructure;
 187:../src/hw_config.c ****     NVIC_InitTypeDef NVIC_InitStructure;
 188:../src/hw_config.c ****     TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
 189:../src/hw_config.c **** 
 190:../src/hw_config.c ****     /* Enable the BUTTON Clock */
 191:../src/hw_config.c ****     RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 192:../src/hw_config.c **** 
 193:../src/hw_config.c ****     /* Configure Button pin as input floating */
 194:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 195:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 196:../src/hw_config.c ****     GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 197:../src/hw_config.c **** 
 198:../src/hw_config.c ****     if (Button_Mode == BUTTON_MODE_EXTI)
 199:../src/hw_config.c ****     {
 200:../src/hw_config.c ****         /* Enable TIM clock */
 201:../src/hw_config.c ****     	DEBOUNCE_TIMER_CLK_CMD(DEBOUNCE_TIMER_CLK, ENABLE);
 202:../src/hw_config.c **** 
 203:../src/hw_config.c ****         /* TIM Update Frequency = 72000000/7200/100 = 100Hz = 10ms */
 204:../src/hw_config.c ****         /* TIM_Prescaler: 7199 */
 205:../src/hw_config.c ****         /* TIM_Autoreload: 99 -> 100Hz = 10ms */
 206:../src/hw_config.c ****         uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 207:../src/hw_config.c ****         uint16_t TIM_Autoreload = (10000 / DEBOUNCE_FREQ) - 1;
 208:../src/hw_config.c **** 
 209:../src/hw_config.c ****         /* Time Base Configuration */
 210:../src/hw_config.c ****     	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 211:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
 212:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 213:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 214:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 215:../src/hw_config.c ****     	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 216:../src/hw_config.c **** 
 217:../src/hw_config.c ****         /* TIM Configuration */
 218:../src/hw_config.c ****         //TIM_PrescalerConfig(DEBOUNCE_TIMER, TIM_Prescaler, TIM_PSCReloadMode_Update);
 219:../src/hw_config.c ****         //TIM_SetAutoreload(DEBOUNCE_TIMER, TIM_Autoreload);
 220:../src/hw_config.c **** 
 221:../src/hw_config.c ****         /* One Pulse Mode selection */
 222:../src/hw_config.c ****         TIM_SelectOnePulseMode(DEBOUNCE_TIMER, TIM_OPMode_Single);
 223:../src/hw_config.c **** 
 224:../src/hw_config.c ****         TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 225:../src/hw_config.c **** 
 226:../src/hw_config.c ****         /* TIM IT Enable */
 227:../src/hw_config.c ****         TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);
 228:../src/hw_config.c **** 
 229:../src/hw_config.c ****         /* Enable the TIM Interrupt */
 230:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 231:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 232:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 233:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 234:../src/hw_config.c **** 
 235:../src/hw_config.c ****         NVIC_Init(&NVIC_InitStructure);
 236:../src/hw_config.c **** 
 237:../src/hw_config.c ****         /* Enable the Button EXTI Interrupt */
 238:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 239:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 240:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 241:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 242:../src/hw_config.c **** 
 243:../src/hw_config.c ****         NVIC_Init(&NVIC_InitStructure);
 244:../src/hw_config.c **** 
 245:../src/hw_config.c ****         BUTTON_DEBOUNCED[Button] = 0x00;
 246:../src/hw_config.c **** 
 247:../src/hw_config.c ****         BUTTON_EXTI_Config(Button, ENABLE);
 248:../src/hw_config.c ****     }
 249:../src/hw_config.c **** }
 250:../src/hw_config.c **** 
 251:../src/hw_config.c **** void BUTTON_EXTI_Config(Button_TypeDef Button, FunctionalState NewState)
 252:../src/hw_config.c **** {
 208              		.loc 1 252 0
 209              		.cfi_startproc
 210              		@ args = 0, pretend = 0, frame = 8
 211              		@ frame_needed = 0, uses_anonymous_args = 0
 212              	.LVL11:
 213 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 214              	.LCFI1:
 215              		.cfi_def_cfa_offset 24
 216              		.cfi_offset 0, -24
 217              		.cfi_offset 1, -20
 218              		.cfi_offset 4, -16
 219              		.cfi_offset 5, -12
 220              		.cfi_offset 6, -8
 221              		.cfi_offset 14, -4
 253:../src/hw_config.c ****     EXTI_InitTypeDef EXTI_InitStructure;
 254:../src/hw_config.c **** 
 255:../src/hw_config.c **** 	/* Connect Button EXTI Line to Button GPIO Pin */
 256:../src/hw_config.c ****     GPIO_EXTILineConfig(BUTTON_PORT_SOURCE[Button], BUTTON_PIN_SOURCE[Button]);
 222              		.loc 1 256 0
 223 0002 0E4C     		ldr	r4, .L15
 252:../src/hw_config.c **** {
 224              		.loc 1 252 0
 225 0004 0E46     		mov	r6, r1
 226              		.loc 1 256 0
 227 0006 04EB4004 		add	r4, r4, r0, lsl #1
 228 000a 217C     		ldrb	r1, [r4, #16]	@ zero_extendqisi2
 229              	.LVL12:
 252:../src/hw_config.c **** {
 230              		.loc 1 252 0
 231 000c 0546     		mov	r5, r0
 232              		.loc 1 256 0
 233 000e 207B     		ldrb	r0, [r4, #12]	@ zero_extendqisi2
 234              	.LVL13:
 235 0010 FFF7FEFF 		bl	GPIO_EXTILineConfig
 236              	.LVL14:
 257:../src/hw_config.c **** 
 258:../src/hw_config.c **** 	/* Clear the EXTI line pending flag */
 259:../src/hw_config.c **** 	EXTI_ClearFlag(BUTTON_EXTI_LINE[Button]);
 237              		.loc 1 259 0
 238 0014 A48A     		ldrh	r4, [r4, #20]
 239 0016 2046     		mov	r0, r4
 240 0018 FFF7FEFF 		bl	EXTI_ClearFlag
 241              	.LVL15:
 260:../src/hw_config.c **** 
 261:../src/hw_config.c ****     /* Configure Button EXTI line */
 262:../src/hw_config.c ****     EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 263:../src/hw_config.c ****     EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 264:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 242              		.loc 1 264 0
 243 001c 0848     		ldr	r0, .L15+4
 263:../src/hw_config.c ****     EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 244              		.loc 1 263 0
 245 001e 0023     		movs	r3, #0
 246              		.loc 1 264 0
 247 0020 4519     		adds	r5, r0, r5
 248 0022 297A     		ldrb	r1, [r5, #8]	@ zero_extendqisi2
 265:../src/hw_config.c ****     EXTI_InitStructure.EXTI_LineCmd = NewState;
 266:../src/hw_config.c ****     EXTI_Init(&EXTI_InitStructure);
 249              		.loc 1 266 0
 250 0024 6846     		mov	r0, sp
 262:../src/hw_config.c ****     EXTI_InitStructure.EXTI_Line = BUTTON_EXTI_LINE[Button];
 251              		.loc 1 262 0
 252 0026 0094     		str	r4, [sp, #0]
 263:../src/hw_config.c ****     EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 253              		.loc 1 263 0
 254 0028 8DF80430 		strb	r3, [sp, #4]
 264:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Trigger = BUTTON_EXTI_TRIGGER[Button];
 255              		.loc 1 264 0
 256 002c 8DF80510 		strb	r1, [sp, #5]
 265:../src/hw_config.c ****     EXTI_InitStructure.EXTI_LineCmd = NewState;
 257              		.loc 1 265 0
 258 0030 8DF80660 		strb	r6, [sp, #6]
 259              		.loc 1 266 0
 260 0034 FFF7FEFF 		bl	EXTI_Init
 261              	.LVL16:
 267:../src/hw_config.c **** }
 262              		.loc 1 267 0
 263 0038 7CBD     		pop	{r2, r3, r4, r5, r6, pc}
 264              	.L16:
 265 003a 00BF     		.align	2
 266              	.L15:
 267 003c 00000000 		.word	.LANCHOR0
 268 0040 00000000 		.word	.LANCHOR1
 269              		.cfi_endproc
 270              	.LFE63:
 272              		.section	.text.BUTTON_Init,"ax",%progbits
 273              		.align	1
 274              		.global	BUTTON_Init
 275              		.thumb
 276              		.thumb_func
 278              	BUTTON_Init:
 279              	.LFB62:
 185:../src/hw_config.c **** {
 280              		.loc 1 185 0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 24
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              	.LVL17:
 285 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 286              	.LCFI2:
 287              		.cfi_def_cfa_offset 24
 288              		.cfi_offset 4, -24
 289              		.cfi_offset 5, -20
 290              		.cfi_offset 6, -16
 291              		.cfi_offset 7, -12
 292              		.cfi_offset 8, -8
 293              		.cfi_offset 14, -4
 191:../src/hw_config.c ****     RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 294              		.loc 1 191 0
 295 0004 354F     		ldr	r7, .L20
 296 0006 8600     		lsls	r6, r0, #2
 297 0008 BB19     		adds	r3, r7, r6
 185:../src/hw_config.c **** {
 298              		.loc 1 185 0
 299 000a 0546     		mov	r5, r0
 191:../src/hw_config.c ****     RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 300              		.loc 1 191 0
 301 000c 9869     		ldr	r0, [r3, #24]
 302              	.LVL18:
 185:../src/hw_config.c **** {
 303              		.loc 1 185 0
 304 000e 86B0     		sub	sp, sp, #24
 305              	.LCFI3:
 306              		.cfi_def_cfa_offset 48
 185:../src/hw_config.c **** {
 307              		.loc 1 185 0
 308 0010 0C46     		mov	r4, r1
 191:../src/hw_config.c ****     RCC_APB2PeriphClockCmd(BUTTON_CLK[Button] | RCC_APB2Periph_AFIO, ENABLE);
 309              		.loc 1 191 0
 310 0012 40F00100 		orr	r0, r0, #1
 311 0016 0121     		movs	r1, #1
 312              	.LVL19:
 313 0018 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 314              	.LVL20:
 194:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 315              		.loc 1 194 0
 316 001c 304B     		ldr	r3, .L20+4
 195:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 317              		.loc 1 195 0
 318 001e 07EB4507 		add	r7, r7, r5, lsl #1
 194:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 319              		.loc 1 194 0
 320 0022 5A19     		adds	r2, r3, r5
 321 0024 917A     		ldrb	r1, [r2, #10]	@ zero_extendqisi2
 195:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 322              		.loc 1 195 0
 323 0026 388C     		ldrh	r0, [r7, #32]
 194:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Mode = BUTTON_GPIO_MODE[Button];
 324              		.loc 1 194 0
 325 0028 8DF80710 		strb	r1, [sp, #7]
 196:../src/hw_config.c ****     GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 326              		.loc 1 196 0
 327 002c 9E19     		adds	r6, r3, r6
 195:../src/hw_config.c ****     GPIO_InitStructure.GPIO_Pin = BUTTON_PIN[Button];
 328              		.loc 1 195 0
 329 002e 06A9     		add	r1, sp, #24
 330 0030 21F8140D 		strh	r0, [r1, #-20]!	@ movhi
 196:../src/hw_config.c ****     GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStructure);
 331              		.loc 1 196 0
 332 0034 F068     		ldr	r0, [r6, #12]
 333 0036 FFF7FEFF 		bl	GPIO_Init
 334              	.LVL21:
 198:../src/hw_config.c ****     if (Button_Mode == BUTTON_MODE_EXTI)
 335              		.loc 1 198 0
 336 003a 012C     		cmp	r4, #1
 337 003c 4BD1     		bne	.L17
 338              	.LBB2:
 206:../src/hw_config.c ****         uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 339              		.loc 1 206 0
 340 003e 294E     		ldr	r6, .L20+8
 201:../src/hw_config.c ****     	DEBOUNCE_TIMER_CLK_CMD(DEBOUNCE_TIMER_CLK, ENABLE);
 341              		.loc 1 201 0
 342 0040 4FF40060 		mov	r0, #2048
 343 0044 2146     		mov	r1, r4
 344 0046 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 345              	.LVL22:
 206:../src/hw_config.c ****         uint16_t TIM_Prescaler = (SystemCoreClock / 10000) - 1;
 346              		.loc 1 206 0
 347 004a 3268     		ldr	r2, [r6, #0]
 348 004c 42F21073 		movw	r3, #10000
 349 0050 B2FBF3F1 		udiv	r1, r2, r3
 350 0054 481E     		subs	r0, r1, #1
 351 0056 86B2     		uxth	r6, r0
 352              	.LVL23:
 210:../src/hw_config.c ****     	TIM_TimeBaseStructInit(&TIM_TimeBaseStructure);
 353              		.loc 1 210 0
 354 0058 03A8     		add	r0, sp, #12
 355              	.LVL24:
 356 005a FFF7FEFF 		bl	TIM_TimeBaseStructInit
 357              	.LVL25:
 213:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 358              		.loc 1 213 0
 359 005e 0023     		movs	r3, #0
 212:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 360              		.loc 1 212 0
 361 0060 6322     		movs	r2, #99
 215:../src/hw_config.c ****     	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 362              		.loc 1 215 0
 363 0062 2148     		ldr	r0, .L20+12
 364 0064 03A9     		add	r1, sp, #12
 213:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 365              		.loc 1 213 0
 366 0066 ADF81230 		strh	r3, [sp, #18]	@ movhi
 214:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 367              		.loc 1 214 0
 368 006a ADF80E30 		strh	r3, [sp, #14]	@ movhi
 212:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_Period = TIM_Autoreload;
 369              		.loc 1 212 0
 370 006e ADF81020 		strh	r2, [sp, #16]	@ movhi
 211:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_Prescaler = TIM_Prescaler;
 371              		.loc 1 211 0
 372 0072 ADF80C60 		strh	r6, [sp, #12]	@ movhi
 213:../src/hw_config.c ****     	TIM_TimeBaseStructure.TIM_ClockDivision = 0x0;
 373              		.loc 1 213 0
 374 0076 1E46     		mov	r6, r3	@ movhi
 375              	.LVL26:
 215:../src/hw_config.c ****     	TIM_TimeBaseInit(DEBOUNCE_TIMER, &TIM_TimeBaseStructure);
 376              		.loc 1 215 0
 377 0078 FFF7FEFF 		bl	TIM_TimeBaseInit
 378              	.LVL27:
 222:../src/hw_config.c ****         TIM_SelectOnePulseMode(DEBOUNCE_TIMER, TIM_OPMode_Single);
 379              		.loc 1 222 0
 380 007c 1A48     		ldr	r0, .L20+12
 381 007e 0821     		movs	r1, #8
 382 0080 FFF7FEFF 		bl	TIM_SelectOnePulseMode
 383              	.LVL28:
 224:../src/hw_config.c ****         TIM_ClearITPendingBit(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG);
 384              		.loc 1 224 0
 385 0084 1848     		ldr	r0, .L20+12
 386 0086 2146     		mov	r1, r4
 387 0088 FFF7FEFF 		bl	TIM_ClearITPendingBit
 388              	.LVL29:
 227:../src/hw_config.c ****         TIM_ITConfig(DEBOUNCE_TIMER, DEBOUNCE_TIMER_FLAG, ENABLE);
 389              		.loc 1 227 0
 390 008c 2246     		mov	r2, r4
 391 008e 1648     		ldr	r0, .L20+12
 392 0090 2146     		mov	r1, r4
 393 0092 FFF7FEFF 		bl	TIM_ITConfig
 394              	.LVL30:
 231:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 395              		.loc 1 231 0
 396 0096 4FF00208 		mov	r8, #2
 230:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 397              		.loc 1 230 0
 398 009a 1921     		movs	r1, #25
 235:../src/hw_config.c ****         NVIC_Init(&NVIC_InitStructure);
 399              		.loc 1 235 0
 400 009c 02A8     		add	r0, sp, #8
 230:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannel = DEBOUNCE_TIMER_IRQn;
 401              		.loc 1 230 0
 402 009e 8DF80810 		strb	r1, [sp, #8]
 231:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 403              		.loc 1 231 0
 404 00a2 8DF80980 		strb	r8, [sp, #9]
 232:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 405              		.loc 1 232 0
 406 00a6 8DF80A60 		strb	r6, [sp, #10]
 233:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 407              		.loc 1 233 0
 408 00aa 8DF80B40 		strb	r4, [sp, #11]
 235:../src/hw_config.c ****         NVIC_Init(&NVIC_InitStructure);
 409              		.loc 1 235 0
 410 00ae FFF7FEFF 		bl	NVIC_Init
 411              	.LVL31:
 238:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 412              		.loc 1 238 0
 413 00b2 B88C     		ldrh	r0, [r7, #36]
 239:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x02;
 414              		.loc 1 239 0
 415 00b4 8DF80980 		strb	r8, [sp, #9]
 238:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannel = BUTTON_IRQn[Button];
 416              		.loc 1 238 0
 417 00b8 8DF80800 		strb	r0, [sp, #8]
 243:../src/hw_config.c ****         NVIC_Init(&NVIC_InitStructure);
 418              		.loc 1 243 0
 419 00bc 02A8     		add	r0, sp, #8
 240:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 420              		.loc 1 240 0
 421 00be 8DF80A40 		strb	r4, [sp, #10]
 241:../src/hw_config.c ****         NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 422              		.loc 1 241 0
 423 00c2 8DF80B40 		strb	r4, [sp, #11]
 243:../src/hw_config.c ****         NVIC_Init(&NVIC_InitStructure);
 424              		.loc 1 243 0
 425 00c6 FFF7FEFF 		bl	NVIC_Init
 426              	.LVL32:
 245:../src/hw_config.c ****         BUTTON_DEBOUNCED[Button] = 0x00;
 427              		.loc 1 245 0
 428 00ca 084A     		ldr	r2, .L20+16
 247:../src/hw_config.c ****         BUTTON_EXTI_Config(Button, ENABLE);
 429              		.loc 1 247 0
 430 00cc 2846     		mov	r0, r5
 431 00ce 2146     		mov	r1, r4
 245:../src/hw_config.c ****         BUTTON_DEBOUNCED[Button] = 0x00;
 432              		.loc 1 245 0
 433 00d0 5655     		strb	r6, [r2, r5]
 247:../src/hw_config.c ****         BUTTON_EXTI_Config(Button, ENABLE);
 434              		.loc 1 247 0
 435 00d2 FFF7FEFF 		bl	BUTTON_EXTI_Config
 436              	.LVL33:
 437              	.L17:
 438              	.LBE2:
 249:../src/hw_config.c **** }
 439              		.loc 1 249 0
 440 00d6 06B0     		add	sp, sp, #24
 441 00d8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 442              	.L21:
 443              		.align	2
 444              	.L20:
 445 00dc 00000000 		.word	.LANCHOR0
 446 00e0 00000000 		.word	.LANCHOR1
 447 00e4 00000000 		.word	SystemCoreClock
 448 00e8 002C0140 		.word	1073818624
 449 00ec 00000000 		.word	.LANCHOR2
 450              		.cfi_endproc
 451              	.LFE62:
 453              		.section	.text.Set_System,"ax",%progbits
 454              		.align	1
 455              		.global	Set_System
 456              		.thumb
 457              		.thumb_func
 459              	Set_System:
 460              	.LFB56:
  46:../src/hw_config.c **** {
 461              		.loc 1 46 0
 462              		.cfi_startproc
 463              		@ args = 0, pretend = 0, frame = 0
 464              		@ frame_needed = 0, uses_anonymous_args = 0
 465 0000 08B5     		push	{r3, lr}
 466              	.LCFI4:
 467              		.cfi_def_cfa_offset 8
 468              		.cfi_offset 3, -8
 469              		.cfi_offset 14, -4
  55:../src/hw_config.c **** 	RCC_APB1PeriphClockCmd(RCC_APB1Periph_PWR | RCC_APB1Periph_BKP, ENABLE);
 470              		.loc 1 55 0
 471 0002 0121     		movs	r1, #1
 472 0004 4FF0C050 		mov	r0, #402653184
 473 0008 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 474              	.LVL34:
  58:../src/hw_config.c **** 	PWR_BackupAccessCmd(ENABLE);
 475              		.loc 1 58 0
 476 000c 0120     		movs	r0, #1
 477 000e FFF7FEFF 		bl	PWR_BackupAccessCmd
 478              	.LVL35:
  61:../src/hw_config.c **** 	NVIC_Configuration();
 479              		.loc 1 61 0
 480 0012 FFF7FEFF 		bl	NVIC_Configuration
 481              	.LVL36:
  67:../src/hw_config.c **** 	    LED_Init(LEDx);
 482              		.loc 1 67 0
 483 0016 0020     		movs	r0, #0
 484 0018 FFF7FEFF 		bl	LED_Init
 485              	.LVL37:
  68:../src/hw_config.c **** 	    LED_Off(LEDx);
 486              		.loc 1 68 0
 487 001c 0020     		movs	r0, #0
 488 001e FFF7FEFF 		bl	LED_Off
 489              	.LVL38:
  67:../src/hw_config.c **** 	    LED_Init(LEDx);
 490              		.loc 1 67 0
 491 0022 0120     		movs	r0, #1
 492 0024 FFF7FEFF 		bl	LED_Init
 493              	.LVL39:
  68:../src/hw_config.c **** 	    LED_Off(LEDx);
 494              		.loc 1 68 0
 495 0028 0120     		movs	r0, #1
 496 002a FFF7FEFF 		bl	LED_Off
 497              	.LVL40:
  72:../src/hw_config.c ****     BUTTON_Init(BUTTON1, BUTTON_MODE_EXTI);
 498              		.loc 1 72 0
 499 002e 0020     		movs	r0, #0
 500 0030 0121     		movs	r1, #1
 501 0032 FFF7FEFF 		bl	BUTTON_Init
 502              	.LVL41:
  75:../src/hw_config.c **** 	if (SysTick_Config(SystemCoreClock / 1000))
 503              		.loc 1 75 0
 504 0036 154B     		ldr	r3, .L25
 505              	.LVL42:
 506 0038 4FF47A70 		mov	r0, #1000
 507 003c 1A68     		ldr	r2, [r3, #0]
 508              	.LBB13:
 509              	.LBB14:
 510              		.file 2 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h"
   1:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /**************************************************************************//**
   2:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @file     core_cm3.h
   3:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @brief    CMSIS Cortex-M3 Core Peripheral Access Layer Header File
   4:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @version  V3.01
   5:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @date     22. March 2012
   6:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *
   7:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @note
   8:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * Copyright (C) 2009-2012 ARM Limited. All rights reserved.
   9:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *
  10:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @par
  11:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * ARM Limited (ARM) is supplying this software for use with Cortex-M
  12:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * processor based microcontrollers.  This file can be freely distributed
  13:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * within development tools that are supporting such ARM based processors.
  14:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *
  15:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * @par
  16:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHETHER EXPRESS, IMPLIED
  17:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
  18:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
  19:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
  20:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
  21:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *
  22:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  23:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if defined ( __ICCARM__ )
  24:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  #pragma system_include  /* treat file as system include file for MISRA check */
  25:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
  26:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  27:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
  28:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  extern "C" {
  29:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
  30:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  31:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_GENERIC
  32:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_GENERIC
  33:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  34:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \page CMSIS_MISRA_Exceptions  MISRA-C:2004 Compliance Exceptions
  35:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   CMSIS violates the following MISRA-C:2004 rules:
  36:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  37:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****    \li Required Rule 8.5, object/function definition in header file.<br>
  38:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****      Function definitions in header files are used to allow 'inlining'.
  39:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  40:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****    \li Required Rule 18.4, declaration of union type or object of union type: '{...}'.<br>
  41:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****      Unions are used for effective representation of core registers.
  42:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  43:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****    \li Advisory Rule 19.7, Function-like macro defined.<br>
  44:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****      Function-like macros are used to allow more efficient code.
  45:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
  46:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  47:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  48:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*******************************************************************************
  49:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *                 CMSIS definitions
  50:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
  51:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup Cortex_M3
  52:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
  53:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
  54:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  55:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*  CMSIS CM3 definitions */
  56:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_MAIN  (0x03)                                   /*!< [31:16] CMSIS HAL m
  57:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION_SUB   (0x01)                                   /*!< [15:0]  CMSIS HAL s
  58:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __CM3_CMSIS_VERSION       ((__CM3_CMSIS_VERSION_MAIN << 16) | \
  59:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                                     __CM3_CMSIS_VERSION_SUB          )     /*!< CMSIS HAL version n
  60:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  61:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __CORTEX_M                (0x03)                                   /*!< Cortex-M Core      
  62:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  63:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  64:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if   defined ( __CC_ARM )
  65:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for ARM Comp
  66:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __INLINE         __inline                                   /*!< inline keyword for ARM C
  67:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static __inline
  68:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  69:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
  70:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for IAR Comp
  71:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for IAR C
  72:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  73:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  74:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
  75:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TI CCS C
  76:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  77:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  78:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
  79:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for GNU Comp
  80:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for GNU C
  81:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  82:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  83:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
  84:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __ASM            __asm                                      /*!< asm keyword for TASKING 
  85:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __INLINE         inline                                     /*!< inline keyword for TASKI
  86:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define __STATIC_INLINE  static inline
  87:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  88:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
  89:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  90:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** __FPU_USED indicates whether an FPU is used or not. This core does not support an FPU at all
  91:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** */
  92:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __FPU_USED       0
  93:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  94:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if defined ( __CC_ARM )
  95:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #if defined __TARGET_FPU_VFP
  96:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
  97:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
  98:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
  99:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __ICCARM__ )
 100:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #if defined __ARMVFP__
 101:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 102:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 103:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 104:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __TMS470__ )
 105:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #if defined __TI__VFP_SUPPORT____
 106:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 107:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 108:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 109:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __GNUC__ )
 110:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #if defined (__VFP_FP__) && !defined(__SOFTFP__)
 111:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)
 112:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 113:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 114:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #elif defined ( __TASKING__ )
 115:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #if defined __FPU_VFP__
 116:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #error "Compiler generates FPU instructions for a device without an FPU (check __FPU_PRESENT)"
 117:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 118:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 119:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 120:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #include <stdint.h>                      /* standard types definitions                      */
 121:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #include <core_cmInstr.h>                /* Core Instruction Access                         */
 122:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #include <core_cmFunc.h>                 /* Core Function Access                            */
 123:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 124:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif /* __CORE_CM3_H_GENERIC */
 125:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 126:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #ifndef __CMSIS_GENERIC
 127:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 128:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #ifndef __CORE_CM3_H_DEPENDANT
 129:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define __CORE_CM3_H_DEPENDANT
 130:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 131:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* check device defines and use defaults */
 132:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if defined __CHECK_DEVICE_DEFINES
 133:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #ifndef __CM3_REV
 134:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #define __CM3_REV               0x0200
 135:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "__CM3_REV not defined in device header file; using default!"
 136:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 137:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 138:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #ifndef __MPU_PRESENT
 139:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #define __MPU_PRESENT             0
 140:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "__MPU_PRESENT not defined in device header file; using default!"
 141:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 142:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 143:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #ifndef __NVIC_PRIO_BITS
 144:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #define __NVIC_PRIO_BITS          4
 145:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "__NVIC_PRIO_BITS not defined in device header file; using default!"
 146:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 147:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 148:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #ifndef __Vendor_SysTickConfig
 149:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #define __Vendor_SysTickConfig    0
 150:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     #warning "__Vendor_SysTickConfig not defined in device header file; using default!"
 151:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #endif
 152:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 153:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 154:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* IO definitions (access restrictions to peripheral registers) */
 155:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /**
 156:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_glob_defs CMSIS Global Defines
 157:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 158:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     <strong>IO Type Qualifiers</strong> are used
 159:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \li to specify the access to peripheral variables.
 160:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \li for automatic generation of peripheral register debug information.
 161:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** */
 162:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #ifdef __cplusplus
 163:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define   __I     volatile             /*!< Defines 'read only' permissions                 */
 164:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #else
 165:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define   __I     volatile const       /*!< Defines 'read only' permissions                 */
 166:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 167:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define     __O     volatile             /*!< Defines 'write only' permissions                */
 168:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define     __IO    volatile             /*!< Defines 'read / write' permissions              */
 169:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 170:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group Cortex_M3 */
 171:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 172:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 173:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 174:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*******************************************************************************
 175:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *                 Register Abstraction
 176:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   Core Register contain:
 177:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core Register
 178:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core NVIC Register
 179:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core SCB Register
 180:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core SysTick Register
 181:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core Debug Register
 182:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core MPU Register
 183:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
 184:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_core_register Defines and Type Definitions
 185:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief Type definitions and defines for Cortex-M processor based devices.
 186:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** */
 187:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 188:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 189:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_CORE  Status and Control Registers
 190:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief  Core Register type definitions.
 191:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 192:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 193:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 194:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Application Program Status Register (APSR).
 195:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 196:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef union
 197:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 198:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   struct
 199:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   {
 200:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 201:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:27;              /*!< bit:  0..26  Reserved                           */
 202:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #else
 203:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:16;              /*!< bit:  0..15  Reserved                           */
 204:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 205:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:7;               /*!< bit: 20..26  Reserved                           */
 206:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 207:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 208:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 209:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 210:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 211:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 212:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 213:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 214:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } APSR_Type;
 215:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 216:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 217:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Interrupt Program Status Register (IPSR).
 218:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 219:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef union
 220:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 221:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   struct
 222:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   {
 223:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 224:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved                           */
 225:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 226:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 227:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } IPSR_Type;
 228:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 229:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 230:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
 231:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 232:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef union
 233:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 234:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   struct
 235:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   {
 236:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number                   */
 237:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if (__CORTEX_M != 0x04)
 238:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved                           */
 239:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #else
 240:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:7;               /*!< bit:  9..15  Reserved                           */
 241:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t GE:4;                       /*!< bit: 16..19  Greater than or Equal flags        */
 242:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved1:4;               /*!< bit: 20..23  Reserved                           */
 243:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 244:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0)          */
 245:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t IT:2;                       /*!< bit: 25..26  saved IT state   (read 0)          */
 246:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t Q:1;                        /*!< bit:     27  Saturation condition flag          */
 247:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag       */
 248:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t C:1;                        /*!< bit:     29  Carry condition code flag          */
 249:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag           */
 250:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t N:1;                        /*!< bit:     31  Negative condition code flag       */
 251:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 252:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 253:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } xPSR_Type;
 254:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 255:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 256:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Union type to access the Control Registers (CONTROL).
 257:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 258:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef union
 259:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 260:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   struct
 261:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   {
 262:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
 263:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used                   */
 264:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t FPCA:1;                     /*!< bit:      2  FP extension active flag           */
 265:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     uint32_t _reserved0:29;              /*!< bit:  3..31  Reserved                           */
 266:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   } b;                                   /*!< Structure used for bit  access                  */
 267:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t w;                            /*!< Type      used for word access                  */
 268:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } CONTROL_Type;
 269:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 270:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CORE */
 271:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 272:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 273:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
 274:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
 275:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the NVIC Registers
 276:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 277:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 278:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 279:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
 280:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 281:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 282:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 283:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ISER[8];                 /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register   
 284:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[24];
 285:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ICER[8];                 /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register 
 286:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RSERVED1[24];
 287:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ISPR[8];                 /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register  
 288:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[24];
 289:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ICPR[8];                 /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register
 290:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[24];
 291:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t IABR[8];                 /*!< Offset: 0x200 (R/W)  Interrupt Active bit Register   
 292:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[56];
 293:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint8_t  IP[240];                 /*!< Offset: 0x300 (R/W)  Interrupt Priority Register (8Bi
 294:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[644];
 295:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __O  uint32_t STIR;                    /*!< Offset: 0xE00 ( /W)  Software Trigger Interrupt Regis
 296:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }  NVIC_Type;
 297:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 298:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Software Triggered Interrupt Register Definitions */
 299:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Pos                 0                                          /*!< STIR: I
 300:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define NVIC_STIR_INTID_Msk                (0x1FFUL << NVIC_STIR_INTID_Pos)            /*!< STIR: I
 301:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 302:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_NVIC */
 303:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 304:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 305:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 306:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCB     System Control Block (SCB)
 307:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control Block Registers
 308:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 309:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 310:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 311:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control Block (SCB).
 312:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 313:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 314:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 315:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t CPUID;                   /*!< Offset: 0x000 (R/ )  CPUID Base Register             
 316:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ICSR;                    /*!< Offset: 0x004 (R/W)  Interrupt Control and State Regi
 317:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t VTOR;                    /*!< Offset: 0x008 (R/W)  Vector Table Offset Register    
 318:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t AIRCR;                   /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset 
 319:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t SCR;                     /*!< Offset: 0x010 (R/W)  System Control Register         
 320:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CCR;                     /*!< Offset: 0x014 (R/W)  Configuration Control Register  
 321:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint8_t  SHP[12];                 /*!< Offset: 0x018 (R/W)  System Handlers Priority Registe
 322:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t SHCSR;                   /*!< Offset: 0x024 (R/W)  System Handler Control and State
 323:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CFSR;                    /*!< Offset: 0x028 (R/W)  Configurable Fault Status Regist
 324:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t HFSR;                    /*!< Offset: 0x02C (R/W)  HardFault Status Register       
 325:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t DFSR;                    /*!< Offset: 0x030 (R/W)  Debug Fault Status Register     
 326:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t MMFAR;                   /*!< Offset: 0x034 (R/W)  MemManage Fault Address Register
 327:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t BFAR;                    /*!< Offset: 0x038 (R/W)  BusFault Address Register       
 328:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t AFSR;                    /*!< Offset: 0x03C (R/W)  Auxiliary Fault Status Register 
 329:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PFR[2];                  /*!< Offset: 0x040 (R/ )  Processor Feature Register      
 330:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t DFR;                     /*!< Offset: 0x048 (R/ )  Debug Feature Register          
 331:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t ADR;                     /*!< Offset: 0x04C (R/ )  Auxiliary Feature Register      
 332:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t MMFR[4];                 /*!< Offset: 0x050 (R/ )  Memory Model Feature Register   
 333:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t ISAR[5];                 /*!< Offset: 0x060 (R/ )  Instruction Set Attributes Regis
 334:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[5];
 335:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CPACR;                   /*!< Offset: 0x088 (R/W)  Coprocessor Access Control Regis
 336:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } SCB_Type;
 337:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 338:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB CPUID Register Definitions */
 339:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Pos          24                                             /*!< SCB 
 340:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB 
 341:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 342:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Pos              20                                             /*!< SCB 
 343:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB 
 344:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 345:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Pos         16                                             /*!< SCB 
 346:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB 
 347:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 348:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Pos                4                                             /*!< SCB 
 349:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB 
 350:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 351:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Pos              0                                             /*!< SCB 
 352:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CPUID_REVISION_Msk             (0xFUL << SCB_CPUID_REVISION_Pos)              /*!< SCB 
 353:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 354:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Interrupt Control State Register Definitions */
 355:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Pos            31                                             /*!< SCB 
 356:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB 
 357:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 358:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Pos             28                                             /*!< SCB 
 359:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB 
 360:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 361:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Pos             27                                             /*!< SCB 
 362:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB 
 363:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 364:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Pos             26                                             /*!< SCB 
 365:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB 
 366:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 367:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Pos             25                                             /*!< SCB 
 368:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB 
 369:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 370:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Pos            23                                             /*!< SCB 
 371:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB 
 372:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 373:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Pos            22                                             /*!< SCB 
 374:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB 
 375:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 376:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Pos           12                                             /*!< SCB 
 377:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB 
 378:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 379:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Pos             11                                             /*!< SCB 
 380:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_RETTOBASE_Msk             (1UL << SCB_ICSR_RETTOBASE_Pos)                /*!< SCB 
 381:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 382:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Pos             0                                             /*!< SCB 
 383:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL << SCB_ICSR_VECTACTIVE_Pos)           /*!< SCB 
 384:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 385:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Vector Table Offset Register Definitions */
 386:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if (__CM3_REV < 0x0201)                   /* core r2p1 */
 387:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Pos               29                                             /*!< SCB 
 388:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLBASE_Msk               (1UL << SCB_VTOR_TBLBASE_Pos)                  /*!< SCB 
 389:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 390:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 391:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x3FFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB 
 392:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #else
 393:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Pos                 7                                             /*!< SCB 
 394:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_VTOR_TBLOFF_Msk                (0x1FFFFFFUL << SCB_VTOR_TBLOFF_Pos)           /*!< SCB 
 395:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 396:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 397:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Application Interrupt and Reset Control Register Definitions */
 398:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Pos              16                                             /*!< SCB 
 399:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB 
 400:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 401:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Pos          16                                             /*!< SCB 
 402:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB 
 403:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 404:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Pos            15                                             /*!< SCB 
 405:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_ENDIANESS_Msk            (1UL << SCB_AIRCR_ENDIANESS_Pos)               /*!< SCB 
 406:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 407:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Pos              8                                             /*!< SCB 
 408:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_PRIGROUP_Msk             (7UL << SCB_AIRCR_PRIGROUP_Pos)                /*!< SCB 
 409:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 410:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Pos           2                                             /*!< SCB 
 411:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB 
 412:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 413:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Pos         1                                             /*!< SCB 
 414:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB 
 415:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 416:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Pos             0                                             /*!< SCB 
 417:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_AIRCR_VECTRESET_Msk            (1UL << SCB_AIRCR_VECTRESET_Pos)               /*!< SCB 
 418:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 419:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB System Control Register Definitions */
 420:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Pos               4                                             /*!< SCB 
 421:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB 
 422:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 423:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Pos               2                                             /*!< SCB 
 424:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB 
 425:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 426:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Pos             1                                             /*!< SCB 
 427:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB 
 428:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 429:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Configuration Control Register Definitions */
 430:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Pos                9                                             /*!< SCB 
 431:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB 
 432:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 433:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Pos               8                                             /*!< SCB 
 434:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_BFHFNMIGN_Msk              (1UL << SCB_CCR_BFHFNMIGN_Pos)                 /*!< SCB 
 435:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 436:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Pos               4                                             /*!< SCB 
 437:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_DIV_0_TRP_Msk              (1UL << SCB_CCR_DIV_0_TRP_Pos)                 /*!< SCB 
 438:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 439:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Pos             3                                             /*!< SCB 
 440:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB 
 441:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 442:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Pos            1                                             /*!< SCB 
 443:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_USERSETMPEND_Msk           (1UL << SCB_CCR_USERSETMPEND_Pos)              /*!< SCB 
 444:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 445:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Pos          0                                             /*!< SCB 
 446:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CCR_NONBASETHRDENA_Msk         (1UL << SCB_CCR_NONBASETHRDENA_Pos)            /*!< SCB 
 447:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 448:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB System Handler Control and State Register Definitions */
 449:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Pos          18                                             /*!< SCB 
 450:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTENA_Msk          (1UL << SCB_SHCSR_USGFAULTENA_Pos)             /*!< SCB 
 451:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 452:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Pos          17                                             /*!< SCB 
 453:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTENA_Msk          (1UL << SCB_SHCSR_BUSFAULTENA_Pos)             /*!< SCB 
 454:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 455:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Pos          16                                             /*!< SCB 
 456:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTENA_Msk          (1UL << SCB_SHCSR_MEMFAULTENA_Pos)             /*!< SCB 
 457:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 458:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Pos         15                                             /*!< SCB 
 459:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB 
 460:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 461:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Pos       14                                             /*!< SCB 
 462:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTPENDED_Msk       (1UL << SCB_SHCSR_BUSFAULTPENDED_Pos)          /*!< SCB 
 463:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 464:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Pos       13                                             /*!< SCB 
 465:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTPENDED_Msk       (1UL << SCB_SHCSR_MEMFAULTPENDED_Pos)          /*!< SCB 
 466:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 467:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Pos       12                                             /*!< SCB 
 468:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTPENDED_Msk       (1UL << SCB_SHCSR_USGFAULTPENDED_Pos)          /*!< SCB 
 469:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 470:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Pos           11                                             /*!< SCB 
 471:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SYSTICKACT_Msk           (1UL << SCB_SHCSR_SYSTICKACT_Pos)              /*!< SCB 
 472:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 473:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Pos            10                                             /*!< SCB 
 474:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_PENDSVACT_Msk            (1UL << SCB_SHCSR_PENDSVACT_Pos)               /*!< SCB 
 475:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 476:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Pos            8                                             /*!< SCB 
 477:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MONITORACT_Msk           (1UL << SCB_SHCSR_MONITORACT_Pos)              /*!< SCB 
 478:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 479:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Pos             7                                             /*!< SCB 
 480:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_SVCALLACT_Msk            (1UL << SCB_SHCSR_SVCALLACT_Pos)               /*!< SCB 
 481:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 482:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Pos           3                                             /*!< SCB 
 483:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_USGFAULTACT_Msk          (1UL << SCB_SHCSR_USGFAULTACT_Pos)             /*!< SCB 
 484:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 485:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Pos           1                                             /*!< SCB 
 486:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_BUSFAULTACT_Msk          (1UL << SCB_SHCSR_BUSFAULTACT_Pos)             /*!< SCB 
 487:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 488:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Pos           0                                             /*!< SCB 
 489:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_SHCSR_MEMFAULTACT_Msk          (1UL << SCB_SHCSR_MEMFAULTACT_Pos)             /*!< SCB 
 490:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 491:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Configurable Fault Status Registers Definitions */
 492:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Pos            16                                             /*!< SCB 
 493:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_USGFAULTSR_Msk            (0xFFFFUL << SCB_CFSR_USGFAULTSR_Pos)          /*!< SCB 
 494:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 495:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Pos             8                                             /*!< SCB 
 496:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_BUSFAULTSR_Msk            (0xFFUL << SCB_CFSR_BUSFAULTSR_Pos)            /*!< SCB 
 497:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 498:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Pos             0                                             /*!< SCB 
 499:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_CFSR_MEMFAULTSR_Msk            (0xFFUL << SCB_CFSR_MEMFAULTSR_Pos)            /*!< SCB 
 500:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 501:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Hard Fault Status Registers Definitions */
 502:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Pos              31                                             /*!< SCB 
 503:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_DEBUGEVT_Msk              (1UL << SCB_HFSR_DEBUGEVT_Pos)                 /*!< SCB 
 504:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 505:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Pos                30                                             /*!< SCB 
 506:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_FORCED_Msk                (1UL << SCB_HFSR_FORCED_Pos)                   /*!< SCB 
 507:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 508:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Pos                1                                             /*!< SCB 
 509:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_HFSR_VECTTBL_Msk               (1UL << SCB_HFSR_VECTTBL_Pos)                  /*!< SCB 
 510:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 511:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SCB Debug Fault Status Register Definitions */
 512:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Pos               4                                             /*!< SCB 
 513:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_EXTERNAL_Msk              (1UL << SCB_DFSR_EXTERNAL_Pos)                 /*!< SCB 
 514:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 515:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Pos                 3                                             /*!< SCB 
 516:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_VCATCH_Msk                (1UL << SCB_DFSR_VCATCH_Pos)                   /*!< SCB 
 517:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 518:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Pos                2                                             /*!< SCB 
 519:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_DWTTRAP_Msk               (1UL << SCB_DFSR_DWTTRAP_Pos)                  /*!< SCB 
 520:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 521:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Pos                   1                                             /*!< SCB 
 522:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_BKPT_Msk                  (1UL << SCB_DFSR_BKPT_Pos)                     /*!< SCB 
 523:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 524:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Pos                 0                                             /*!< SCB 
 525:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_DFSR_HALTED_Msk                (1UL << SCB_DFSR_HALTED_Pos)                   /*!< SCB 
 526:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 527:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCB */
 528:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 529:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 530:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 531:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SCnSCB System Controls not in SCB (SCnSCB)
 532:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Control and ID Register not in the SCB
 533:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 534:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 535:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 536:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Control and ID Register not in the SCB.
 537:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 538:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 539:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 540:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 541:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t ICTR;                    /*!< Offset: 0x004 (R/ )  Interrupt Controller Type Regist
 542:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if ((defined __CM3_REV) && (__CM3_REV >= 0x200))
 543:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ACTLR;                   /*!< Offset: 0x008 (R/W)  Auxiliary Control Register      
 544:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #else
 545:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 546:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
 547:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } SCnSCB_Type;
 548:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 549:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Interrupt Controller Type Register Definitions */
 550:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Pos         0                                          /*!< ICTR: I
 551:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ICTR_INTLINESNUM_Msk        (0xFUL << SCnSCB_ICTR_INTLINESNUM_Pos)      /*!< ICTR: I
 552:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 553:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Auxiliary Control Register Definitions */
 554:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 555:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Pos            2                                          /*!< ACTLR: 
 556:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISFOLD_Msk           (1UL << SCnSCB_ACTLR_DISFOLD_Pos)           /*!< ACTLR: 
 557:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 558:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Pos         1                                          /*!< ACTLR: 
 559:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISDEFWBUF_Msk        (1UL << SCnSCB_ACTLR_DISDEFWBUF_Pos)        /*!< ACTLR: 
 560:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 561:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Pos         0                                          /*!< ACTLR: 
 562:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB_ACTLR_DISMCYCINT_Msk        (1UL << SCnSCB_ACTLR_DISMCYCINT_Pos)        /*!< ACTLR: 
 563:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 564:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SCnotSCB */
 565:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 566:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 567:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 568:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
 569:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the System Timer Registers.
 570:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 571:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 572:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 573:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the System Timer (SysTick).
 574:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 575:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 576:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 577:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  SysTick Control and Status Regis
 578:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t LOAD;                    /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register   
 579:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t VAL;                     /*!< Offset: 0x008 (R/W)  SysTick Current Value Register  
 580:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t CALIB;                   /*!< Offset: 0x00C (R/ )  SysTick Calibration Register    
 581:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } SysTick_Type;
 582:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 583:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SysTick Control / Status Register Definitions */
 584:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Pos         16                                             /*!< SysT
 585:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysT
 586:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 587:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Pos          2                                             /*!< SysT
 588:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysT
 589:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 590:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Pos            1                                             /*!< SysT
 591:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysT
 592:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 593:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Pos             0                                             /*!< SysT
 594:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CTRL_ENABLE_Msk            (1UL << SysTick_CTRL_ENABLE_Pos)               /*!< SysT
 595:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 596:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SysTick Reload Register Definitions */
 597:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Pos             0                                             /*!< SysT
 598:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL << SysTick_LOAD_RELOAD_Pos)        /*!< SysT
 599:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 600:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SysTick Current Register Definitions */
 601:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Pos             0                                             /*!< SysT
 602:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 603:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 604:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* SysTick Calibration Register Definitions */
 605:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Pos            31                                             /*!< SysT
 606:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysT
 607:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 608:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Pos             30                                             /*!< SysT
 609:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysT
 610:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 611:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Pos             0                                             /*!< SysT
 612:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL << SysTick_VAL_CURRENT_Pos)        /*!< SysT
 613:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 614:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_SysTick */
 615:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 616:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 617:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 618:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_ITM     Instrumentation Trace Macrocell (ITM)
 619:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Instrumentation Trace Macrocell (ITM)
 620:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 621:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 622:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 623:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Instrumentation Trace Macrocell Register (ITM).
 624:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 625:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 626:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 627:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __O  union
 628:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   {
 629:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     __O  uint8_t    u8;                  /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 8-bit         
 630:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     __O  uint16_t   u16;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 16-bit        
 631:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     __O  uint32_t   u32;                 /*!< Offset: 0x000 ( /W)  ITM Stimulus Port 32-bit        
 632:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   }  PORT [32];                          /*!< Offset: 0x000 ( /W)  ITM Stimulus Port Registers     
 633:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[864];
 634:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t TER;                     /*!< Offset: 0xE00 (R/W)  ITM Trace Enable Register       
 635:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[15];
 636:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t TPR;                     /*!< Offset: 0xE40 (R/W)  ITM Trace Privilege Register    
 637:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[15];
 638:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t TCR;                     /*!< Offset: 0xE80 (R/W)  ITM Trace Control Register      
 639:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[29];                                  
 640:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __O  uint32_t IWR;                     /*!< Offset: 0xEF8 ( /W)  ITM Integration Write Register  
 641:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t IRR;                     /*!< Offset: 0xEFC (R/ )  ITM Integration Read Register   
 642:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t IMCR;                    /*!< Offset: 0xF00 (R/W)  ITM Integration Mode Control Reg
 643:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[43];                                  
 644:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __O  uint32_t LAR;                     /*!< Offset: 0xFB0 ( /W)  ITM Lock Access Register        
 645:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t LSR;                     /*!< Offset: 0xFB4 (R/ )  ITM Lock Status Register        
 646:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[6];                                   
 647:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID4;                    /*!< Offset: 0xFD0 (R/ )  ITM Peripheral Identification Re
 648:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID5;                    /*!< Offset: 0xFD4 (R/ )  ITM Peripheral Identification Re
 649:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID6;                    /*!< Offset: 0xFD8 (R/ )  ITM Peripheral Identification Re
 650:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID7;                    /*!< Offset: 0xFDC (R/ )  ITM Peripheral Identification Re
 651:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID0;                    /*!< Offset: 0xFE0 (R/ )  ITM Peripheral Identification Re
 652:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID1;                    /*!< Offset: 0xFE4 (R/ )  ITM Peripheral Identification Re
 653:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID2;                    /*!< Offset: 0xFE8 (R/ )  ITM Peripheral Identification Re
 654:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PID3;                    /*!< Offset: 0xFEC (R/ )  ITM Peripheral Identification Re
 655:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t CID0;                    /*!< Offset: 0xFF0 (R/ )  ITM Component  Identification Re
 656:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t CID1;                    /*!< Offset: 0xFF4 (R/ )  ITM Component  Identification Re
 657:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t CID2;                    /*!< Offset: 0xFF8 (R/ )  ITM Component  Identification Re
 658:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t CID3;                    /*!< Offset: 0xFFC (R/ )  ITM Component  Identification Re
 659:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } ITM_Type;
 660:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 661:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ITM Trace Privilege Register Definitions */
 662:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Pos                0                                             /*!< ITM 
 663:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TPR_PRIVMASK_Msk               (0xFUL << ITM_TPR_PRIVMASK_Pos)                /*!< ITM 
 664:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 665:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ITM Trace Control Register Definitions */
 666:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Pos                   23                                             /*!< ITM 
 667:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_BUSY_Msk                   (1UL << ITM_TCR_BUSY_Pos)                      /*!< ITM 
 668:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 669:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Pos             16                                             /*!< ITM 
 670:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TraceBusID_Msk             (0x7FUL << ITM_TCR_TraceBusID_Pos)             /*!< ITM 
 671:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 672:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Pos                10                                             /*!< ITM 
 673:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_GTSFREQ_Msk                (3UL << ITM_TCR_GTSFREQ_Pos)                   /*!< ITM 
 674:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 675:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Pos              8                                             /*!< ITM 
 676:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSPrescale_Msk             (3UL << ITM_TCR_TSPrescale_Pos)                /*!< ITM 
 677:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 678:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Pos                  4                                             /*!< ITM 
 679:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SWOENA_Msk                 (1UL << ITM_TCR_SWOENA_Pos)                    /*!< ITM 
 680:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 681:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Pos                  3                                             /*!< ITM 
 682:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_DWTENA_Msk                 (1UL << ITM_TCR_DWTENA_Pos)                    /*!< ITM 
 683:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 684:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Pos                 2                                             /*!< ITM 
 685:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_SYNCENA_Msk                (1UL << ITM_TCR_SYNCENA_Pos)                   /*!< ITM 
 686:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 687:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Pos                   1                                             /*!< ITM 
 688:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_TSENA_Msk                  (1UL << ITM_TCR_TSENA_Pos)                     /*!< ITM 
 689:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 690:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Pos                  0                                             /*!< ITM 
 691:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_TCR_ITMENA_Msk                 (1UL << ITM_TCR_ITMENA_Pos)                    /*!< ITM 
 692:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 693:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ITM Integration Write Register Definitions */
 694:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Pos                0                                             /*!< ITM 
 695:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_IWR_ATVALIDM_Msk               (1UL << ITM_IWR_ATVALIDM_Pos)                  /*!< ITM 
 696:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 697:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ITM Integration Read Register Definitions */
 698:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Pos                0                                             /*!< ITM 
 699:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_IRR_ATREADYM_Msk               (1UL << ITM_IRR_ATREADYM_Pos)                  /*!< ITM 
 700:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 701:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ITM Integration Mode Control Register Definitions */
 702:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Pos            0                                             /*!< ITM 
 703:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_IMCR_INTEGRATION_Msk           (1UL << ITM_IMCR_INTEGRATION_Pos)              /*!< ITM 
 704:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 705:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ITM Lock Status Register Definitions */
 706:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Pos                 2                                             /*!< ITM 
 707:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_LSR_ByteAcc_Msk                (1UL << ITM_LSR_ByteAcc_Pos)                   /*!< ITM 
 708:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 709:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Pos                  1                                             /*!< ITM 
 710:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Access_Msk                 (1UL << ITM_LSR_Access_Pos)                    /*!< ITM 
 711:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 712:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Pos                 0                                             /*!< ITM 
 713:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_LSR_Present_Msk                (1UL << ITM_LSR_Present_Pos)                   /*!< ITM 
 714:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 715:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_ITM */
 716:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 717:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 718:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 719:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_DWT     Data Watchpoint and Trace (DWT)
 720:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Data Watchpoint and Trace (DWT)
 721:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 722:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 723:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 724:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Data Watchpoint and Trace Register (DWT).
 725:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 726:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 727:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 728:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x000 (R/W)  Control Register                
 729:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CYCCNT;                  /*!< Offset: 0x004 (R/W)  Cycle Count Register            
 730:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CPICNT;                  /*!< Offset: 0x008 (R/W)  CPI Count Register              
 731:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t EXCCNT;                  /*!< Offset: 0x00C (R/W)  Exception Overhead Count Registe
 732:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t SLEEPCNT;                /*!< Offset: 0x010 (R/W)  Sleep Count Register            
 733:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t LSUCNT;                  /*!< Offset: 0x014 (R/W)  LSU Count Register              
 734:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t FOLDCNT;                 /*!< Offset: 0x018 (R/W)  Folded-instruction Count Registe
 735:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t PCSR;                    /*!< Offset: 0x01C (R/ )  Program Counter Sample Register 
 736:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP0;                   /*!< Offset: 0x020 (R/W)  Comparator Register 0           
 737:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK0;                   /*!< Offset: 0x024 (R/W)  Mask Register 0                 
 738:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION0;               /*!< Offset: 0x028 (R/W)  Function Register 0             
 739:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[1];
 740:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP1;                   /*!< Offset: 0x030 (R/W)  Comparator Register 1           
 741:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK1;                   /*!< Offset: 0x034 (R/W)  Mask Register 1                 
 742:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION1;               /*!< Offset: 0x038 (R/W)  Function Register 1             
 743:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[1];
 744:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP2;                   /*!< Offset: 0x040 (R/W)  Comparator Register 2           
 745:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK2;                   /*!< Offset: 0x044 (R/W)  Mask Register 2                 
 746:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION2;               /*!< Offset: 0x048 (R/W)  Function Register 2             
 747:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[1];
 748:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t COMP3;                   /*!< Offset: 0x050 (R/W)  Comparator Register 3           
 749:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t MASK3;                   /*!< Offset: 0x054 (R/W)  Mask Register 3                 
 750:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t FUNCTION3;               /*!< Offset: 0x058 (R/W)  Function Register 3             
 751:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } DWT_Type;
 752:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 753:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT Control Register Definitions */
 754:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Pos               28                                          /*!< DWT CTR
 755:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NUMCOMP_Msk               (0xFUL << DWT_CTRL_NUMCOMP_Pos)             /*!< DWT CTR
 756:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 757:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Pos              27                                          /*!< DWT CTR
 758:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOTRCPKT_Msk              (0x1UL << DWT_CTRL_NOTRCPKT_Pos)            /*!< DWT CTR
 759:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 760:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Pos             26                                          /*!< DWT CTR
 761:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOEXTTRIG_Msk             (0x1UL << DWT_CTRL_NOEXTTRIG_Pos)           /*!< DWT CTR
 762:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 763:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Pos              25                                          /*!< DWT CTR
 764:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOCYCCNT_Msk              (0x1UL << DWT_CTRL_NOCYCCNT_Pos)            /*!< DWT CTR
 765:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 766:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Pos              24                                          /*!< DWT CTR
 767:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_NOPRFCNT_Msk              (0x1UL << DWT_CTRL_NOPRFCNT_Pos)            /*!< DWT CTR
 768:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 769:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Pos             22                                          /*!< DWT CTR
 770:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCEVTENA_Msk             (0x1UL << DWT_CTRL_CYCEVTENA_Pos)           /*!< DWT CTR
 771:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 772:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Pos            21                                          /*!< DWT CTR
 773:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_FOLDEVTENA_Msk            (0x1UL << DWT_CTRL_FOLDEVTENA_Pos)          /*!< DWT CTR
 774:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 775:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Pos             20                                          /*!< DWT CTR
 776:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_LSUEVTENA_Msk             (0x1UL << DWT_CTRL_LSUEVTENA_Pos)           /*!< DWT CTR
 777:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 778:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Pos           19                                          /*!< DWT CTR
 779:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SLEEPEVTENA_Msk           (0x1UL << DWT_CTRL_SLEEPEVTENA_Pos)         /*!< DWT CTR
 780:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 781:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Pos             18                                          /*!< DWT CTR
 782:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCEVTENA_Msk             (0x1UL << DWT_CTRL_EXCEVTENA_Pos)           /*!< DWT CTR
 783:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 784:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Pos             17                                          /*!< DWT CTR
 785:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CPIEVTENA_Msk             (0x1UL << DWT_CTRL_CPIEVTENA_Pos)           /*!< DWT CTR
 786:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 787:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Pos             16                                          /*!< DWT CTR
 788:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_EXCTRCENA_Msk             (0x1UL << DWT_CTRL_EXCTRCENA_Pos)           /*!< DWT CTR
 789:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 790:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Pos            12                                          /*!< DWT CTR
 791:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_PCSAMPLENA_Msk            (0x1UL << DWT_CTRL_PCSAMPLENA_Pos)          /*!< DWT CTR
 792:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 793:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Pos               10                                          /*!< DWT CTR
 794:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_SYNCTAP_Msk               (0x3UL << DWT_CTRL_SYNCTAP_Pos)             /*!< DWT CTR
 795:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 796:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Pos                 9                                          /*!< DWT CTR
 797:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCTAP_Msk                (0x1UL << DWT_CTRL_CYCTAP_Pos)              /*!< DWT CTR
 798:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 799:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Pos               5                                          /*!< DWT CTR
 800:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTINIT_Msk              (0xFUL << DWT_CTRL_POSTINIT_Pos)            /*!< DWT CTR
 801:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 802:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Pos             1                                          /*!< DWT CTR
 803:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_POSTPRESET_Msk            (0xFUL << DWT_CTRL_POSTPRESET_Pos)          /*!< DWT CTR
 804:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 805:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Pos              0                                          /*!< DWT CTR
 806:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CTRL_CYCCNTENA_Msk             (0x1UL << DWT_CTRL_CYCCNTENA_Pos)           /*!< DWT CTR
 807:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 808:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT CPI Count Register Definitions */
 809:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Pos               0                                          /*!< DWT CPI
 810:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_CPICNT_CPICNT_Msk              (0xFFUL << DWT_CPICNT_CPICNT_Pos)           /*!< DWT CPI
 811:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 812:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT Exception Overhead Count Register Definitions */
 813:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Pos               0                                          /*!< DWT EXC
 814:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_EXCCNT_EXCCNT_Msk              (0xFFUL << DWT_EXCCNT_EXCCNT_Pos)           /*!< DWT EXC
 815:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 816:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT Sleep Count Register Definitions */
 817:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Pos           0                                          /*!< DWT SLE
 818:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_SLEEPCNT_SLEEPCNT_Msk          (0xFFUL << DWT_SLEEPCNT_SLEEPCNT_Pos)       /*!< DWT SLE
 819:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 820:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT LSU Count Register Definitions */
 821:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Pos               0                                          /*!< DWT LSU
 822:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_LSUCNT_LSUCNT_Msk              (0xFFUL << DWT_LSUCNT_LSUCNT_Pos)           /*!< DWT LSU
 823:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 824:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT Folded-instruction Count Register Definitions */
 825:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Pos             0                                          /*!< DWT FOL
 826:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FOLDCNT_FOLDCNT_Msk            (0xFFUL << DWT_FOLDCNT_FOLDCNT_Pos)         /*!< DWT FOL
 827:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 828:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT Comparator Mask Register Definitions */
 829:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Pos                   0                                          /*!< DWT MAS
 830:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_MASK_MASK_Msk                  (0x1FUL << DWT_MASK_MASK_Pos)               /*!< DWT MAS
 831:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 832:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* DWT Comparator Function Register Definitions */
 833:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Pos           24                                          /*!< DWT FUN
 834:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_MATCHED_Msk           (0x1UL << DWT_FUNCTION_MATCHED_Pos)         /*!< DWT FUN
 835:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 836:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Pos        16                                          /*!< DWT FUN
 837:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR1_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR1_Pos)      /*!< DWT FUN
 838:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 839:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Pos        12                                          /*!< DWT FUN
 840:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVADDR0_Msk        (0xFUL << DWT_FUNCTION_DATAVADDR0_Pos)      /*!< DWT FUN
 841:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 842:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Pos         10                                          /*!< DWT FUN
 843:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVSIZE_Msk         (0x3UL << DWT_FUNCTION_DATAVSIZE_Pos)       /*!< DWT FUN
 844:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 845:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Pos            9                                          /*!< DWT FUN
 846:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_LNK1ENA_Msk           (0x1UL << DWT_FUNCTION_LNK1ENA_Pos)         /*!< DWT FUN
 847:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 848:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Pos         8                                          /*!< DWT FUN
 849:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_DATAVMATCH_Msk        (0x1UL << DWT_FUNCTION_DATAVMATCH_Pos)      /*!< DWT FUN
 850:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 851:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Pos           7                                          /*!< DWT FUN
 852:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_CYCMATCH_Msk          (0x1UL << DWT_FUNCTION_CYCMATCH_Pos)        /*!< DWT FUN
 853:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 854:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Pos          5                                          /*!< DWT FUN
 855:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_EMITRANGE_Msk         (0x1UL << DWT_FUNCTION_EMITRANGE_Pos)       /*!< DWT FUN
 856:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 857:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Pos           0                                          /*!< DWT FUN
 858:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_FUNCTION_FUNCTION_Msk          (0xFUL << DWT_FUNCTION_FUNCTION_Pos)        /*!< DWT FUN
 859:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 860:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_DWT */
 861:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 862:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 863:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
 864:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_TPI     Trace Port Interface (TPI)
 865:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Trace Port Interface (TPI)
 866:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
 867:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 868:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 869:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Trace Port Interface Register (TPI).
 870:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
 871:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
 872:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
 873:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t SSPSR;                   /*!< Offset: 0x000 (R/ )  Supported Parallel Port Size Reg
 874:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CSPSR;                   /*!< Offset: 0x004 (R/W)  Current Parallel Port Size Regis
 875:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED0[2];
 876:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ACPR;                    /*!< Offset: 0x010 (R/W)  Asynchronous Clock Prescaler Reg
 877:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED1[55];
 878:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t SPPR;                    /*!< Offset: 0x0F0 (R/W)  Selected Pin Protocol Register *
 879:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED2[131];
 880:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t FFSR;                    /*!< Offset: 0x300 (R/ )  Formatter and Flush Status Regis
 881:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t FFCR;                    /*!< Offset: 0x304 (R/W)  Formatter and Flush Control Regi
 882:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t FSCR;                    /*!< Offset: 0x308 (R/ )  Formatter Synchronization Counte
 883:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED3[759];
 884:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t TRIGGER;                 /*!< Offset: 0xEE8 (R/ )  TRIGGER */
 885:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO0;                   /*!< Offset: 0xEEC (R/ )  Integration ETM Data */
 886:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR2;               /*!< Offset: 0xEF0 (R/ )  ITATBCTR2 */
 887:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED4[1];
 888:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t ITATBCTR0;               /*!< Offset: 0xEF8 (R/ )  ITATBCTR0 */
 889:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t FIFO1;                   /*!< Offset: 0xEFC (R/ )  Integration ITM Data */
 890:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t ITCTRL;                  /*!< Offset: 0xF00 (R/W)  Integration Mode Control */
 891:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED5[39];
 892:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMSET;                /*!< Offset: 0xFA0 (R/W)  Claim tag set */
 893:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CLAIMCLR;                /*!< Offset: 0xFA4 (R/W)  Claim tag clear */
 894:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****        uint32_t RESERVED7[8];
 895:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVID;                   /*!< Offset: 0xFC8 (R/ )  TPIU_DEVID */
 896:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t DEVTYPE;                 /*!< Offset: 0xFCC (R/ )  TPIU_DEVTYPE */
 897:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } TPI_Type;
 898:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 899:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Asynchronous Clock Prescaler Register Definitions */
 900:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Pos              0                                          /*!< TPI ACP
 901:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ACPR_PRESCALER_Msk             (0x1FFFUL << TPI_ACPR_PRESCALER_Pos)        /*!< TPI ACP
 902:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 903:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Selected Pin Protocol Register Definitions */
 904:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Pos                 0                                          /*!< TPI SPP
 905:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_SPPR_TXMODE_Msk                (0x3UL << TPI_SPPR_TXMODE_Pos)              /*!< TPI SPP
 906:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 907:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Status Register Definitions */
 908:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Pos              3                                          /*!< TPI FFS
 909:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtNonStop_Msk             (0x1UL << TPI_FFSR_FtNonStop_Pos)           /*!< TPI FFS
 910:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 911:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Pos              2                                          /*!< TPI FFS
 912:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_TCPresent_Msk             (0x1UL << TPI_FFSR_TCPresent_Pos)           /*!< TPI FFS
 913:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 914:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Pos              1                                          /*!< TPI FFS
 915:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FtStopped_Msk             (0x1UL << TPI_FFSR_FtStopped_Pos)           /*!< TPI FFS
 916:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 917:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Pos               0                                          /*!< TPI FFS
 918:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFSR_FlInProg_Msk              (0x1UL << TPI_FFSR_FlInProg_Pos)            /*!< TPI FFS
 919:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 920:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Formatter and Flush Control Register Definitions */
 921:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Pos                 8                                          /*!< TPI FFC
 922:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_TrigIn_Msk                (0x1UL << TPI_FFCR_TrigIn_Pos)              /*!< TPI FFC
 923:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 924:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Pos                1                                          /*!< TPI FFC
 925:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FFCR_EnFCont_Msk               (0x1UL << TPI_FFCR_EnFCont_Pos)             /*!< TPI FFC
 926:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 927:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI TRIGGER Register Definitions */
 928:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Pos             0                                          /*!< TPI TRI
 929:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_TRIGGER_TRIGGER_Msk            (0x1UL << TPI_TRIGGER_TRIGGER_Pos)          /*!< TPI TRI
 930:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 931:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Integration ETM Data Register Definitions (FIFO0) */
 932:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 933:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ITM_ATVALID_Pos)        /*!< TPI FIF
 934:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 935:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 936:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ITM_bytecount_Msk        (0x3UL << TPI_FIFO0_ITM_bytecount_Pos)      /*!< TPI FIF
 937:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 938:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 939:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO0_ETM_ATVALID_Pos)        /*!< TPI FIF
 940:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 941:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 942:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM_bytecount_Msk        (0x3UL << TPI_FIFO0_ETM_bytecount_Pos)      /*!< TPI FIF
 943:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 944:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Pos                 16                                          /*!< TPI FIF
 945:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM2_Msk                 (0xFFUL << TPI_FIFO0_ETM2_Pos)              /*!< TPI FIF
 946:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 947:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Pos                  8                                          /*!< TPI FIF
 948:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM1_Msk                 (0xFFUL << TPI_FIFO0_ETM1_Pos)              /*!< TPI FIF
 949:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 950:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Pos                  0                                          /*!< TPI FIF
 951:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO0_ETM0_Msk                 (0xFFUL << TPI_FIFO0_ETM0_Pos)              /*!< TPI FIF
 952:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 953:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR2 Register Definitions */
 954:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Pos           0                                          /*!< TPI ITA
 955:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR2_ATREADY_Msk          (0x1UL << TPI_ITATBCTR2_ATREADY_Pos)        /*!< TPI ITA
 956:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 957:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Integration ITM Data Register Definitions (FIFO1) */
 958:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Pos          29                                          /*!< TPI FIF
 959:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ITM_ATVALID_Pos)        /*!< TPI FIF
 960:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 961:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Pos        27                                          /*!< TPI FIF
 962:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM_bytecount_Msk        (0x3UL << TPI_FIFO1_ITM_bytecount_Pos)      /*!< TPI FIF
 963:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 964:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Pos          26                                          /*!< TPI FIF
 965:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_ATVALID_Msk          (0x3UL << TPI_FIFO1_ETM_ATVALID_Pos)        /*!< TPI FIF
 966:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 967:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Pos        24                                          /*!< TPI FIF
 968:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ETM_bytecount_Msk        (0x3UL << TPI_FIFO1_ETM_bytecount_Pos)      /*!< TPI FIF
 969:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 970:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Pos                 16                                          /*!< TPI FIF
 971:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM2_Msk                 (0xFFUL << TPI_FIFO1_ITM2_Pos)              /*!< TPI FIF
 972:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 973:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Pos                  8                                          /*!< TPI FIF
 974:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM1_Msk                 (0xFFUL << TPI_FIFO1_ITM1_Pos)              /*!< TPI FIF
 975:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 976:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Pos                  0                                          /*!< TPI FIF
 977:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_FIFO1_ITM0_Msk                 (0xFFUL << TPI_FIFO1_ITM0_Pos)              /*!< TPI FIF
 978:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 979:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI ITATBCTR0 Register Definitions */
 980:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Pos           0                                          /*!< TPI ITA
 981:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ITATBCTR0_ATREADY_Msk          (0x1UL << TPI_ITATBCTR0_ATREADY_Pos)        /*!< TPI ITA
 982:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 983:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI Integration Mode Control Register Definitions */
 984:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Pos                 0                                          /*!< TPI ITC
 985:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_ITCTRL_Mode_Msk                (0x1UL << TPI_ITCTRL_Mode_Pos)              /*!< TPI ITC
 986:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 987:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI DEVID Register Definitions */
 988:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Pos             11                                          /*!< TPI DEV
 989:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NRZVALID_Msk             (0x1UL << TPI_DEVID_NRZVALID_Pos)           /*!< TPI DEV
 990:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 991:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Pos            10                                          /*!< TPI DEV
 992:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MANCVALID_Msk            (0x1UL << TPI_DEVID_MANCVALID_Pos)          /*!< TPI DEV
 993:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 994:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Pos             9                                          /*!< TPI DEV
 995:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_PTINVALID_Msk            (0x1UL << TPI_DEVID_PTINVALID_Pos)          /*!< TPI DEV
 996:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
 997:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Pos              6                                          /*!< TPI DEV
 998:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_MinBufSz_Msk             (0x7UL << TPI_DEVID_MinBufSz_Pos)           /*!< TPI DEV
 999:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1000:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Pos             5                                          /*!< TPI DEV
1001:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_AsynClkIn_Msk            (0x1UL << TPI_DEVID_AsynClkIn_Pos)          /*!< TPI DEV
1002:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1003:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Pos          0                                          /*!< TPI DEV
1004:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVID_NrTraceInput_Msk         (0x1FUL << TPI_DEVID_NrTraceInput_Pos)      /*!< TPI DEV
1005:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1006:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* TPI DEVTYPE Register Definitions */
1007:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Pos             0                                          /*!< TPI DEV
1008:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_SubType_Msk            (0xFUL << TPI_DEVTYPE_SubType_Pos)          /*!< TPI DEV
1009:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1010:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Pos           4                                          /*!< TPI DEV
1011:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_DEVTYPE_MajorType_Msk          (0xFUL << TPI_DEVTYPE_MajorType_Pos)        /*!< TPI DEV
1012:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1013:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@}*/ /* end of group CMSIS_TPI */
1014:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1015:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1016:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1017:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1018:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
1019:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Memory Protection Unit (MPU)
1020:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
1021:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1022:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1023:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Memory Protection Unit (MPU).
1024:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1025:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
1026:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1027:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __I  uint32_t TYPE;                    /*!< Offset: 0x000 (R/ )  MPU Type Register               
1028:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t CTRL;                    /*!< Offset: 0x004 (R/W)  MPU Control Register            
1029:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RNR;                     /*!< Offset: 0x008 (R/W)  MPU Region RNRber Register      
1030:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR;                    /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register
1031:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR;                    /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Re
1032:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A1;                 /*!< Offset: 0x014 (R/W)  MPU Alias 1 Region Base Address 
1033:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A1;                 /*!< Offset: 0x018 (R/W)  MPU Alias 1 Region Attribute and
1034:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A2;                 /*!< Offset: 0x01C (R/W)  MPU Alias 2 Region Base Address 
1035:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A2;                 /*!< Offset: 0x020 (R/W)  MPU Alias 2 Region Attribute and
1036:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RBAR_A3;                 /*!< Offset: 0x024 (R/W)  MPU Alias 3 Region Base Address 
1037:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t RASR_A3;                 /*!< Offset: 0x028 (R/W)  MPU Alias 3 Region Attribute and
1038:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } MPU_Type;
1039:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1040:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* MPU Type Register */
1041:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Pos               16                                             /*!< MPU 
1042:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU 
1043:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1044:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Pos                8                                             /*!< MPU 
1045:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU 
1046:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1047:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Pos               0                                             /*!< MPU 
1048:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_TYPE_SEPARATE_Msk              (1UL << MPU_TYPE_SEPARATE_Pos)                 /*!< MPU 
1049:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1050:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* MPU Control Register */
1051:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Pos             2                                             /*!< MPU 
1052:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU 
1053:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1054:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Pos               1                                             /*!< MPU 
1055:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU 
1056:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1057:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Pos                 0                                             /*!< MPU 
1058:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_CTRL_ENABLE_Msk                (1UL << MPU_CTRL_ENABLE_Pos)                   /*!< MPU 
1059:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1060:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* MPU Region Number Register */
1061:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Pos                  0                                             /*!< MPU 
1062:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RNR_REGION_Msk                 (0xFFUL << MPU_RNR_REGION_Pos)                 /*!< MPU 
1063:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1064:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* MPU Region Base Address Register */
1065:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Pos                   5                                             /*!< MPU 
1066:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_ADDR_Msk                  (0x7FFFFFFUL << MPU_RBAR_ADDR_Pos)             /*!< MPU 
1067:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1068:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Pos                  4                                             /*!< MPU 
1069:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU 
1070:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1071:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Pos                 0                                             /*!< MPU 
1072:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RBAR_REGION_Msk                (0xFUL << MPU_RBAR_REGION_Pos)                 /*!< MPU 
1073:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1074:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* MPU Region Attribute and Size Register */
1075:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Pos                 16                                             /*!< MPU 
1076:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU 
1077:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1078:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Pos                    28                                             /*!< MPU 
1079:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU 
1080:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1081:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Pos                    24                                             /*!< MPU 
1082:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU 
1083:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1084:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Pos                   19                                             /*!< MPU 
1085:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU 
1086:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1087:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Pos                     18                                             /*!< MPU 
1088:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU 
1089:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1090:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Pos                     17                                             /*!< MPU 
1091:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU 
1092:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1093:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Pos                     16                                             /*!< MPU 
1094:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU 
1095:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1096:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Pos                    8                                             /*!< MPU 
1097:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU 
1098:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1099:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Pos                   1                                             /*!< MPU 
1100:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU 
1101:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1102:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Pos                 0                                             /*!< MPU 
1103:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define MPU_RASR_ENABLE_Msk                (1UL << MPU_RASR_ENABLE_Pos)                   /*!< MPU 
1104:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1105:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_MPU */
1106:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
1107:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1108:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1109:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_core_register
1110:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_CoreDebug       Core Debug Registers (CoreDebug)
1111:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Type definitions for the Core Debug Registers
1112:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
1113:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1114:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1115:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Structure type to access the Core Debug Register (CoreDebug).
1116:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1117:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** typedef struct
1118:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1119:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t DHCSR;                   /*!< Offset: 0x000 (R/W)  Debug Halting Control and Status
1120:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __O  uint32_t DCRSR;                   /*!< Offset: 0x004 ( /W)  Debug Core Register Selector Reg
1121:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t DCRDR;                   /*!< Offset: 0x008 (R/W)  Debug Core Register Data Registe
1122:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __IO uint32_t DEMCR;                   /*!< Offset: 0x00C (R/W)  Debug Exception and Monitor Cont
1123:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** } CoreDebug_Type;
1124:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1125:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Debug Halting Control and Status Register */
1126:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Pos         16                                             /*!< Core
1127:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_DBGKEY_Msk         (0xFFFFUL << CoreDebug_DHCSR_DBGKEY_Pos)       /*!< Core
1128:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1129:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Pos     25                                             /*!< Core
1130:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RESET_ST_Msk     (1UL << CoreDebug_DHCSR_S_RESET_ST_Pos)        /*!< Core
1131:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1132:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Pos    24                                             /*!< Core
1133:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_RETIRE_ST_Msk    (1UL << CoreDebug_DHCSR_S_RETIRE_ST_Pos)       /*!< Core
1134:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1135:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Pos       19                                             /*!< Core
1136:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_LOCKUP_Msk       (1UL << CoreDebug_DHCSR_S_LOCKUP_Pos)          /*!< Core
1137:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1138:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Pos        18                                             /*!< Core
1139:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_SLEEP_Msk        (1UL << CoreDebug_DHCSR_S_SLEEP_Pos)           /*!< Core
1140:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1141:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Pos         17                                             /*!< Core
1142:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_HALT_Msk         (1UL << CoreDebug_DHCSR_S_HALT_Pos)            /*!< Core
1143:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1144:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Pos       16                                             /*!< Core
1145:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_S_REGRDY_Msk       (1UL << CoreDebug_DHCSR_S_REGRDY_Pos)          /*!< Core
1146:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1147:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Pos     5                                             /*!< Core
1148:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_SNAPSTALL_Msk    (1UL << CoreDebug_DHCSR_C_SNAPSTALL_Pos)       /*!< Core
1149:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1150:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Pos      3                                             /*!< Core
1151:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_MASKINTS_Msk     (1UL << CoreDebug_DHCSR_C_MASKINTS_Pos)        /*!< Core
1152:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1153:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Pos          2                                             /*!< Core
1154:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_STEP_Msk         (1UL << CoreDebug_DHCSR_C_STEP_Pos)            /*!< Core
1155:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1156:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Pos          1                                             /*!< Core
1157:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_HALT_Msk         (1UL << CoreDebug_DHCSR_C_HALT_Pos)            /*!< Core
1158:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1159:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Pos       0                                             /*!< Core
1160:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DHCSR_C_DEBUGEN_Msk      (1UL << CoreDebug_DHCSR_C_DEBUGEN_Pos)         /*!< Core
1161:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1162:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Debug Core Register Selector Register */
1163:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Pos         16                                             /*!< Core
1164:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGWnR_Msk         (1UL << CoreDebug_DCRSR_REGWnR_Pos)            /*!< Core
1165:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1166:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Pos          0                                             /*!< Core
1167:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DCRSR_REGSEL_Msk         (0x1FUL << CoreDebug_DCRSR_REGSEL_Pos)         /*!< Core
1168:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1169:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Debug Exception and Monitor Control Register */
1170:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Pos         24                                             /*!< Core
1171:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_TRCENA_Msk         (1UL << CoreDebug_DEMCR_TRCENA_Pos)            /*!< Core
1172:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1173:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Pos        19                                             /*!< Core
1174:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_REQ_Msk        (1UL << CoreDebug_DEMCR_MON_REQ_Pos)           /*!< Core
1175:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1176:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Pos       18                                             /*!< Core
1177:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_STEP_Msk       (1UL << CoreDebug_DEMCR_MON_STEP_Pos)          /*!< Core
1178:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1179:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Pos       17                                             /*!< Core
1180:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_PEND_Msk       (1UL << CoreDebug_DEMCR_MON_PEND_Pos)          /*!< Core
1181:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1182:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Pos         16                                             /*!< Core
1183:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_MON_EN_Msk         (1UL << CoreDebug_DEMCR_MON_EN_Pos)            /*!< Core
1184:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1185:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Pos     10                                             /*!< Core
1186:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_HARDERR_Msk     (1UL << CoreDebug_DEMCR_VC_HARDERR_Pos)        /*!< Core
1187:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1188:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Pos       9                                             /*!< Core
1189:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_INTERR_Msk      (1UL << CoreDebug_DEMCR_VC_INTERR_Pos)         /*!< Core
1190:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1191:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Pos       8                                             /*!< Core
1192:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_BUSERR_Msk      (1UL << CoreDebug_DEMCR_VC_BUSERR_Pos)         /*!< Core
1193:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1194:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Pos      7                                             /*!< Core
1195:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_STATERR_Msk     (1UL << CoreDebug_DEMCR_VC_STATERR_Pos)        /*!< Core
1196:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1197:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Pos       6                                             /*!< Core
1198:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CHKERR_Msk      (1UL << CoreDebug_DEMCR_VC_CHKERR_Pos)         /*!< Core
1199:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1200:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Pos      5                                             /*!< Core
1201:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_NOCPERR_Msk     (1UL << CoreDebug_DEMCR_VC_NOCPERR_Pos)        /*!< Core
1202:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1203:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Pos        4                                             /*!< Core
1204:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_MMERR_Msk       (1UL << CoreDebug_DEMCR_VC_MMERR_Pos)          /*!< Core
1205:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1206:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Pos    0                                             /*!< Core
1207:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_DEMCR_VC_CORERESET_Msk   (1UL << CoreDebug_DEMCR_VC_CORERESET_Pos)      /*!< Core
1208:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1209:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of group CMSIS_CoreDebug */
1210:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1211:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1212:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup    CMSIS_core_register
1213:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup   CMSIS_core_base     Core Definitions
1214:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Definitions for base addresses, unions, and structures.
1215:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
1216:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1217:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1218:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* Memory mapping of Cortex-M3 Hardware */
1219:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCS_BASE            (0xE000E000UL)                            /*!< System Control Space Bas
1220:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM_BASE            (0xE0000000UL)                            /*!< ITM Base Address        
1221:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT_BASE            (0xE0001000UL)                            /*!< DWT Base Address        
1222:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI_BASE            (0xE0040000UL)                            /*!< TPI Base Address        
1223:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug_BASE      (0xE000EDF0UL)                            /*!< Core Debug Base Address 
1224:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick_BASE        (SCS_BASE +  0x0010UL)                    /*!< SysTick Base Address    
1225:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define NVIC_BASE           (SCS_BASE +  0x0100UL)                    /*!< NVIC Base Address       
1226:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB_BASE            (SCS_BASE +  0x0D00UL)                    /*!< System Control Block Bas
1227:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1228:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCnSCB              ((SCnSCB_Type    *)     SCS_BASE      )   /*!< System control Register 
1229:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SCB                 ((SCB_Type       *)     SCB_BASE      )   /*!< SCB configuration struct
1230:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define SysTick             ((SysTick_Type   *)     SysTick_BASE  )   /*!< SysTick configuration st
1231:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define NVIC                ((NVIC_Type      *)     NVIC_BASE     )   /*!< NVIC configuration struc
1232:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define ITM                 ((ITM_Type       *)     ITM_BASE      )   /*!< ITM configuration struct
1233:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define DWT                 ((DWT_Type       *)     DWT_BASE      )   /*!< DWT configuration struct
1234:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define TPI                 ((TPI_Type       *)     TPI_BASE      )   /*!< TPI configuration struct
1235:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #define CoreDebug           ((CoreDebug_Type *)     CoreDebug_BASE)   /*!< Core Debug configuration
1236:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1237:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if (__MPU_PRESENT == 1)
1238:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define MPU_BASE          (SCS_BASE +  0x0D90UL)                    /*!< Memory Protection Unit  
1239:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   #define MPU               ((MPU_Type       *)     MPU_BASE      )   /*!< Memory Protection Unit  
1240:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #endif
1241:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1242:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} */
1243:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1244:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1245:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1246:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*******************************************************************************
1247:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  *                Hardware Abstraction Layer
1248:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   Core Function Interface contains:
1249:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core NVIC Functions
1250:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core SysTick Functions
1251:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core Debug Functions
1252:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   - Core Register Access Functions
1253:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  ******************************************************************************/
1254:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \defgroup CMSIS_Core_FunctionInterface Functions and Instructions Reference
1255:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** */
1256:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1257:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1258:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1259:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ##########################   NVIC functions  #################################### */
1260:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1261:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_NVICFunctions NVIC Functions
1262:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Functions that manage interrupts and exceptions via the NVIC.
1263:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     @{
1264:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1265:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1266:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Set Priority Grouping
1267:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1268:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   The function sets the priority grouping field using the required unlock sequence.
1269:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   The parameter PriorityGroup is assigned to the field SCB->AIRCR [10:8] PRIGROUP field.
1270:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   Only values from 0..7 are used.
1271:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   In case of a conflict between priority grouping and available
1272:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
1273:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1274:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      PriorityGroup  Priority grouping field.
1275:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1276:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
1277:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1278:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t reg_value;
1279:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 a
1280:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1281:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   reg_value  =  SCB->AIRCR;                                                   /* read old register 
1282:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to chan
1283:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   reg_value  =  (reg_value                                 |
1284:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                 ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
1285:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                 (PriorityGroupTmp << 8));                                     /* Insert write key a
1286:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SCB->AIRCR =  reg_value;
1287:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1288:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1289:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1290:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Get Priority Grouping
1291:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1292:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   The function reads the priority grouping field from the NVIC Interrupt Controller.
1293:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1294:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
1295:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1296:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
1297:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1298:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
1299:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1300:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1301:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1302:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Enable External Interrupt
1303:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1304:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function enables a device-specific interrupt in the NVIC interrupt controller.
1305:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1306:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1307:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1308:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
1309:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1310:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
1311:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1312:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1313:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1314:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Disable External Interrupt
1315:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1316:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function disables a device-specific interrupt in the NVIC interrupt controller.
1317:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1318:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1319:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1320:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
1321:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1322:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1323:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1324:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1325:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1326:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Get Pending Interrupt
1327:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1328:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function reads the pending register in the NVIC and returns the pending bit
1329:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     for the specified interrupt.
1330:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1331:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1332:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1333:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not pending.
1334:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is pending.
1335:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1336:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPendingIRQ(IRQn_Type IRQn)
1337:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1338:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   return((uint32_t) ((NVIC->ISPR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); 
1339:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1340:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1341:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1342:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Set Pending Interrupt
1343:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1344:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function sets the pending bit of an external interrupt.
1345:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1346:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number. Value cannot be negative.
1347:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1348:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
1349:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1350:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   NVIC->ISPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* set interrupt pending 
1351:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1352:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1353:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1354:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Clear Pending Interrupt
1355:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1356:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function clears the pending bit of an external interrupt.
1357:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1358:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  External interrupt number. Value cannot be negative.
1359:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1360:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
1361:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1362:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrup
1363:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1364:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1365:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1366:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Get Active Interrupt
1367:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1368:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function reads the active register in NVIC and returns the active bit.
1369:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1370:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1371:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1372:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return             0  Interrupt status is not active.
1373:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return             1  Interrupt status is active.
1374:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1375:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetActive(IRQn_Type IRQn)
1376:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1377:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   return((uint32_t)((NVIC->IABR[(uint32_t)(IRQn) >> 5] & (1 << ((uint32_t)(IRQn) & 0x1F)))?1:0)); /
1378:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1379:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1380:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1381:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Set Interrupt Priority
1382:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1383:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function sets the priority of an interrupt.
1384:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1385:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \note The priority cannot be set for every core interrupt.
1386:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1387:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]      IRQn  Interrupt number.
1388:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]  priority  Priority to set.
1389:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1390:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
1391:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1392:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   if(IRQn < 0) {
1393:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
1394:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   else {
1395:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set 
1396:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1397:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1398:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1399:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Get Interrupt Priority
1400:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1401:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function reads the priority of an interrupt. The interrupt
1402:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     number can be positive to specify an external (device specific)
1403:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     interrupt, or negative to specify an internal (core) interrupt.
1404:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1405:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1406:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]   IRQn  Interrupt number.
1407:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return             Interrupt Priority. Value is aligned automatically to the implemented
1408:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                         priority bits of the microcontroller.
1409:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1410:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_GetPriority(IRQn_Type IRQn)
1411:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1412:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1413:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   if(IRQn < 0) {
1414:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     return((uint32_t)(SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1415:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   else {
1416:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     return((uint32_t)(NVIC->IP[(uint32_t)(IRQn)]           >> (8 - __NVIC_PRIO_BITS)));  } /* get p
1417:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1418:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1419:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1420:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Encode Priority
1421:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1422:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function encodes the priority for an interrupt with the given priority group,
1423:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     preemptive priority value, and subpriority value.
1424:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     In case of a conflict between priority grouping and available
1425:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS), the samllest possible priority group is set.
1426:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1427:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1428:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
1429:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]       SubPriority  Subpriority value (starting from 0).
1430:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return                        Encoded priority. Value can be used in the function \ref NVIC_Se
1431:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1432:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uin
1433:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1434:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1435:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1436:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1437:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1438:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1439:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1440:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1441:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   return (
1442:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
1443:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****            ((SubPriority     & ((1 << (SubPriorityBits    )) - 1)))
1444:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****          );
1445:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1446:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1447:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1448:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  Decode Priority
1449:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1450:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function decodes an interrupt priority value with a given priority group to
1451:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     preemptive priority value and subpriority value.
1452:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     In case of a conflict between priority grouping and available
1453:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     priority bits (__NVIC_PRIO_BITS) the samllest possible priority group is set.
1454:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1455:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]         Priority   Priority value, which can be retrieved with the function \ref NV
1456:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]     PriorityGroup  Used priority group.
1457:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [out] pPreemptPriority  Preemptive priority value (starting from 0).
1458:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [out]     pSubPriority  Subpriority value (starting from 0).
1459:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1460:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_DecodePriority (uint32_t Priority, uint32_t PriorityGroup, uint32_t* pPre
1461:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1462:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t PriorityGroupTmp = (PriorityGroup & 0x07);          /* only values 0..7 are used        
1463:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t PreemptPriorityBits;
1464:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   uint32_t SubPriorityBits;
1465:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1466:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
1467:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
1468:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1469:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   *pPreemptPriority = (Priority >> SubPriorityBits) & ((1 << (PreemptPriorityBits)) - 1);
1470:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   *pSubPriority     = (Priority                   ) & ((1 << (SubPriorityBits    )) - 1);
1471:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1472:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1473:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1474:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  System Reset
1475:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1476:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function initiates a system reset request to reset the MCU.
1477:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1478:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE void NVIC_SystemReset(void)
1479:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1480:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __DSB();                                                     /* Ensure all outstanding memory acc
1481:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                                                                   buffered write are completed befo
1482:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SCB->AIRCR  = ((0x5FA << SCB_AIRCR_VECTKEY_Pos)      |
1483:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                  (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
1484:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****                  SCB_AIRCR_SYSRESETREQ_Msk);                   /* Keep priority group unchanged */
1485:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   __DSB();                                                     /* Ensure completion of memory acces
1486:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   while(1);                                                    /* wait until reset */
1487:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** }
1488:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1489:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /*@} end of CMSIS_Core_NVICFunctions */
1490:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1491:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1492:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1493:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /* ##################################    SysTick function  ########################################
1494:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \ingroup  CMSIS_Core_FunctionInterface
1495:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \defgroup CMSIS_Core_SysTickFunctions SysTick Functions
1496:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \brief      Functions that configure the System.
1497:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   @{
1498:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1499:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1500:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** #if (__Vendor_SysTickConfig == 0)
1501:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1502:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** /** \brief  System Tick Configuration
1503:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1504:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     The function initializes the System Timer and its interrupt, and starts the System Tick Timer.
1505:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     Counter is in free running mode to generate periodic interrupts.
1506:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1507:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \param [in]  ticks  Number of ticks between two interrupts.
1508:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1509:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return          0  Function succeeded.
1510:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \return          1  Function failed.
1511:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1512:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     \note     When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
1513:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
1514:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     must contain a vendor-specific implementation of this function.
1515:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1516:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****  */
1517:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** __STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
1518:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** {
1519:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
1520:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h **** 
1521:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 511              		.loc 2 1521 0
 512 003e 144B     		ldr	r3, .L25+4
 513              	.LVL43:
 514              	.LBE14:
 515              	.LBE13:
  75:../src/hw_config.c **** 	if (SysTick_Config(SystemCoreClock / 1000))
 516              		.loc 1 75 0
 517 0040 B2FBF0F1 		udiv	r1, r2, r0
 518              	.LVL44:
 519              	.LBB20:
 520              	.LBB19:
 521              		.loc 2 1521 0
 522 0044 4A1E     		subs	r2, r1, #1
 523              	.LBB15:
 524              	.LBB16:
1393:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 525              		.loc 2 1393 0
 526 0046 1349     		ldr	r1, .L25+8
 527              	.LVL45:
 528 0048 F020     		movs	r0, #240
 529              	.LBE16:
 530              	.LBE15:
 531              		.loc 2 1521 0
 532 004a 5A60     		str	r2, [r3, #4]
 533              	.LVL46:
 534              	.LBB18:
 535              	.LBB17:
1393:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 536              		.loc 2 1393 0
 537 004c 81F82300 		strb	r0, [r1, #35]
 538              	.LBE17:
 539              	.LBE18:
1522:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrup
1523:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 540              		.loc 2 1523 0
 541 0050 0022     		movs	r2, #0
 542              	.LVL47:
1524:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 543              		.loc 2 1524 0
 544 0052 0720     		movs	r0, #7
1523:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 545              		.loc 2 1523 0
 546 0054 9A60     		str	r2, [r3, #8]
 547              		.loc 2 1524 0
 548 0056 1860     		str	r0, [r3, #0]
 549              	.LBE19:
 550              	.LBE20:
 551              	.LBB21:
 552              	.LBB22:
1298:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   return ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos);   /* read priority grou
 553              		.loc 2 1298 0
 554 0058 CB68     		ldr	r3, [r1, #12]
 555              	.LVL48:
 556 005a C3F30220 		ubfx	r0, r3, #8, #3
 557              	.LVL49:
 558              	.LBE22:
 559              	.LBE21:
 560              	.LBB23:
 561              	.LBB24:
1439:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
 562              		.loc 2 1439 0
 563 005e 011D     		adds	r1, r0, #4
 564 0060 0629     		cmp	r1, #6
1438:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
 565              		.loc 2 1438 0
 566 0062 C0F10703 		rsb	r3, r0, #7
 567              	.LVL50:
1439:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   SubPriorityBits     = ((PriorityGroupTmp + __NVIC_PRIO_BITS) < 7) ? 0 : PriorityGroupTmp - 7 + __
 568              		.loc 2 1439 0
 569 0066 88BF     		it	hi
 570 0068 C21E     		subhi	r2, r0, #3
 571              	.LVL51:
1438:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****   PreemptPriorityBits = ((7 - PriorityGroupTmp) > __NVIC_PRIO_BITS) ? __NVIC_PRIO_BITS : 7 - Priori
 572              		.loc 2 1438 0
 573 006a 042B     		cmp	r3, #4
 574 006c 28BF     		it	cs
 575 006e 0423     		movcs	r3, #4
 576              	.LVL52:
1442:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****            ((PreemptPriority & ((1 << (PreemptPriorityBits)) - 1)) << SubPriorityBits) |
 577              		.loc 2 1442 0
 578 0070 0120     		movs	r0, #1
 579              	.LVL53:
 580 0072 00FA03F1 		lsl	r1, r0, r3
 581              	.LVL54:
 582 0076 4B1E     		subs	r3, r1, #1
 583 0078 03F00300 		and	r0, r3, #3
 584 007c 00FA02F2 		lsl	r2, r0, r2
 585              	.LVL55:
 586              	.LBE24:
 587              	.LBE23:
 588              	.LBB25:
 589              	.LBB26:
1393:/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Include/core_cm3.h ****     SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set 
 590              		.loc 2 1393 0
 591 0080 044B     		ldr	r3, .L25+8
 592 0082 1101     		lsls	r1, r2, #4
 593 0084 C8B2     		uxtb	r0, r1
 594 0086 83F82300 		strb	r0, [r3, #35]
 595 008a 08BD     		pop	{r3, pc}
 596              	.L26:
 597              		.align	2
 598              	.L25:
 599 008c 00000000 		.word	SystemCoreClock
 600 0090 10E000E0 		.word	-536813552
 601 0094 00ED00E0 		.word	-536810240
 602              	.LBE26:
 603              	.LBE25:
 604              		.cfi_endproc
 605              	.LFE56:
 607              		.section	.text.BUTTON_GetState,"ax",%progbits
 608              		.align	1
 609              		.global	BUTTON_GetState
 610              		.thumb
 611              		.thumb_func
 613              	BUTTON_GetState:
 614              	.LFB64:
 268:../src/hw_config.c **** 
 269:../src/hw_config.c **** /**
 270:../src/hw_config.c ****   * @brief  Returns the selected Button non-filtered state.
 271:../src/hw_config.c ****   * @param  Button: Specifies the Button to be checked.
 272:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 273:../src/hw_config.c ****   *     @arg BUTTON1: Button1
 274:../src/hw_config.c ****   *     @arg BUTTON2: Button2
 275:../src/hw_config.c ****   * @retval Actual Button Pressed state.
 276:../src/hw_config.c ****   */
 277:../src/hw_config.c **** uint8_t BUTTON_GetState(Button_TypeDef Button)
 278:../src/hw_config.c **** {
 615              		.loc 1 278 0
 616              		.cfi_startproc
 617              		@ args = 0, pretend = 0, frame = 0
 618              		@ frame_needed = 0, uses_anonymous_args = 0
 619              		@ link register save eliminated.
 620              	.LVL56:
 279:../src/hw_config.c ****     return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 621              		.loc 1 279 0
 622 0000 044A     		ldr	r2, .L28
 623 0002 054B     		ldr	r3, .L28+4
 624 0004 02EB8001 		add	r1, r2, r0, lsl #2
 625 0008 03EB4002 		add	r2, r3, r0, lsl #1
 626 000c C868     		ldr	r0, [r1, #12]
 627              	.LVL57:
 628 000e 118C     		ldrh	r1, [r2, #32]
 280:../src/hw_config.c **** }
 629              		.loc 1 280 0
 279:../src/hw_config.c ****     return GPIO_ReadInputDataBit(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 630              		.loc 1 279 0
 631 0010 FFF7FEBF 		b	GPIO_ReadInputDataBit
 632              	.LVL58:
 633              	.L29:
 634              		.align	2
 635              	.L28:
 636 0014 00000000 		.word	.LANCHOR1
 637 0018 00000000 		.word	.LANCHOR0
 638              		.cfi_endproc
 639              	.LFE64:
 641              		.section	.text.BUTTON_GetDebouncedState,"ax",%progbits
 642              		.align	1
 643              		.global	BUTTON_GetDebouncedState
 644              		.thumb
 645              		.thumb_func
 647              	BUTTON_GetDebouncedState:
 648              	.LFB65:
 281:../src/hw_config.c **** 
 282:../src/hw_config.c **** /**
 283:../src/hw_config.c ****   * @brief  Returns the selected Button filtered state.
 284:../src/hw_config.c ****   * @param  Button: Specifies the Button to be checked.
 285:../src/hw_config.c ****   *   This parameter can be one of following parameters:
 286:../src/hw_config.c ****   *     @arg BUTTON1: Button1
 287:../src/hw_config.c ****   *     @arg BUTTON2: Button2
 288:../src/hw_config.c ****   * @retval Button Debounced state.
 289:../src/hw_config.c ****   */
 290:../src/hw_config.c **** uint8_t BUTTON_GetDebouncedState(Button_TypeDef Button)
 291:../src/hw_config.c **** {
 649              		.loc 1 291 0
 650              		.cfi_startproc
 651              		@ args = 0, pretend = 0, frame = 0
 652              		@ frame_needed = 0, uses_anonymous_args = 0
 653              		@ link register save eliminated.
 654              	.LVL59:
 292:../src/hw_config.c **** 	if(BUTTON_DEBOUNCED[BUTTON1] != 0x00)
 655              		.loc 1 292 0
 656 0000 034B     		ldr	r3, .L33
 657 0002 1878     		ldrb	r0, [r3, #0]	@ zero_extendqisi2
 658              	.LVL60:
 659 0004 10B1     		cbz	r0, .L31
 293:../src/hw_config.c **** 	{
 294:../src/hw_config.c **** 		BUTTON_DEBOUNCED[BUTTON1] = 0x00;
 660              		.loc 1 294 0
 661 0006 0022     		movs	r2, #0
 662 0008 1A70     		strb	r2, [r3, #0]
 295:../src/hw_config.c **** 		return 0x01;
 663              		.loc 1 295 0
 664 000a 0120     		movs	r0, #1
 665              	.L31:
 296:../src/hw_config.c **** 	}
 297:../src/hw_config.c **** 	return 0x00;
 298:../src/hw_config.c **** }
 666              		.loc 1 298 0
 667 000c 7047     		bx	lr
 668              	.L34:
 669 000e 00BF     		.align	2
 670              	.L33:
 671 0010 00000000 		.word	.LANCHOR2
 672              		.cfi_endproc
 673              	.LFE65:
 675              		.section	.text.CC3000_SPI_Init,"ax",%progbits
 676              		.align	1
 677              		.global	CC3000_SPI_Init
 678              		.thumb
 679              		.thumb_func
 681              	CC3000_SPI_Init:
 682              	.LFB67:
 299:../src/hw_config.c **** 
 300:../src/hw_config.c **** /**
 301:../src/hw_config.c ****  * @brief  Initialize the CC3000 - CS and ENABLE lines.
 302:../src/hw_config.c ****  * @param  None
 303:../src/hw_config.c ****  * @retval None
 304:../src/hw_config.c ****  */
 305:../src/hw_config.c **** void CC3000_WIFI_Init(void)
 306:../src/hw_config.c **** {
 307:../src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 308:../src/hw_config.c **** 
 309:../src/hw_config.c **** 	/* CC3000_WIFI_CS_GPIO and CC3000_WIFI_EN_GPIO Peripheral clock enable */
 310:../src/hw_config.c **** 	RCC_APB2PeriphClockCmd(CC3000_WIFI_CS_GPIO_CLK | CC3000_WIFI_EN_GPIO_CLK, ENABLE);
 311:../src/hw_config.c **** 
 312:../src/hw_config.c **** 	/* Configure CC3000_WIFI pins: CS */
 313:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_CS_PIN;
 314:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 315:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 316:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_CS_GPIO_PORT, &GPIO_InitStructure);
 317:../src/hw_config.c **** 
 318:../src/hw_config.c **** 	/* Deselect CC3000 */
 319:../src/hw_config.c **** 	CC3000_CS_HIGH();
 320:../src/hw_config.c **** 
 321:../src/hw_config.c **** 	/* Configure CC3000_WIFI pins: Enable */
 322:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_EN_PIN;
 323:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_EN_GPIO_PORT, &GPIO_InitStructure);
 324:../src/hw_config.c **** 
 325:../src/hw_config.c **** 	/* Disable CC3000 */
 326:../src/hw_config.c **** 	CC3000_Write_Enable_Pin(WLAN_DISABLE);
 327:../src/hw_config.c **** }
 328:../src/hw_config.c **** 
 329:../src/hw_config.c **** /**
 330:../src/hw_config.c ****  * @brief  Initialize and configure the SPI peripheral used by CC3000.
 331:../src/hw_config.c ****  * @param  None
 332:../src/hw_config.c ****  * @retval None
 333:../src/hw_config.c ****  */
 334:../src/hw_config.c **** void CC3000_SPI_Init(void)
 335:../src/hw_config.c **** {
 683              		.loc 1 335 0
 684              		.cfi_startproc
 685              		@ args = 0, pretend = 0, frame = 24
 686              		@ frame_needed = 0, uses_anonymous_args = 0
 687 0000 30B5     		push	{r4, r5, lr}
 688              	.LCFI5:
 689              		.cfi_def_cfa_offset 12
 690              		.cfi_offset 4, -12
 691              		.cfi_offset 5, -8
 692              		.cfi_offset 14, -4
 336:../src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 337:../src/hw_config.c **** 	SPI_InitTypeDef SPI_InitStructure;
 338:../src/hw_config.c **** 
 339:../src/hw_config.c **** 	/* CC3000_SPI_SCK_GPIO, CC3000_SPI_MOSI_GPIO and CC3000_SPI_MISO_GPIO Peripheral clock enable */
 340:../src/hw_config.c **** 	RCC_APB2PeriphClockCmd(CC3000_SPI_SCK_GPIO_CLK | CC3000_SPI_MOSI_GPIO_CLK | CC3000_SPI_MISO_GPIO_C
 693              		.loc 1 340 0
 694 0002 0820     		movs	r0, #8
 335:../src/hw_config.c **** {
 695              		.loc 1 335 0
 696 0004 87B0     		sub	sp, sp, #28
 697              	.LCFI6:
 698              		.cfi_def_cfa_offset 40
 699              		.loc 1 340 0
 700 0006 0121     		movs	r1, #1
 701 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 702              	.LVL61:
 341:../src/hw_config.c **** 
 342:../src/hw_config.c **** 	/* CC3000_SPI Peripheral clock enable */
 343:../src/hw_config.c **** 	CC3000_SPI_CLK_CMD(CC3000_SPI_CLK, ENABLE);
 344:../src/hw_config.c **** 
 345:../src/hw_config.c **** 	/* Configure CC3000_SPI pins: SCK */
 346:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_SCK_PIN;
 347:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 348:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 349:../src/hw_config.c **** 	GPIO_Init(CC3000_SPI_SCK_GPIO_PORT, &GPIO_InitStructure);
 703              		.loc 1 349 0
 704 000c 224C     		ldr	r4, .L36
 343:../src/hw_config.c **** 	CC3000_SPI_CLK_CMD(CC3000_SPI_CLK, ENABLE);
 705              		.loc 1 343 0
 706 000e 0121     		movs	r1, #1
 707 0010 4FF48040 		mov	r0, #16384
 708 0014 FFF7FEFF 		bl	RCC_APB1PeriphClockCmd
 709              	.LVL62:
 348:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 710              		.loc 1 348 0
 711 0018 1820     		movs	r0, #24
 346:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_SCK_PIN;
 712              		.loc 1 346 0
 713 001a 4FF40053 		mov	r3, #8192
 347:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 714              		.loc 1 347 0
 715 001e 0125     		movs	r5, #1
 348:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
 716              		.loc 1 348 0
 717 0020 8DF80300 		strb	r0, [sp, #3]
 718              		.loc 1 349 0
 719 0024 6946     		mov	r1, sp
 720 0026 2046     		mov	r0, r4
 346:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_SCK_PIN;
 721              		.loc 1 346 0
 722 0028 ADF80030 		strh	r3, [sp, #0]	@ movhi
 347:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
 723              		.loc 1 347 0
 724 002c 8DF80250 		strb	r5, [sp, #2]
 725              		.loc 1 349 0
 726 0030 FFF7FEFF 		bl	GPIO_Init
 727              	.LVL63:
 350:../src/hw_config.c **** 
 351:../src/hw_config.c **** 	/* Configure CC3000_SPI pins: MOSI */
 352:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MOSI_PIN;
 728              		.loc 1 352 0
 729 0034 4FF40041 		mov	r1, #32768
 730 0038 ADF80010 		strh	r1, [sp, #0]	@ movhi
 353:../src/hw_config.c **** 	GPIO_Init(CC3000_SPI_MOSI_GPIO_PORT, &GPIO_InitStructure);
 731              		.loc 1 353 0
 732 003c 2046     		mov	r0, r4
 733 003e 6946     		mov	r1, sp
 734 0040 FFF7FEFF 		bl	GPIO_Init
 735              	.LVL64:
 354:../src/hw_config.c **** 
 355:../src/hw_config.c **** 	/* Configure CC3000_SPI pins: MISO */
 356:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MISO_PIN;
 357:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 736              		.loc 1 357 0
 737 0044 0423     		movs	r3, #4
 356:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MISO_PIN;
 738              		.loc 1 356 0
 739 0046 4FF48042 		mov	r2, #16384
 358:../src/hw_config.c **** 	GPIO_Init(CC3000_SPI_MISO_GPIO_PORT, &GPIO_InitStructure);
 740              		.loc 1 358 0
 741 004a 2046     		mov	r0, r4
 742 004c 6946     		mov	r1, sp
 356:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_SPI_MISO_PIN;
 743              		.loc 1 356 0
 744 004e ADF80020 		strh	r2, [sp, #0]	@ movhi
 357:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
 745              		.loc 1 357 0
 746 0052 8DF80330 		strb	r3, [sp, #3]
 747              		.loc 1 358 0
 748 0056 FFF7FEFF 		bl	GPIO_Init
 749              	.LVL65:
 359:../src/hw_config.c **** 
 360:../src/hw_config.c **** 	/* CC3000_SPI Config */
 361:../src/hw_config.c **** 	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 750              		.loc 1 361 0
 751 005a 0020     		movs	r0, #0
 752 005c ADF80400 		strh	r0, [sp, #4]	@ movhi
 362:../src/hw_config.c **** 	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 753              		.loc 1 362 0
 754 0060 4FF48271 		mov	r1, #260
 363:../src/hw_config.c **** 	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 755              		.loc 1 363 0
 756 0064 ADF80800 		strh	r0, [sp, #8]	@ movhi
 364:../src/hw_config.c **** 	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 757              		.loc 1 364 0
 758 0068 ADF80A00 		strh	r0, [sp, #10]	@ movhi
 365:../src/hw_config.c **** 	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 366:../src/hw_config.c **** 	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 367:../src/hw_config.c **** 	SPI_InitStructure.SPI_BaudRatePrescaler = CC3000_SPI_BAUDRATE_PRESCALER;
 368:../src/hw_config.c **** 	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 759              		.loc 1 368 0
 760 006c ADF81200 		strh	r0, [sp, #18]	@ movhi
 369:../src/hw_config.c **** 	SPI_InitStructure.SPI_CRCPolynomial = 7;
 761              		.loc 1 369 0
 762 0070 0720     		movs	r0, #7
 362:../src/hw_config.c **** 	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 763              		.loc 1 362 0
 764 0072 ADF80610 		strh	r1, [sp, #6]	@ movhi
 366:../src/hw_config.c **** 	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 765              		.loc 1 366 0
 766 0076 4FF40072 		mov	r2, #512
 367:../src/hw_config.c **** 	SPI_InitStructure.SPI_BaudRatePrescaler = CC3000_SPI_BAUDRATE_PRESCALER;
 767              		.loc 1 367 0
 768 007a 2023     		movs	r3, #32
 769              		.loc 1 369 0
 770 007c ADF81400 		strh	r0, [sp, #20]	@ movhi
 370:../src/hw_config.c **** 	SPI_Init(CC3000_SPI, &SPI_InitStructure);
 771              		.loc 1 370 0
 772 0080 01A9     		add	r1, sp, #4
 773 0082 0648     		ldr	r0, .L36+4
 365:../src/hw_config.c **** 	SPI_InitStructure.SPI_CPHA = SPI_CPHA_2Edge;
 774              		.loc 1 365 0
 775 0084 ADF80C50 		strh	r5, [sp, #12]	@ movhi
 366:../src/hw_config.c **** 	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 776              		.loc 1 366 0
 777 0088 ADF80E20 		strh	r2, [sp, #14]	@ movhi
 367:../src/hw_config.c **** 	SPI_InitStructure.SPI_BaudRatePrescaler = CC3000_SPI_BAUDRATE_PRESCALER;
 778              		.loc 1 367 0
 779 008c ADF81030 		strh	r3, [sp, #16]	@ movhi
 780              		.loc 1 370 0
 781 0090 FFF7FEFF 		bl	SPI_Init
 782              	.LVL66:
 371:../src/hw_config.c **** }
 783              		.loc 1 371 0
 784 0094 07B0     		add	sp, sp, #28
 785 0096 30BD     		pop	{r4, r5, pc}
 786              	.L37:
 787              		.align	2
 788              	.L36:
 789 0098 000C0140 		.word	1073810432
 790 009c 00380040 		.word	1073756160
 791              		.cfi_endproc
 792              	.LFE67:
 794              		.section	.text.CC3000_DMA_Config,"ax",%progbits
 795              		.align	1
 796              		.global	CC3000_DMA_Config
 797              		.thumb
 798              		.thumb_func
 800              	CC3000_DMA_Config:
 801              	.LFB68:
 372:../src/hw_config.c **** 
 373:../src/hw_config.c **** /**
 374:../src/hw_config.c ****  * @brief  Configure the DMA Peripheral used to handle CC3000 communication via SPI.
 375:../src/hw_config.c ****  * @param  None
 376:../src/hw_config.c ****  * @retval None
 377:../src/hw_config.c ****  */
 378:../src/hw_config.c **** void CC3000_DMA_Config(CC3000_DMADirection_TypeDef Direction, uint8_t* buffer, uint16_t NumData)
 379:../src/hw_config.c **** {
 802              		.loc 1 379 0
 803              		.cfi_startproc
 804              		@ args = 0, pretend = 0, frame = 48
 805              		@ frame_needed = 0, uses_anonymous_args = 0
 806              	.LVL67:
 807 0000 70B5     		push	{r4, r5, r6, lr}
 808              	.LCFI7:
 809              		.cfi_def_cfa_offset 16
 810              		.cfi_offset 4, -16
 811              		.cfi_offset 5, -12
 812              		.cfi_offset 6, -8
 813              		.cfi_offset 14, -4
 814 0002 0446     		mov	r4, r0
 380:../src/hw_config.c **** 	DMA_InitTypeDef DMA_InitStructure;
 381:../src/hw_config.c **** 
 382:../src/hw_config.c **** 	RCC_AHBPeriphClockCmd(CC3000_SPI_DMA_CLK, ENABLE);
 815              		.loc 1 382 0
 816 0004 0120     		movs	r0, #1
 817              	.LVL68:
 379:../src/hw_config.c **** {
 818              		.loc 1 379 0
 819 0006 8CB0     		sub	sp, sp, #48
 820              	.LCFI8:
 821              		.cfi_def_cfa_offset 64
 379:../src/hw_config.c **** {
 822              		.loc 1 379 0
 823 0008 0E46     		mov	r6, r1
 824              		.loc 1 382 0
 825 000a 0146     		mov	r1, r0
 826              	.LVL69:
 379:../src/hw_config.c **** {
 827              		.loc 1 379 0
 828 000c 1546     		mov	r5, r2
 829              		.loc 1 382 0
 830 000e FFF7FEFF 		bl	RCC_AHBPeriphClockCmd
 831              	.LVL70:
 383:../src/hw_config.c **** 
 384:../src/hw_config.c **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = CC3000_SPI_DR_BASE;
 832              		.loc 1 384 0
 833 0012 124B     		ldr	r3, .L42
 385:../src/hw_config.c **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) buffer;
 386:../src/hw_config.c **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 834              		.loc 1 386 0
 835 0014 0020     		movs	r0, #0
 387:../src/hw_config.c **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 836              		.loc 1 387 0
 837 0016 8022     		movs	r2, #128
 388:../src/hw_config.c **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 389:../src/hw_config.c **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 390:../src/hw_config.c **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 391:../src/hw_config.c **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 838              		.loc 1 391 0
 839 0018 4FF44051 		mov	r1, #12288
 392:../src/hw_config.c **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 393:../src/hw_config.c **** 
 394:../src/hw_config.c **** 	/* DMA used for Reception */
 395:../src/hw_config.c **** 	if (Direction == CC3000_DMA_RX)
 840              		.loc 1 395 0
 841 001c 012C     		cmp	r4, #1
 384:../src/hw_config.c **** 	DMA_InitStructure.DMA_PeripheralBaseAddr = CC3000_SPI_DR_BASE;
 842              		.loc 1 384 0
 843 001e 0193     		str	r3, [sp, #4]
 385:../src/hw_config.c **** 	DMA_InitStructure.DMA_MemoryBaseAddr = (uint32_t) buffer;
 844              		.loc 1 385 0
 845 0020 0296     		str	r6, [sp, #8]
 386:../src/hw_config.c **** 	DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 846              		.loc 1 386 0
 847 0022 0590     		str	r0, [sp, #20]
 387:../src/hw_config.c **** 	DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
 848              		.loc 1 387 0
 849 0024 0692     		str	r2, [sp, #24]
 388:../src/hw_config.c **** 	DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
 850              		.loc 1 388 0
 851 0026 0790     		str	r0, [sp, #28]
 389:../src/hw_config.c **** 	DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
 852              		.loc 1 389 0
 853 0028 0890     		str	r0, [sp, #32]
 390:../src/hw_config.c **** 	DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
 854              		.loc 1 390 0
 855 002a 0990     		str	r0, [sp, #36]
 391:../src/hw_config.c **** 	DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
 856              		.loc 1 391 0
 857 002c 0A91     		str	r1, [sp, #40]
 392:../src/hw_config.c **** 	DMA_InitStructure.DMA_M2M = DMA_M2M_Disable;
 858              		.loc 1 392 0
 859 002e 0B90     		str	r0, [sp, #44]
 860              		.loc 1 395 0
 861 0030 06D1     		bne	.L39
 396:../src/hw_config.c **** 	{
 397:../src/hw_config.c **** 		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralSRC;
 862              		.loc 1 397 0
 863 0032 0390     		str	r0, [sp, #12]
 398:../src/hw_config.c **** 		DMA_InitStructure.DMA_BufferSize = NumData;
 399:../src/hw_config.c **** 		DMA_DeInit(CC3000_SPI_RX_DMA_CHANNEL );
 864              		.loc 1 399 0
 865 0034 0A48     		ldr	r0, .L42+4
 398:../src/hw_config.c **** 		DMA_InitStructure.DMA_BufferSize = NumData;
 866              		.loc 1 398 0
 867 0036 0495     		str	r5, [sp, #16]
 868              		.loc 1 399 0
 869 0038 FFF7FEFF 		bl	DMA_DeInit
 870              	.LVL71:
 400:../src/hw_config.c **** 		DMA_Init(CC3000_SPI_RX_DMA_CHANNEL, &DMA_InitStructure);
 871              		.loc 1 400 0
 872 003c 0848     		ldr	r0, .L42+4
 873 003e 07E0     		b	.L41
 874              	.L39:
 401:../src/hw_config.c **** 	}
 402:../src/hw_config.c **** 	/* DMA used for Transmission */
 403:../src/hw_config.c **** 	else if (Direction == CC3000_DMA_TX)
 875              		.loc 1 403 0
 876 0040 4CB9     		cbnz	r4, .L38
 404:../src/hw_config.c **** 	{
 405:../src/hw_config.c **** 		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 877              		.loc 1 405 0
 878 0042 1023     		movs	r3, #16
 406:../src/hw_config.c **** 		DMA_InitStructure.DMA_BufferSize = NumData;
 407:../src/hw_config.c **** 		DMA_DeInit(CC3000_SPI_TX_DMA_CHANNEL );
 879              		.loc 1 407 0
 880 0044 0748     		ldr	r0, .L42+8
 405:../src/hw_config.c **** 		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralDST;
 881              		.loc 1 405 0
 882 0046 0393     		str	r3, [sp, #12]
 406:../src/hw_config.c **** 		DMA_InitStructure.DMA_BufferSize = NumData;
 883              		.loc 1 406 0
 884 0048 0495     		str	r5, [sp, #16]
 885              		.loc 1 407 0
 886 004a FFF7FEFF 		bl	DMA_DeInit
 887              	.LVL72:
 408:../src/hw_config.c **** 		DMA_Init(CC3000_SPI_TX_DMA_CHANNEL, &DMA_InitStructure);
 888              		.loc 1 408 0
 889 004e 0548     		ldr	r0, .L42+8
 890              	.L41:
 891 0050 01A9     		add	r1, sp, #4
 892 0052 FFF7FEFF 		bl	DMA_Init
 893              	.LVL73:
 894              	.L38:
 409:../src/hw_config.c **** 	}
 410:../src/hw_config.c **** }
 895              		.loc 1 410 0
 896 0056 0CB0     		add	sp, sp, #48
 897 0058 70BD     		pop	{r4, r5, r6, pc}
 898              	.L43:
 899 005a 00BF     		.align	2
 900              	.L42:
 901 005c 0C380040 		.word	1073756172
 902 0060 44000240 		.word	1073872964
 903 0064 58000240 		.word	1073872984
 904              		.cfi_endproc
 905              	.LFE68:
 907              		.section	.text.CC3000_SPI_DMA_Init,"ax",%progbits
 908              		.align	1
 909              		.global	CC3000_SPI_DMA_Init
 910              		.thumb
 911              		.thumb_func
 913              	CC3000_SPI_DMA_Init:
 914              	.LFB69:
 411:../src/hw_config.c **** 
 412:../src/hw_config.c **** void CC3000_SPI_DMA_Init(void)
 413:../src/hw_config.c **** {
 915              		.loc 1 413 0
 916              		.cfi_startproc
 917              		@ args = 0, pretend = 0, frame = 8
 918              		@ frame_needed = 0, uses_anonymous_args = 0
 919 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 920              	.LCFI9:
 921              		.cfi_def_cfa_offset 24
 922              		.cfi_offset 0, -24
 923              		.cfi_offset 1, -20
 924              		.cfi_offset 4, -16
 925              		.cfi_offset 5, -12
 926              		.cfi_offset 6, -8
 927              		.cfi_offset 14, -4
 414:../src/hw_config.c **** 	NVIC_InitTypeDef NVIC_InitStructure;
 415:../src/hw_config.c **** 
 416:../src/hw_config.c **** 	/* Configure and enable SPI DMA TX Channel interrupt */
 417:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = CC3000_SPI_TX_DMA_IRQn;
 928              		.loc 1 417 0
 929 0002 0F23     		movs	r3, #15
 418:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 419:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 420:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 930              		.loc 1 420 0
 931 0004 0124     		movs	r4, #1
 418:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 932              		.loc 1 418 0
 933 0006 0025     		movs	r5, #0
 421:../src/hw_config.c **** 	NVIC_Init(&NVIC_InitStructure);
 934              		.loc 1 421 0
 935 0008 01A8     		add	r0, sp, #4
 417:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = CC3000_SPI_TX_DMA_IRQn;
 936              		.loc 1 417 0
 937 000a 8DF80430 		strb	r3, [sp, #4]
 418:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 938              		.loc 1 418 0
 939 000e 8DF80550 		strb	r5, [sp, #5]
 419:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x00;
 940              		.loc 1 419 0
 941 0012 8DF80650 		strb	r5, [sp, #6]
 422:../src/hw_config.c **** 
 423:../src/hw_config.c **** 	CC3000_SPI_Init();
 424:../src/hw_config.c **** 
 425:../src/hw_config.c **** 	/* Configure DMA Peripheral but don't send data*/
 426:../src/hw_config.c **** 	CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) wlan_rx_buffer, 0);
 427:../src/hw_config.c **** 	CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) wlan_tx_buffer, 0);
 428:../src/hw_config.c **** 
 429:../src/hw_config.c **** 	/* Enable SPI DMA TX Channel Transfer Complete Interrupt */
 430:../src/hw_config.c **** 	DMA_ITConfig(CC3000_SPI_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 942              		.loc 1 430 0
 943 0016 174E     		ldr	r6, .L45
 420:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 944              		.loc 1 420 0
 945 0018 8DF80740 		strb	r4, [sp, #7]
 421:../src/hw_config.c **** 	NVIC_Init(&NVIC_InitStructure);
 946              		.loc 1 421 0
 947 001c FFF7FEFF 		bl	NVIC_Init
 948              	.LVL74:
 423:../src/hw_config.c **** 	CC3000_SPI_Init();
 949              		.loc 1 423 0
 950 0020 FFF7FEFF 		bl	CC3000_SPI_Init
 951              	.LVL75:
 426:../src/hw_config.c **** 	CC3000_DMA_Config(CC3000_DMA_RX, (uint8_t*) wlan_rx_buffer, 0);
 952              		.loc 1 426 0
 953 0024 2046     		mov	r0, r4
 954 0026 2A46     		mov	r2, r5
 955 0028 1349     		ldr	r1, .L45+4
 956 002a FFF7FEFF 		bl	CC3000_DMA_Config
 957              	.LVL76:
 427:../src/hw_config.c **** 	CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) wlan_tx_buffer, 0);
 958              		.loc 1 427 0
 959 002e 2846     		mov	r0, r5
 960 0030 2A46     		mov	r2, r5
 961 0032 1249     		ldr	r1, .L45+8
 431:../src/hw_config.c **** 
 432:../src/hw_config.c **** 	/* Enable SPI DMA request */
 433:../src/hw_config.c **** 	SPI_I2S_DMACmd(CC3000_SPI, SPI_I2S_DMAReq_Rx, ENABLE);
 962              		.loc 1 433 0
 963 0034 124D     		ldr	r5, .L45+12
 427:../src/hw_config.c **** 	CC3000_DMA_Config(CC3000_DMA_TX, (uint8_t*) wlan_tx_buffer, 0);
 964              		.loc 1 427 0
 965 0036 FFF7FEFF 		bl	CC3000_DMA_Config
 966              	.LVL77:
 430:../src/hw_config.c **** 	DMA_ITConfig(CC3000_SPI_TX_DMA_CHANNEL, DMA_IT_TC, ENABLE);
 967              		.loc 1 430 0
 968 003a 3046     		mov	r0, r6
 969 003c 0221     		movs	r1, #2
 970 003e 2246     		mov	r2, r4
 971 0040 FFF7FEFF 		bl	DMA_ITConfig
 972              	.LVL78:
 973              		.loc 1 433 0
 974 0044 2846     		mov	r0, r5
 975 0046 2146     		mov	r1, r4
 976 0048 2246     		mov	r2, r4
 977 004a FFF7FEFF 		bl	SPI_I2S_DMACmd
 978              	.LVL79:
 434:../src/hw_config.c **** 	SPI_I2S_DMACmd(CC3000_SPI, SPI_I2S_DMAReq_Tx, ENABLE);
 979              		.loc 1 434 0
 980 004e 2246     		mov	r2, r4
 981 0050 2846     		mov	r0, r5
 982 0052 0221     		movs	r1, #2
 983 0054 FFF7FEFF 		bl	SPI_I2S_DMACmd
 984              	.LVL80:
 435:../src/hw_config.c **** 
 436:../src/hw_config.c **** 	/* Enable CC3000_SPI */
 437:../src/hw_config.c **** 	SPI_Cmd(CC3000_SPI, ENABLE);
 985              		.loc 1 437 0
 986 0058 2846     		mov	r0, r5
 987 005a 2146     		mov	r1, r4
 988 005c FFF7FEFF 		bl	SPI_Cmd
 989              	.LVL81:
 438:../src/hw_config.c **** 
 439:../src/hw_config.c **** 	/* Enable DMA RX Channel */
 440:../src/hw_config.c **** 	DMA_Cmd(CC3000_SPI_RX_DMA_CHANNEL, ENABLE);
 990              		.loc 1 440 0
 991 0060 2146     		mov	r1, r4
 992 0062 0848     		ldr	r0, .L45+16
 993 0064 FFF7FEFF 		bl	DMA_Cmd
 994              	.LVL82:
 441:../src/hw_config.c **** 	/* Enable DMA TX Channel */
 442:../src/hw_config.c **** 	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, ENABLE);
 995              		.loc 1 442 0
 996 0068 3046     		mov	r0, r6
 997 006a 2146     		mov	r1, r4
 998 006c FFF7FEFF 		bl	DMA_Cmd
 999              	.LVL83:
 443:../src/hw_config.c **** }
 1000              		.loc 1 443 0
 1001 0070 7CBD     		pop	{r2, r3, r4, r5, r6, pc}
 1002              	.L46:
 1003 0072 00BF     		.align	2
 1004              	.L45:
 1005 0074 58000240 		.word	1073872984
 1006 0078 00000000 		.word	wlan_rx_buffer
 1007 007c 00000000 		.word	wlan_tx_buffer
 1008 0080 00380040 		.word	1073756160
 1009 0084 44000240 		.word	1073872964
 1010              		.cfi_endproc
 1011              	.LFE69:
 1013              		.section	.text.CC3000_SPI_DMA_Channels,"ax",%progbits
 1014              		.align	1
 1015              		.global	CC3000_SPI_DMA_Channels
 1016              		.thumb
 1017              		.thumb_func
 1019              	CC3000_SPI_DMA_Channels:
 1020              	.LFB70:
 444:../src/hw_config.c **** 
 445:../src/hw_config.c **** void CC3000_SPI_DMA_Channels(FunctionalState NewState)
 446:../src/hw_config.c **** {
 1021              		.loc 1 446 0
 1022              		.cfi_startproc
 1023              		@ args = 0, pretend = 0, frame = 0
 1024              		@ frame_needed = 0, uses_anonymous_args = 0
 1025              	.LVL84:
 1026 0000 10B5     		push	{r4, lr}
 1027              	.LCFI10:
 1028              		.cfi_def_cfa_offset 8
 1029              		.cfi_offset 4, -8
 1030              		.cfi_offset 14, -4
 1031              		.loc 1 446 0
 1032 0002 0446     		mov	r4, r0
 447:../src/hw_config.c **** 	/* Enable/Disable DMA RX Channel */
 448:../src/hw_config.c **** 	DMA_Cmd(CC3000_SPI_RX_DMA_CHANNEL, NewState);
 1033              		.loc 1 448 0
 1034 0004 2146     		mov	r1, r4
 1035 0006 0448     		ldr	r0, .L48
 1036              	.LVL85:
 1037 0008 FFF7FEFF 		bl	DMA_Cmd
 1038              	.LVL86:
 449:../src/hw_config.c **** 	/* Enable/Disable DMA TX Channel */
 450:../src/hw_config.c **** 	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, NewState);
 1039              		.loc 1 450 0
 1040 000c 0348     		ldr	r0, .L48+4
 1041 000e 2146     		mov	r1, r4
 451:../src/hw_config.c **** }
 1042              		.loc 1 451 0
 1043 0010 BDE81040 		pop	{r4, lr}
 450:../src/hw_config.c **** 	DMA_Cmd(CC3000_SPI_TX_DMA_CHANNEL, NewState);
 1044              		.loc 1 450 0
 1045 0014 FFF7FEBF 		b	DMA_Cmd
 1046              	.LVL87:
 1047              	.L49:
 1048              		.align	2
 1049              	.L48:
 1050 0018 44000240 		.word	1073872964
 1051 001c 58000240 		.word	1073872984
 1052              		.cfi_endproc
 1053              	.LFE70:
 1055              		.section	.text.CC3000_Read_Interrupt_Pin,"ax",%progbits
 1056              		.align	1
 1057              		.global	CC3000_Read_Interrupt_Pin
 1058              		.thumb
 1059              		.thumb_func
 1061              	CC3000_Read_Interrupt_Pin:
 1062              	.LFB71:
 452:../src/hw_config.c **** 
 453:../src/hw_config.c **** /* CC3000 Hardware related callbacks passed to wlan_init */
 454:../src/hw_config.c **** long CC3000_Read_Interrupt_Pin(void)
 455:../src/hw_config.c **** {
 1063              		.loc 1 455 0
 1064              		.cfi_startproc
 1065              		@ args = 0, pretend = 0, frame = 0
 1066              		@ frame_needed = 0, uses_anonymous_args = 0
 1067 0000 08B5     		push	{r3, lr}
 1068              	.LCFI11:
 1069              		.cfi_def_cfa_offset 8
 1070              		.cfi_offset 3, -8
 1071              		.cfi_offset 14, -4
 456:../src/hw_config.c **** 	return GPIO_ReadInputDataBit(CC3000_WIFI_INT_GPIO_PORT, CC3000_WIFI_INT_PIN );
 1072              		.loc 1 456 0
 1073 0002 4FF40061 		mov	r1, #2048
 1074 0006 0248     		ldr	r0, .L51
 1075 0008 FFF7FEFF 		bl	GPIO_ReadInputDataBit
 1076              	.LVL88:
 457:../src/hw_config.c **** }
 1077              		.loc 1 457 0
 1078 000c 08BD     		pop	{r3, pc}
 1079              	.L52:
 1080 000e 00BF     		.align	2
 1081              	.L51:
 1082 0010 000C0140 		.word	1073810432
 1083              		.cfi_endproc
 1084              	.LFE71:
 1086              		.section	.text.CC3000_Interrupt_Enable,"ax",%progbits
 1087              		.align	1
 1088              		.global	CC3000_Interrupt_Enable
 1089              		.thumb
 1090              		.thumb_func
 1092              	CC3000_Interrupt_Enable:
 1093              	.LFB72:
 458:../src/hw_config.c **** 
 459:../src/hw_config.c **** void CC3000_Interrupt_Enable(void)
 460:../src/hw_config.c **** {
 1094              		.loc 1 460 0
 1095              		.cfi_startproc
 1096              		@ args = 0, pretend = 0, frame = 16
 1097              		@ frame_needed = 0, uses_anonymous_args = 0
 1098 0000 30B5     		push	{r4, r5, lr}
 1099              	.LCFI12:
 1100              		.cfi_def_cfa_offset 12
 1101              		.cfi_offset 4, -12
 1102              		.cfi_offset 5, -8
 1103              		.cfi_offset 14, -4
 461:../src/hw_config.c **** 	GPIO_InitTypeDef GPIO_InitStructure;
 462:../src/hw_config.c **** 	EXTI_InitTypeDef EXTI_InitStructure;
 463:../src/hw_config.c **** 	NVIC_InitTypeDef NVIC_InitStructure;
 464:../src/hw_config.c **** 
 465:../src/hw_config.c **** 	/* CC3000_WIFI_INT_GPIO and AFIO Peripheral clock enable */
 466:../src/hw_config.c **** 	RCC_APB2PeriphClockCmd(CC3000_WIFI_INT_GPIO_CLK | RCC_APB2Periph_AFIO, ENABLE);
 1104              		.loc 1 466 0
 1105 0002 0920     		movs	r0, #9
 460:../src/hw_config.c **** {
 1106              		.loc 1 460 0
 1107 0004 85B0     		sub	sp, sp, #20
 1108              	.LCFI13:
 1109              		.cfi_def_cfa_offset 32
 1110              		.loc 1 466 0
 1111 0006 0121     		movs	r1, #1
 1112 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 1113              	.LVL89:
 467:../src/hw_config.c **** 
 468:../src/hw_config.c **** 	/* Configure CC3000_WIFI pins: Interrupt */
 469:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_INT_PIN;
 1114              		.loc 1 469 0
 1115 000c 4FF40064 		mov	r4, #2048
 470:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 1116              		.loc 1 470 0
 1117 0010 4823     		movs	r3, #72
 471:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_INT_GPIO_PORT, &GPIO_InitStructure);
 1118              		.loc 1 471 0
 1119 0012 6946     		mov	r1, sp
 1120 0014 1448     		ldr	r0, .L54
 470:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
 1121              		.loc 1 470 0
 1122 0016 8DF80330 		strb	r3, [sp, #3]
 469:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_INT_PIN;
 1123              		.loc 1 469 0
 1124 001a ADF80040 		strh	r4, [sp, #0]	@ movhi
 1125              		.loc 1 471 0
 1126 001e FFF7FEFF 		bl	GPIO_Init
 1127              	.LVL90:
 472:../src/hw_config.c **** 
 473:../src/hw_config.c **** 	/* Select the CC3000_WIFI_INT GPIO pin used as EXTI Line */
 474:../src/hw_config.c **** 	GPIO_EXTILineConfig(CC3000_WIFI_INT_EXTI_PORT_SOURCE, CC3000_WIFI_INT_EXTI_PIN_SOURCE );
 1128              		.loc 1 474 0
 1129 0022 0B21     		movs	r1, #11
 1130 0024 0120     		movs	r0, #1
 1131 0026 FFF7FEFF 		bl	GPIO_EXTILineConfig
 1132              	.LVL91:
 475:../src/hw_config.c **** 
 476:../src/hw_config.c **** 	/* Clear the EXTI line pending flag */
 477:../src/hw_config.c **** 	EXTI_ClearFlag(CC3000_WIFI_INT_EXTI_LINE );
 1133              		.loc 1 477 0
 1134 002a 2046     		mov	r0, r4
 1135 002c FFF7FEFF 		bl	EXTI_ClearFlag
 1136              	.LVL92:
 478:../src/hw_config.c **** 
 479:../src/hw_config.c **** 	/* Configure and Enable CC3000_WIFI_INT EXTI line */
 480:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 481:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 482:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 1137              		.loc 1 482 0
 1138 0030 0C20     		movs	r0, #12
 480:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 1139              		.loc 1 480 0
 1140 0032 0294     		str	r4, [sp, #8]
 481:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 1141              		.loc 1 481 0
 1142 0034 0025     		movs	r5, #0
 483:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 1143              		.loc 1 483 0
 1144 0036 0124     		movs	r4, #1
 482:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Falling;
 1145              		.loc 1 482 0
 1146 0038 8DF80D00 		strb	r0, [sp, #13]
 484:../src/hw_config.c **** 	EXTI_Init(&EXTI_InitStructure);
 1147              		.loc 1 484 0
 1148 003c 02A8     		add	r0, sp, #8
 481:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Mode = EXTI_Mode_Interrupt;
 1149              		.loc 1 481 0
 1150 003e 8DF80C50 		strb	r5, [sp, #12]
 483:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_LineCmd = ENABLE;
 1151              		.loc 1 483 0
 1152 0042 8DF80E40 		strb	r4, [sp, #14]
 1153              		.loc 1 484 0
 1154 0046 FFF7FEFF 		bl	EXTI_Init
 1155              	.LVL93:
 485:../src/hw_config.c **** 
 486:../src/hw_config.c **** 	/* Enable and set CC3000_WIFI_INT EXTI Interrupt to the lowest priority */
 487:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 1156              		.loc 1 487 0
 1157 004a 2821     		movs	r1, #40
 488:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 489:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 490:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 491:../src/hw_config.c **** 	NVIC_Init(&NVIC_InitStructure);
 1158              		.loc 1 491 0
 1159 004c 01A8     		add	r0, sp, #4
 487:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 1160              		.loc 1 487 0
 1161 004e 8DF80410 		strb	r1, [sp, #4]
 488:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0x00;
 1162              		.loc 1 488 0
 1163 0052 8DF80550 		strb	r5, [sp, #5]
 489:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0x01;
 1164              		.loc 1 489 0
 1165 0056 8DF80640 		strb	r4, [sp, #6]
 490:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 1166              		.loc 1 490 0
 1167 005a 8DF80740 		strb	r4, [sp, #7]
 1168              		.loc 1 491 0
 1169 005e FFF7FEFF 		bl	NVIC_Init
 1170              	.LVL94:
 492:../src/hw_config.c **** }
 1171              		.loc 1 492 0
 1172 0062 05B0     		add	sp, sp, #20
 1173 0064 30BD     		pop	{r4, r5, pc}
 1174              	.L55:
 1175 0066 00BF     		.align	2
 1176              	.L54:
 1177 0068 000C0140 		.word	1073810432
 1178              		.cfi_endproc
 1179              	.LFE72:
 1181              		.section	.text.CC3000_Interrupt_Disable,"ax",%progbits
 1182              		.align	1
 1183              		.global	CC3000_Interrupt_Disable
 1184              		.thumb
 1185              		.thumb_func
 1187              	CC3000_Interrupt_Disable:
 1188              	.LFB73:
 493:../src/hw_config.c **** 
 494:../src/hw_config.c **** void CC3000_Interrupt_Disable(void)
 495:../src/hw_config.c **** {
 1189              		.loc 1 495 0
 1190              		.cfi_startproc
 1191              		@ args = 0, pretend = 0, frame = 16
 1192              		@ frame_needed = 0, uses_anonymous_args = 0
 1193 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1194              	.LCFI14:
 1195              		.cfi_def_cfa_offset 24
 1196              		.cfi_offset 0, -24
 1197              		.cfi_offset 1, -20
 1198              		.cfi_offset 2, -16
 1199              		.cfi_offset 3, -12
 1200              		.cfi_offset 4, -8
 1201              		.cfi_offset 14, -4
 496:../src/hw_config.c **** 	EXTI_InitTypeDef EXTI_InitStructure;
 497:../src/hw_config.c **** 	NVIC_InitTypeDef NVIC_InitStructure;
 498:../src/hw_config.c **** 
 499:../src/hw_config.c **** 	/* Disable CC3000_WIFI_INT EXTI Interrupt */
 500:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 1202              		.loc 1 500 0
 1203 0002 2823     		movs	r3, #40
 501:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 1204              		.loc 1 501 0
 1205 0004 0024     		movs	r4, #0
 502:../src/hw_config.c **** 	NVIC_Init(&NVIC_InitStructure);
 1206              		.loc 1 502 0
 1207 0006 01A8     		add	r0, sp, #4
 500:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannel = CC3000_WIFI_INT_EXTI_IRQn;
 1208              		.loc 1 500 0
 1209 0008 8DF80430 		strb	r3, [sp, #4]
 501:../src/hw_config.c **** 	NVIC_InitStructure.NVIC_IRQChannelCmd = DISABLE;
 1210              		.loc 1 501 0
 1211 000c 8DF80740 		strb	r4, [sp, #7]
 1212              		.loc 1 502 0
 1213 0010 FFF7FEFF 		bl	NVIC_Init
 1214              	.LVL95:
 503:../src/hw_config.c **** 
 504:../src/hw_config.c **** 	/* Disable CC3000_WIFI_INT EXTI line */
 505:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_Line = CC3000_WIFI_INT_EXTI_LINE;
 1215              		.loc 1 505 0
 1216 0014 4FF40060 		mov	r0, #2048
 1217 0018 0290     		str	r0, [sp, #8]
 506:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 507:../src/hw_config.c **** 	EXTI_Init(&EXTI_InitStructure);
 1218              		.loc 1 507 0
 1219 001a 02A8     		add	r0, sp, #8
 506:../src/hw_config.c **** 	EXTI_InitStructure.EXTI_LineCmd = DISABLE;
 1220              		.loc 1 506 0
 1221 001c 8DF80E40 		strb	r4, [sp, #14]
 1222              		.loc 1 507 0
 1223 0020 FFF7FEFF 		bl	EXTI_Init
 1224              	.LVL96:
 508:../src/hw_config.c **** }
 1225              		.loc 1 508 0
 1226 0024 1FBD     		pop	{r0, r1, r2, r3, r4, pc}
 1227              		.cfi_endproc
 1228              	.LFE73:
 1230              		.section	.text.CC3000_Write_Enable_Pin,"ax",%progbits
 1231              		.align	1
 1232              		.global	CC3000_Write_Enable_Pin
 1233              		.thumb
 1234              		.thumb_func
 1236              	CC3000_Write_Enable_Pin:
 1237              	.LFB74:
 509:../src/hw_config.c **** 
 510:../src/hw_config.c **** void CC3000_Write_Enable_Pin(unsigned char val)
 511:../src/hw_config.c **** {
 1238              		.loc 1 511 0
 1239              		.cfi_startproc
 1240              		@ args = 0, pretend = 0, frame = 0
 1241              		@ frame_needed = 0, uses_anonymous_args = 0
 1242              		@ link register save eliminated.
 1243              	.LVL97:
 512:../src/hw_config.c **** 	/* Set WLAN Enable/Disable */
 513:../src/hw_config.c **** 	if (val != WLAN_DISABLE)
 1244              		.loc 1 513 0
 1245 0000 20B1     		cbz	r0, .L58
 514:../src/hw_config.c **** 	{
 515:../src/hw_config.c **** 		GPIO_SetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 1246              		.loc 1 515 0
 1247 0002 0548     		ldr	r0, .L59
 1248              	.LVL98:
 1249 0004 4FF48071 		mov	r1, #256
 516:../src/hw_config.c **** 	}
 517:../src/hw_config.c **** 	else
 518:../src/hw_config.c **** 	{
 519:../src/hw_config.c **** 		GPIO_ResetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 520:../src/hw_config.c **** 	}
 521:../src/hw_config.c **** }
 1250              		.loc 1 521 0
 515:../src/hw_config.c **** 		GPIO_SetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 1251              		.loc 1 515 0
 1252 0008 FFF7FEBF 		b	GPIO_SetBits
 1253              	.LVL99:
 1254              	.L58:
 519:../src/hw_config.c **** 		GPIO_ResetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 1255              		.loc 1 519 0
 1256 000c 0248     		ldr	r0, .L59
 1257              	.LVL100:
 1258 000e 4FF48071 		mov	r1, #256
 1259              		.loc 1 521 0
 519:../src/hw_config.c **** 		GPIO_ResetBits(CC3000_WIFI_EN_GPIO_PORT, CC3000_WIFI_EN_PIN );
 1260              		.loc 1 519 0
 1261 0012 FFF7FEBF 		b	GPIO_ResetBits
 1262              	.LVL101:
 1263              	.L60:
 1264 0016 00BF     		.align	2
 1265              	.L59:
 1266 0018 000C0140 		.word	1073810432
 1267              		.cfi_endproc
 1268              	.LFE74:
 1270              		.section	.text.CC3000_WIFI_Init,"ax",%progbits
 1271              		.align	1
 1272              		.global	CC3000_WIFI_Init
 1273              		.thumb
 1274              		.thumb_func
 1276              	CC3000_WIFI_Init:
 1277              	.LFB66:
 306:../src/hw_config.c **** {
 1278              		.loc 1 306 0
 1279              		.cfi_startproc
 1280              		@ args = 0, pretend = 0, frame = 8
 1281              		@ frame_needed = 0, uses_anonymous_args = 0
 1282 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 1283              	.LCFI15:
 1284              		.cfi_def_cfa_offset 24
 1285              		.cfi_offset 0, -24
 1286              		.cfi_offset 1, -20
 1287              		.cfi_offset 2, -16
 1288              		.cfi_offset 4, -12
 1289              		.cfi_offset 5, -8
 1290              		.cfi_offset 14, -4
 316:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_CS_GPIO_PORT, &GPIO_InitStructure);
 1291              		.loc 1 316 0
 1292 0002 114C     		ldr	r4, .L62
 310:../src/hw_config.c **** 	RCC_APB2PeriphClockCmd(CC3000_WIFI_CS_GPIO_CLK | CC3000_WIFI_EN_GPIO_CLK, ENABLE);
 1293              		.loc 1 310 0
 1294 0004 0820     		movs	r0, #8
 1295 0006 0121     		movs	r1, #1
 1296 0008 FFF7FEFF 		bl	RCC_APB2PeriphClockCmd
 1297              	.LVL102:
 315:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1298              		.loc 1 315 0
 1299 000c 1020     		movs	r0, #16
 314:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1300              		.loc 1 314 0
 1301 000e 0323     		movs	r3, #3
 313:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_CS_PIN;
 1302              		.loc 1 313 0
 1303 0010 4FF48055 		mov	r5, #4096
 315:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
 1304              		.loc 1 315 0
 1305 0014 8DF80700 		strb	r0, [sp, #7]
 316:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_CS_GPIO_PORT, &GPIO_InitStructure);
 1306              		.loc 1 316 0
 1307 0018 01A9     		add	r1, sp, #4
 1308 001a 2046     		mov	r0, r4
 314:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 1309              		.loc 1 314 0
 1310 001c 8DF80630 		strb	r3, [sp, #6]
 313:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_CS_PIN;
 1311              		.loc 1 313 0
 1312 0020 ADF80450 		strh	r5, [sp, #4]	@ movhi
 316:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_CS_GPIO_PORT, &GPIO_InitStructure);
 1313              		.loc 1 316 0
 1314 0024 FFF7FEFF 		bl	GPIO_Init
 1315              	.LVL103:
 319:../src/hw_config.c **** 	CC3000_CS_HIGH();
 1316              		.loc 1 319 0
 1317 0028 2046     		mov	r0, r4
 1318 002a 2946     		mov	r1, r5
 1319 002c FFF7FEFF 		bl	GPIO_SetBits
 1320              	.LVL104:
 322:../src/hw_config.c **** 	GPIO_InitStructure.GPIO_Pin = CC3000_WIFI_EN_PIN;
 1321              		.loc 1 322 0
 1322 0030 4FF48071 		mov	r1, #256
 1323 0034 ADF80410 		strh	r1, [sp, #4]	@ movhi
 323:../src/hw_config.c **** 	GPIO_Init(CC3000_WIFI_EN_GPIO_PORT, &GPIO_InitStructure);
 1324              		.loc 1 323 0
 1325 0038 2046     		mov	r0, r4
 1326 003a 01A9     		add	r1, sp, #4
 1327 003c FFF7FEFF 		bl	GPIO_Init
 1328              	.LVL105:
 326:../src/hw_config.c **** 	CC3000_Write_Enable_Pin(WLAN_DISABLE);
 1329              		.loc 1 326 0
 1330 0040 0020     		movs	r0, #0
 1331 0042 FFF7FEFF 		bl	CC3000_Write_Enable_Pin
 1332              	.LVL106:
 327:../src/hw_config.c **** }
 1333              		.loc 1 327 0
 1334 0046 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 1335              	.L63:
 1336              		.align	2
 1337              	.L62:
 1338 0048 000C0140 		.word	1073810432
 1339              		.cfi_endproc
 1340              	.LFE66:
 1342              		.global	BUTTON_EXTI_TRIGGER
 1343              		.global	BUTTON_IRQn
 1344              		.global	BUTTON_PIN_SOURCE
 1345              		.global	BUTTON_PORT_SOURCE
 1346              		.global	BUTTON_EXTI_LINE
 1347              		.global	BUTTON_DEBOUNCED
 1348              		.global	BUTTON_GPIO_MODE
 1349              		.global	BUTTON_CLK
 1350              		.global	BUTTON_PIN
 1351              		.global	BUTTON_PORT
 1352              		.global	LED_CLK
 1353              		.global	LED_PIN
 1354              		.global	LED_PORT
 1355              		.section	.rodata
 1356              		.align	2
 1357              		.set	.LANCHOR0,. + 0
 1360              	LED_CLK:
 1361 0000 04000000 		.word	4
 1362 0004 04000000 		.word	4
 1365              	LED_PIN:
 1366 0008 0001     		.short	256
 1367 000a 0002     		.short	512
 1370              	BUTTON_PORT_SOURCE:
 1371 000c 00000000 		.space	4
 1374              	BUTTON_PIN_SOURCE:
 1375 0010 0A00     		.short	10
 1376 0012 0000     		.short	0
 1379              	BUTTON_EXTI_LINE:
 1380 0014 0004     		.short	1024
 1381 0016 0000     		.short	0
 1384              	BUTTON_CLK:
 1385 0018 04000000 		.word	4
 1386 001c 00000000 		.word	0
 1389              	BUTTON_PIN:
 1390 0020 0004     		.short	1024
 1391 0022 0000     		.short	0
 1394              	BUTTON_IRQn:
 1395 0024 2800     		.short	40
 1396 0026 0000     		.short	0
 1397              		.data
 1398              		.align	2
 1399              		.set	.LANCHOR1,. + 0
 1402              	LED_PORT:
 1403 0000 00080140 		.word	1073809408
 1404 0004 00080140 		.word	1073809408
 1407              	BUTTON_EXTI_TRIGGER:
 1408 0008 0C       		.byte	12
 1409 0009 00       		.byte	0
 1412              	BUTTON_GPIO_MODE:
 1413 000a 48       		.byte	72
 1414 000b 00       		.byte	0
 1417              	BUTTON_PORT:
 1418 000c 00080140 		.word	1073809408
 1419 0010 00000000 		.word	0
 1420              		.bss
 1421              		.set	.LANCHOR2,. + 0
 1424              	BUTTON_DEBOUNCED:
 1425 0000 0000     		.space	2
 1426              		.text
 1427              	.Letext0:
 1428              		.file 3 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Device/ST/STM32F10x/Include
 1429              		.file 4 "/usr/local/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
 1430              		.file 5 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/st
 1431              		.file 6 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/st
 1432              		.file 7 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/st
 1433              		.file 8 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/st
 1434              		.file 9 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/st
 1435              		.file 10 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/m
 1436              		.file 11 "/Users/zac/code/spark/cc3000-patch-programmer/inc/hw_config.h"
 1437              		.file 12 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/CMSIS/Device/ST/STM32F10x/Includ
 1438              		.file 13 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/s
 1439              		.file 14 "/Users/zac/code/spark/cc3000-patch-programmer/libraries/STM32F10x_StdPeriph_Driver/inc/s
DEFINED SYMBOLS
                            *ABS*:0000000000000000 hw_config.c
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:19     .text.NVIC_Configuration:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:24     .text.NVIC_Configuration:0000000000000000 NVIC_Configuration
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:42     .text.LED_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:47     .text.LED_Init:0000000000000000 LED_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:100    .text.LED_Init:0000000000000034 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:106    .text.LED_On:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:111    .text.LED_On:0000000000000000 LED_On
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:131    .text.LED_On:0000000000000014 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:137    .text.LED_Off:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:142    .text.LED_Off:0000000000000000 LED_Off
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:162    .text.LED_Off:0000000000000014 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:168    .text.LED_Toggle:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:173    .text.LED_Toggle:0000000000000000 LED_Toggle
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:195    .text.LED_Toggle:0000000000000018 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:201    .text.BUTTON_EXTI_Config:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:206    .text.BUTTON_EXTI_Config:0000000000000000 BUTTON_EXTI_Config
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:267    .text.BUTTON_EXTI_Config:000000000000003c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:273    .text.BUTTON_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:278    .text.BUTTON_Init:0000000000000000 BUTTON_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:445    .text.BUTTON_Init:00000000000000dc $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:454    .text.Set_System:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:459    .text.Set_System:0000000000000000 Set_System
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:599    .text.Set_System:000000000000008c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:608    .text.BUTTON_GetState:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:613    .text.BUTTON_GetState:0000000000000000 BUTTON_GetState
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:636    .text.BUTTON_GetState:0000000000000014 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:642    .text.BUTTON_GetDebouncedState:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:647    .text.BUTTON_GetDebouncedState:0000000000000000 BUTTON_GetDebouncedState
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:671    .text.BUTTON_GetDebouncedState:0000000000000010 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:676    .text.CC3000_SPI_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:681    .text.CC3000_SPI_Init:0000000000000000 CC3000_SPI_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:789    .text.CC3000_SPI_Init:0000000000000098 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:795    .text.CC3000_DMA_Config:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:800    .text.CC3000_DMA_Config:0000000000000000 CC3000_DMA_Config
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:901    .text.CC3000_DMA_Config:000000000000005c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:908    .text.CC3000_SPI_DMA_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:913    .text.CC3000_SPI_DMA_Init:0000000000000000 CC3000_SPI_DMA_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1005   .text.CC3000_SPI_DMA_Init:0000000000000074 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1014   .text.CC3000_SPI_DMA_Channels:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1019   .text.CC3000_SPI_DMA_Channels:0000000000000000 CC3000_SPI_DMA_Channels
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1050   .text.CC3000_SPI_DMA_Channels:0000000000000018 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1056   .text.CC3000_Read_Interrupt_Pin:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1061   .text.CC3000_Read_Interrupt_Pin:0000000000000000 CC3000_Read_Interrupt_Pin
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1082   .text.CC3000_Read_Interrupt_Pin:0000000000000010 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1087   .text.CC3000_Interrupt_Enable:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1092   .text.CC3000_Interrupt_Enable:0000000000000000 CC3000_Interrupt_Enable
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1177   .text.CC3000_Interrupt_Enable:0000000000000068 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1182   .text.CC3000_Interrupt_Disable:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1187   .text.CC3000_Interrupt_Disable:0000000000000000 CC3000_Interrupt_Disable
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1231   .text.CC3000_Write_Enable_Pin:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1236   .text.CC3000_Write_Enable_Pin:0000000000000000 CC3000_Write_Enable_Pin
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1266   .text.CC3000_Write_Enable_Pin:0000000000000018 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1271   .text.CC3000_WIFI_Init:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1276   .text.CC3000_WIFI_Init:0000000000000000 CC3000_WIFI_Init
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1338   .text.CC3000_WIFI_Init:0000000000000048 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1407   .data:0000000000000008 BUTTON_EXTI_TRIGGER
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1394   .rodata:0000000000000024 BUTTON_IRQn
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1374   .rodata:0000000000000010 BUTTON_PIN_SOURCE
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1370   .rodata:000000000000000c BUTTON_PORT_SOURCE
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1379   .rodata:0000000000000014 BUTTON_EXTI_LINE
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1424   .bss:0000000000000000 BUTTON_DEBOUNCED
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1412   .data:000000000000000a BUTTON_GPIO_MODE
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1384   .rodata:0000000000000018 BUTTON_CLK
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1389   .rodata:0000000000000020 BUTTON_PIN
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1417   .data:000000000000000c BUTTON_PORT
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1360   .rodata:0000000000000000 LED_CLK
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1365   .rodata:0000000000000008 LED_PIN
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1402   .data:0000000000000000 LED_PORT
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1356   .rodata:0000000000000000 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1398   .data:0000000000000000 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//ccbAWwuw.s:1425   .bss:0000000000000000 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.94ea818a60f77b04fe5add16507b1dca
                           .group:0000000000000000 wm4.platform_config.h.13.537ea5f27be1e1b5a05f1a7b76278f84
                           .group:0000000000000000 wm4.stm32f10x.h.57.69ab29c83f735418a543aa508b559235
                           .group:0000000000000000 wm4.core_cm3.h.32.8e21fbd14bb96c2b40e026c4d2c8fe1f
                           .group:0000000000000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:0000000000000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:0000000000000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:0000000000000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:0000000000000000 wm4.stdint.h.20.54ad762faa59e3c05491630641c8d8bf
                           .group:0000000000000000 wm4.core_cmInstr.h.25.d8165482ef3061013a2fc83e2d85f3d9
                           .group:0000000000000000 wm4.core_cm3.h.129.e08b7204181ea22e6a9fa84cb9ad0924
                           .group:0000000000000000 wm4.stm32f10x.h.532.91bd57525f6c583f00129a351847d405
                           .group:0000000000000000 wm4.stm32f10x_bkp.h.64.07c104f22a887098a9ccb01471e84bcc
                           .group:0000000000000000 wm4.stm32f10x_dma.h.31.ef16218235edc52b414c0353f44b4bf0
                           .group:0000000000000000 wm4.stm32f10x_exti.h.31.b25bcb4f1a2daad39d2d7dfa4e901646
                           .group:0000000000000000 wm4.stm32f10x_flash.h.31.0203bc95b65c5396b67991e07a675efb
                           .group:0000000000000000 wm4.stm32f10x_gpio.h.31.0a32659dbac1fc1055c7cbdc248963be
                           .group:0000000000000000 wm4.stm32f10x_pwr.h.31.9168b6921e0cf03b467c7ed90861c701
                           .group:0000000000000000 wm4.stm32f10x_rcc.h.31.2ee3219a25ef4ced658f2fe9d8cd94aa
                           .group:0000000000000000 wm4.stm32f10x_spi.h.31.d2f6e4626887cabe8c98f3a185590a36
                           .group:0000000000000000 wm4.stm32f10x_tim.h.31.6c06f7f26e0864f9cd59597f46ca2c7c
                           .group:0000000000000000 wm4.misc.h.31.a89fba2040036f6f8c835a78a213e0cd
                           .group:0000000000000000 wm4.stm32f10x.h.8356.9fd2fa84655112ac7dfc5c88beeb383d
                           .group:0000000000000000 wm4.platform_config.h.40.7acc7b4edf71863be31619c6a2d65803
                           .group:0000000000000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:0000000000000000 wm4.stddef.h.187.40b3a084f9bc2c020a9e00b9eabe9c14
                           .group:0000000000000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:0000000000000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.50.f5923f1950ced340a337f4676566f65a
                           .group:0000000000000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:0000000000000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:0000000000000000 wm4.cc3000_common.h.58.c968e6f087d13da99b8c4c23daaad62a
                           .group:0000000000000000 wm4.hw_config.h.45.70fd431154434a3dd8dba02a13e78227

UNDEFINED SYMBOLS
NVIC_PriorityGroupConfig
RCC_APB2PeriphClockCmd
GPIO_Init
GPIO_EXTILineConfig
EXTI_ClearFlag
EXTI_Init
TIM_TimeBaseStructInit
TIM_TimeBaseInit
TIM_SelectOnePulseMode
TIM_ClearITPendingBit
TIM_ITConfig
NVIC_Init
SystemCoreClock
RCC_APB1PeriphClockCmd
PWR_BackupAccessCmd
GPIO_ReadInputDataBit
SPI_Init
RCC_AHBPeriphClockCmd
DMA_DeInit
DMA_Init
DMA_ITConfig
SPI_I2S_DMACmd
SPI_Cmd
DMA_Cmd
wlan_rx_buffer
wlan_tx_buffer
GPIO_SetBits
GPIO_ResetBits

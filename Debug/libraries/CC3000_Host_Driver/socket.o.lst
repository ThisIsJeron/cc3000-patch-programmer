   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 4
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.file	"socket.c"
  15              		.text
  16              	.Ltext0:
  17              		.cfi_sections	.debug_frame
  18              		.section	.text.HostFlowControlConsumeBuff,"ax",%progbits
  19              		.align	1
  20              		.global	HostFlowControlConsumeBuff
  21              		.thumb
  22              		.thumb_func
  24              	HostFlowControlConsumeBuff:
  25              	.LFB0:
  26              		.file 1 "../libraries/CC3000_Host_Driver/socket.c"
   1:../libraries/CC3000_Host_Driver/socket.c **** /*****************************************************************************
   2:../libraries/CC3000_Host_Driver/socket.c **** *
   3:../libraries/CC3000_Host_Driver/socket.c **** *  socket.c  - CC3000 Host Driver Implementation.
   4:../libraries/CC3000_Host_Driver/socket.c **** *  Copyright (C) 2011 Texas Instruments Incorporated - http://www.ti.com/
   5:../libraries/CC3000_Host_Driver/socket.c **** *
   6:../libraries/CC3000_Host_Driver/socket.c **** *  Redistribution and use in source and binary forms, with or without
   7:../libraries/CC3000_Host_Driver/socket.c **** *  modification, are permitted provided that the following conditions
   8:../libraries/CC3000_Host_Driver/socket.c **** *  are met:
   9:../libraries/CC3000_Host_Driver/socket.c **** *
  10:../libraries/CC3000_Host_Driver/socket.c **** *    Redistributions of source code must retain the above copyright
  11:../libraries/CC3000_Host_Driver/socket.c **** *    notice, this list of conditions and the following disclaimer.
  12:../libraries/CC3000_Host_Driver/socket.c **** *
  13:../libraries/CC3000_Host_Driver/socket.c **** *    Redistributions in binary form must reproduce the above copyright
  14:../libraries/CC3000_Host_Driver/socket.c **** *    notice, this list of conditions and the following disclaimer in the
  15:../libraries/CC3000_Host_Driver/socket.c **** *    documentation and/or other materials provided with the   
  16:../libraries/CC3000_Host_Driver/socket.c **** *    distribution.
  17:../libraries/CC3000_Host_Driver/socket.c **** *
  18:../libraries/CC3000_Host_Driver/socket.c **** *    Neither the name of Texas Instruments Incorporated nor the names of
  19:../libraries/CC3000_Host_Driver/socket.c **** *    its contributors may be used to endorse or promote products derived
  20:../libraries/CC3000_Host_Driver/socket.c **** *    from this software without specific prior written permission.
  21:../libraries/CC3000_Host_Driver/socket.c **** *
  22:../libraries/CC3000_Host_Driver/socket.c **** *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS 
  23:../libraries/CC3000_Host_Driver/socket.c **** *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT 
  24:../libraries/CC3000_Host_Driver/socket.c **** *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
  25:../libraries/CC3000_Host_Driver/socket.c **** *  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT 
  26:../libraries/CC3000_Host_Driver/socket.c **** *  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
  27:../libraries/CC3000_Host_Driver/socket.c **** *  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT 
  28:../libraries/CC3000_Host_Driver/socket.c **** *  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
  29:../libraries/CC3000_Host_Driver/socket.c **** *  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
  30:../libraries/CC3000_Host_Driver/socket.c **** *  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT 
  31:../libraries/CC3000_Host_Driver/socket.c **** *  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE 
  32:../libraries/CC3000_Host_Driver/socket.c **** *  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
  33:../libraries/CC3000_Host_Driver/socket.c **** *
  34:../libraries/CC3000_Host_Driver/socket.c **** *****************************************************************************/
  35:../libraries/CC3000_Host_Driver/socket.c **** 
  36:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
  37:../libraries/CC3000_Host_Driver/socket.c **** //
  38:../libraries/CC3000_Host_Driver/socket.c **** //! \addtogroup socket_api
  39:../libraries/CC3000_Host_Driver/socket.c **** //! @{
  40:../libraries/CC3000_Host_Driver/socket.c **** //
  41:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
  42:../libraries/CC3000_Host_Driver/socket.c **** 
  43:../libraries/CC3000_Host_Driver/socket.c **** #include <stdio.h>
  44:../libraries/CC3000_Host_Driver/socket.c **** #include <string.h>
  45:../libraries/CC3000_Host_Driver/socket.c **** #include <stdlib.h>
  46:../libraries/CC3000_Host_Driver/socket.c **** #include "hci.h"
  47:../libraries/CC3000_Host_Driver/socket.c **** #include "socket.h"
  48:../libraries/CC3000_Host_Driver/socket.c **** #include "evnt_handler.h"
  49:../libraries/CC3000_Host_Driver/socket.c **** #include "netapp.h"
  50:../libraries/CC3000_Host_Driver/socket.c **** 
  51:../libraries/CC3000_Host_Driver/socket.c **** 
  52:../libraries/CC3000_Host_Driver/socket.c **** 
  53:../libraries/CC3000_Host_Driver/socket.c **** //Enable this flag if and only if you must comply with BSD socket 
  54:../libraries/CC3000_Host_Driver/socket.c **** //close() function
  55:../libraries/CC3000_Host_Driver/socket.c **** #ifdef _API_USE_BSD_CLOSE
  56:../libraries/CC3000_Host_Driver/socket.c ****    #define close(sd) closesocket(sd)
  57:../libraries/CC3000_Host_Driver/socket.c **** #endif
  58:../libraries/CC3000_Host_Driver/socket.c **** 
  59:../libraries/CC3000_Host_Driver/socket.c **** //Enable this flag if and only if you must comply with BSD socket read() and 
  60:../libraries/CC3000_Host_Driver/socket.c **** //write() functions
  61:../libraries/CC3000_Host_Driver/socket.c **** #ifdef _API_USE_BSD_READ_WRITE
  62:../libraries/CC3000_Host_Driver/socket.c ****               #define read(sd, buf, len, flags) recv(sd, buf, len, flags)
  63:../libraries/CC3000_Host_Driver/socket.c ****               #define write(sd, buf, len, flags) send(sd, buf, len, flags)
  64:../libraries/CC3000_Host_Driver/socket.c **** #endif
  65:../libraries/CC3000_Host_Driver/socket.c **** 
  66:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_OPEN_PARAMS_LEN				(12)
  67:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_CLOSE_PARAMS_LEN				(4)
  68:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_ACCEPT_PARAMS_LEN			(4)
  69:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_BIND_PARAMS_LEN				(20)
  70:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_LISTEN_PARAMS_LEN			(8)
  71:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_GET_HOST_BY_NAME_PARAMS_LEN	(9)
  72:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_CONNECT_PARAMS_LEN			(20)
  73:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_SELECT_PARAMS_LEN			(44)
  74:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_SET_SOCK_OPT_PARAMS_LEN		(20)
  75:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_GET_SOCK_OPT_PARAMS_LEN		(12)
  76:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_RECV_FROM_PARAMS_LEN			(12)
  77:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_SENDTO_PARAMS_LEN			(24)
  78:../libraries/CC3000_Host_Driver/socket.c **** #define SOCKET_MDNS_ADVERTISE_PARAMS_LEN	(12)
  79:../libraries/CC3000_Host_Driver/socket.c **** 
  80:../libraries/CC3000_Host_Driver/socket.c **** 
  81:../libraries/CC3000_Host_Driver/socket.c **** // The legnth of arguments for the SEND command: sd + buff_offset + len + flags, 
  82:../libraries/CC3000_Host_Driver/socket.c **** // while size of each parameter is 32 bit - so the total length is 16 bytes;
  83:../libraries/CC3000_Host_Driver/socket.c **** 
  84:../libraries/CC3000_Host_Driver/socket.c **** #define HCI_CMND_SEND_ARG_LENGTH	(16)
  85:../libraries/CC3000_Host_Driver/socket.c **** 
  86:../libraries/CC3000_Host_Driver/socket.c **** 
  87:../libraries/CC3000_Host_Driver/socket.c **** #define SELECT_TIMEOUT_MIN_MICRO_SECONDS  5000
  88:../libraries/CC3000_Host_Driver/socket.c **** 
  89:../libraries/CC3000_Host_Driver/socket.c **** #define HEADERS_SIZE_DATA       (SPI_HEADER_SIZE + 5)
  90:../libraries/CC3000_Host_Driver/socket.c **** 
  91:../libraries/CC3000_Host_Driver/socket.c **** #define SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE  (SPI_HEADER_SIZE + SIMPLE_LINK_HCI_CMND_HEADER_
  92:../libraries/CC3000_Host_Driver/socket.c **** 
  93:../libraries/CC3000_Host_Driver/socket.c **** #define MDNS_DEVICE_SERVICE_MAX_LENGTH 	(32)
  94:../libraries/CC3000_Host_Driver/socket.c **** 
  95:../libraries/CC3000_Host_Driver/socket.c **** 
  96:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
  97:../libraries/CC3000_Host_Driver/socket.c **** //
  98:../libraries/CC3000_Host_Driver/socket.c **** //! HostFlowControlConsumeBuff
  99:../libraries/CC3000_Host_Driver/socket.c **** //!
 100:../libraries/CC3000_Host_Driver/socket.c **** //!  @param  sd  socket descriptor
 101:../libraries/CC3000_Host_Driver/socket.c **** //!
 102:../libraries/CC3000_Host_Driver/socket.c **** //!  @return 0 in case there are buffers available, 
 103:../libraries/CC3000_Host_Driver/socket.c **** //!          -1 in case of bad socket
 104:../libraries/CC3000_Host_Driver/socket.c **** //!          -2 if there are no free buffers present (only when 
 105:../libraries/CC3000_Host_Driver/socket.c **** //!          SEND_NON_BLOCKING is enabled)
 106:../libraries/CC3000_Host_Driver/socket.c **** //!
 107:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  if SEND_NON_BLOCKING not define - block until have free buffer 
 108:../libraries/CC3000_Host_Driver/socket.c **** //!          becomes available, else return immediately  with correct status 
 109:../libraries/CC3000_Host_Driver/socket.c **** //!          regarding the buffers available.
 110:../libraries/CC3000_Host_Driver/socket.c **** //
 111:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 112:../libraries/CC3000_Host_Driver/socket.c **** int
 113:../libraries/CC3000_Host_Driver/socket.c **** HostFlowControlConsumeBuff(int sd)
 114:../libraries/CC3000_Host_Driver/socket.c **** {
  27              		.loc 1 114 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 38B5     		push	{r3, r4, r5, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 16
  35              		.cfi_offset 3, -16
  36              		.cfi_offset 4, -12
  37              		.cfi_offset 5, -8
  38              		.cfi_offset 14, -4
  39 0002 0546     		mov	r5, r0
  40              	.LVL1:
  41              	.L4:
 115:../libraries/CC3000_Host_Driver/socket.c **** #ifndef SEND_NON_BLOCKING
 116:../libraries/CC3000_Host_Driver/socket.c **** 	/* wait in busy loop */
 117:../libraries/CC3000_Host_Driver/socket.c **** 	do
 118:../libraries/CC3000_Host_Driver/socket.c **** 	{
 119:../libraries/CC3000_Host_Driver/socket.c **** 		// In case last transmission failed then we will return the last failure 
 120:../libraries/CC3000_Host_Driver/socket.c **** 		// reason here.
 121:../libraries/CC3000_Host_Driver/socket.c **** 		// Note that the buffer will not be allocated in this case
 122:../libraries/CC3000_Host_Driver/socket.c **** 		if (tSLInformation.slTransmitDataError != 0)
  42              		.loc 1 122 0
  43 0004 0E4C     		ldr	r4, .L11
  44 0006 E36A     		ldr	r3, [r4, #44]
  45 0008 4BB1     		cbz	r3, .L2
 123:../libraries/CC3000_Host_Driver/socket.c **** 		{
 124:../libraries/CC3000_Host_Driver/socket.c **** 			errno = tSLInformation.slTransmitDataError;
  46              		.loc 1 124 0
  47 000a FFF7FEFF 		bl	__errno
  48              	.LVL2:
  49 000e E36A     		ldr	r3, [r4, #44]
  50 0010 0360     		str	r3, [r0, #0]
 125:../libraries/CC3000_Host_Driver/socket.c **** 			tSLInformation.slTransmitDataError = 0;
  51              		.loc 1 125 0
  52 0012 0020     		movs	r0, #0
  53 0014 E062     		str	r0, [r4, #44]
 126:../libraries/CC3000_Host_Driver/socket.c **** 			return errno;
  54              		.loc 1 126 0
  55 0016 FFF7FEFF 		bl	__errno
  56              	.LVL3:
  57 001a 0068     		ldr	r0, [r0, #0]
  58 001c 38BD     		pop	{r3, r4, r5, pc}
  59              	.L2:
 127:../libraries/CC3000_Host_Driver/socket.c **** 		}
 128:../libraries/CC3000_Host_Driver/socket.c **** 		
 129:../libraries/CC3000_Host_Driver/socket.c **** 		if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
  60              		.loc 1 129 0
  61 001e 2846     		mov	r0, r5
  62 0020 FFF7FEFF 		bl	get_socket_active_status
  63              	.LVL4:
  64 0024 40B9     		cbnz	r0, .L5
 130:../libraries/CC3000_Host_Driver/socket.c **** 			return -1;
 131:../libraries/CC3000_Host_Driver/socket.c **** 	} while(0 == tSLInformation.usNumberOfFreeBuffers);
  65              		.loc 1 131 0
  66 0026 228E     		ldrh	r2, [r4, #48]
  67 0028 91B2     		uxth	r1, r2
  68 002a 0029     		cmp	r1, #0
  69 002c EAD0     		beq	.L4
 132:../libraries/CC3000_Host_Driver/socket.c **** 	
 133:../libraries/CC3000_Host_Driver/socket.c **** 	tSLInformation.usNumberOfFreeBuffers--;
  70              		.loc 1 133 0
  71 002e 238E     		ldrh	r3, [r4, #48]
  72 0030 5A1E     		subs	r2, r3, #1
  73 0032 91B2     		uxth	r1, r2
  74 0034 2186     		strh	r1, [r4, #48]	@ movhi
 134:../libraries/CC3000_Host_Driver/socket.c **** 	
 135:../libraries/CC3000_Host_Driver/socket.c **** 	return 0;
  75              		.loc 1 135 0
  76 0036 38BD     		pop	{r3, r4, r5, pc}
  77              	.L5:
 130:../libraries/CC3000_Host_Driver/socket.c **** 			return -1;
  78              		.loc 1 130 0
  79 0038 4FF0FF30 		mov	r0, #-1
 136:../libraries/CC3000_Host_Driver/socket.c **** #else
 137:../libraries/CC3000_Host_Driver/socket.c **** 	
 138:../libraries/CC3000_Host_Driver/socket.c **** 	// In case last transmission failed then we will return the last failure 
 139:../libraries/CC3000_Host_Driver/socket.c **** 	// reason here.
 140:../libraries/CC3000_Host_Driver/socket.c **** 	// Note that the buffer will not be allocated in this case
 141:../libraries/CC3000_Host_Driver/socket.c **** 	if (tSLInformation.slTransmitDataError != 0)
 142:../libraries/CC3000_Host_Driver/socket.c **** 	{
 143:../libraries/CC3000_Host_Driver/socket.c **** 		errno = tSLInformation.slTransmitDataError;
 144:../libraries/CC3000_Host_Driver/socket.c **** 		tSLInformation.slTransmitDataError = 0;
 145:../libraries/CC3000_Host_Driver/socket.c **** 		return errno;
 146:../libraries/CC3000_Host_Driver/socket.c **** 	}
 147:../libraries/CC3000_Host_Driver/socket.c **** 	if(SOCKET_STATUS_ACTIVE != get_socket_active_status(sd))
 148:../libraries/CC3000_Host_Driver/socket.c **** 		return -1;
 149:../libraries/CC3000_Host_Driver/socket.c **** 	
 150:../libraries/CC3000_Host_Driver/socket.c **** 	//If there are no available buffers, return -2. It is recommended to use  
 151:../libraries/CC3000_Host_Driver/socket.c **** 	// select or receive to see if there is any buffer occupied with received data
 152:../libraries/CC3000_Host_Driver/socket.c **** 	// If so, call receive() to release the buffer.
 153:../libraries/CC3000_Host_Driver/socket.c **** 	if(0 == tSLInformation.usNumberOfFreeBuffers)
 154:../libraries/CC3000_Host_Driver/socket.c **** 	{
 155:../libraries/CC3000_Host_Driver/socket.c **** 		return -2;
 156:../libraries/CC3000_Host_Driver/socket.c **** 	}
 157:../libraries/CC3000_Host_Driver/socket.c **** 	else
 158:../libraries/CC3000_Host_Driver/socket.c **** 	{
 159:../libraries/CC3000_Host_Driver/socket.c **** 		tSLInformation.usNumberOfFreeBuffers--;
 160:../libraries/CC3000_Host_Driver/socket.c **** 		return 0;
 161:../libraries/CC3000_Host_Driver/socket.c **** 	}
 162:../libraries/CC3000_Host_Driver/socket.c **** #endif
 163:../libraries/CC3000_Host_Driver/socket.c **** }
  80              		.loc 1 163 0
  81 003c 38BD     		pop	{r3, r4, r5, pc}
  82              	.L12:
  83 003e 00BF     		.align	2
  84              	.L11:
  85 0040 00000000 		.word	tSLInformation
  86              		.cfi_endproc
  87              	.LFE0:
  89              		.section	.text.socket,"ax",%progbits
  90              		.align	1
  91              		.global	socket
  92              		.thumb
  93              		.thumb_func
  95              	socket:
  96              	.LFB1:
 164:../libraries/CC3000_Host_Driver/socket.c **** 
 165:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 166:../libraries/CC3000_Host_Driver/socket.c **** //
 167:../libraries/CC3000_Host_Driver/socket.c **** //! socket
 168:../libraries/CC3000_Host_Driver/socket.c **** //!
 169:../libraries/CC3000_Host_Driver/socket.c **** //!  @param  domain    selects the protocol family which will be used for 
 170:../libraries/CC3000_Host_Driver/socket.c **** //!                    communication. On this version only AF_INET is supported
 171:../libraries/CC3000_Host_Driver/socket.c **** //!  @param  type      specifies the communication semantics. On this version 
 172:../libraries/CC3000_Host_Driver/socket.c **** //!                    only SOCK_STREAM, SOCK_DGRAM, SOCK_RAW are supported
 173:../libraries/CC3000_Host_Driver/socket.c **** //!  @param  protocol  specifies a particular protocol to be used with the 
 174:../libraries/CC3000_Host_Driver/socket.c **** //!                    socket IPPROTO_TCP, IPPROTO_UDP or IPPROTO_RAW are 
 175:../libraries/CC3000_Host_Driver/socket.c **** //!                    supported.
 176:../libraries/CC3000_Host_Driver/socket.c **** //!
 177:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  On success, socket handle that is used for consequent socket 
 178:../libraries/CC3000_Host_Driver/socket.c **** //!           operations. On error, -1 is returned.
 179:../libraries/CC3000_Host_Driver/socket.c **** //!
 180:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  create an endpoint for communication
 181:../libraries/CC3000_Host_Driver/socket.c **** //!          The socket function creates a socket that is bound to a specific 
 182:../libraries/CC3000_Host_Driver/socket.c **** //!          transport service provider. This function is called by the 
 183:../libraries/CC3000_Host_Driver/socket.c **** //!          application layer to obtain a socket handle.
 184:../libraries/CC3000_Host_Driver/socket.c **** //
 185:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 186:../libraries/CC3000_Host_Driver/socket.c **** 
 187:../libraries/CC3000_Host_Driver/socket.c **** int
 188:../libraries/CC3000_Host_Driver/socket.c **** socket(long domain, long type, long protocol)
 189:../libraries/CC3000_Host_Driver/socket.c **** {
  97              		.loc 1 189 0
  98              		.cfi_startproc
  99              		@ args = 0, pretend = 0, frame = 8
 100              		@ frame_needed = 0, uses_anonymous_args = 0
 101              	.LVL5:
 102 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 103              	.LCFI1:
 104              		.cfi_def_cfa_offset 32
 105              		.cfi_offset 0, -32
 106              		.cfi_offset 1, -28
 107              		.cfi_offset 2, -24
 108              		.cfi_offset 4, -20
 109              		.cfi_offset 5, -16
 110              		.cfi_offset 6, -12
 111              		.cfi_offset 7, -8
 112              		.cfi_offset 14, -4
 113              		.loc 1 189 0
 114 0002 0346     		mov	r3, r0
 190:../libraries/CC3000_Host_Driver/socket.c **** 	long ret;
 191:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 192:../libraries/CC3000_Host_Driver/socket.c **** 	
 193:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 194:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 115              		.loc 1 194 0
 116 0004 1448     		ldr	r0, .L14
 117              	.LVL6:
 189:../libraries/CC3000_Host_Driver/socket.c **** {
 118              		.loc 1 189 0
 119 0006 0D46     		mov	r5, r1
 120              		.loc 1 194 0
 121 0008 8668     		ldr	r6, [r0, #8]
 122              	.LVL7:
 195:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 196:../libraries/CC3000_Host_Driver/socket.c **** 	
 197:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in HCI packet structure
 198:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, domain);
 123              		.loc 1 198 0
 124 000a 1946     		mov	r1, r3
 125              	.LVL8:
 189:../libraries/CC3000_Host_Driver/socket.c **** {
 126              		.loc 1 189 0
 127 000c 1746     		mov	r7, r2
 193:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 128              		.loc 1 193 0
 129 000e 02AC     		add	r4, sp, #8
 130 0010 4FF0FF32 		mov	r2, #-1
 131              	.LVL9:
 132              		.loc 1 198 0
 133 0014 06F10900 		add	r0, r6, #9
 134              	.LVL10:
 193:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 135              		.loc 1 193 0
 136 0018 44F8042D 		str	r2, [r4, #-4]!
 137              	.LVL11:
 138              		.loc 1 198 0
 139 001c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 140              	.LVL12:
 199:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, type);
 141              		.loc 1 199 0
 142 0020 2946     		mov	r1, r5
 143 0022 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 144              	.LVL13:
 200:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, protocol);
 201:../libraries/CC3000_Host_Driver/socket.c **** 	
 202:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 203:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_SOCKET, ptr, SOCKET_OPEN_PARAMS_LEN);
 145              		.loc 1 203 0
 146 0026 41F20105 		movw	r5, #4097
 147              	.LVL14:
 200:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, protocol);
 148              		.loc 1 200 0
 149 002a 3946     		mov	r1, r7
 150 002c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 151              	.LVL15:
 152              		.loc 1 203 0
 153 0030 0C22     		movs	r2, #12
 154 0032 3146     		mov	r1, r6
 155 0034 2846     		mov	r0, r5
 156 0036 FFF7FEFF 		bl	hci_command_send
 157              	.LVL16:
 204:../libraries/CC3000_Host_Driver/socket.c **** 	
 205:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 206:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_SOCKET, &ret);
 158              		.loc 1 206 0
 159 003a 2146     		mov	r1, r4
 160 003c 2846     		mov	r0, r5
 161 003e FFF7FEFF 		bl	SimpleLinkWaitEvent
 162              	.LVL17:
 207:../libraries/CC3000_Host_Driver/socket.c **** 	
 208:../libraries/CC3000_Host_Driver/socket.c **** 	// Process the event 
 209:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret;
 163              		.loc 1 209 0
 164 0042 FFF7FEFF 		bl	__errno
 165              	.LVL18:
 166 0046 0199     		ldr	r1, [sp, #4]
 167 0048 0160     		str	r1, [r0, #0]
 210:../libraries/CC3000_Host_Driver/socket.c **** 	
 211:../libraries/CC3000_Host_Driver/socket.c **** 	set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
 168              		.loc 1 211 0
 169 004a 0846     		mov	r0, r1
 170 004c 0021     		movs	r1, #0
 171 004e FFF7FEFF 		bl	set_socket_active_status
 172              	.LVL19:
 212:../libraries/CC3000_Host_Driver/socket.c **** 	
 213:../libraries/CC3000_Host_Driver/socket.c **** 	return(ret);
 214:../libraries/CC3000_Host_Driver/socket.c **** }
 173              		.loc 1 214 0
 174 0052 0198     		ldr	r0, [sp, #4]
 175 0054 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 176              	.L15:
 177 0056 00BF     		.align	2
 178              	.L14:
 179 0058 00000000 		.word	tSLInformation
 180              		.cfi_endproc
 181              	.LFE1:
 183              		.section	.text.closesocket,"ax",%progbits
 184              		.align	1
 185              		.global	closesocket
 186              		.thumb
 187              		.thumb_func
 189              	closesocket:
 190              	.LFB2:
 215:../libraries/CC3000_Host_Driver/socket.c **** 
 216:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 217:../libraries/CC3000_Host_Driver/socket.c **** //
 218:../libraries/CC3000_Host_Driver/socket.c **** //! closesocket
 219:../libraries/CC3000_Host_Driver/socket.c **** //!
 220:../libraries/CC3000_Host_Driver/socket.c **** //!  @param  sd    socket handle.
 221:../libraries/CC3000_Host_Driver/socket.c **** //!
 222:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  On success, zero is returned. On error, -1 is returned.
 223:../libraries/CC3000_Host_Driver/socket.c **** //!
 224:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  The socket function closes a created socket.
 225:../libraries/CC3000_Host_Driver/socket.c **** //
 226:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 227:../libraries/CC3000_Host_Driver/socket.c **** 
 228:../libraries/CC3000_Host_Driver/socket.c **** long
 229:../libraries/CC3000_Host_Driver/socket.c **** closesocket(long sd)
 230:../libraries/CC3000_Host_Driver/socket.c **** {
 191              		.loc 1 230 0
 192              		.cfi_startproc
 193              		@ args = 0, pretend = 0, frame = 8
 194              		@ frame_needed = 0, uses_anonymous_args = 0
 195              	.LVL20:
 196 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 197              	.LCFI2:
 198              		.cfi_def_cfa_offset 32
 199              		.cfi_offset 0, -32
 200              		.cfi_offset 1, -28
 201              		.cfi_offset 2, -24
 202              		.cfi_offset 4, -20
 203              		.cfi_offset 5, -16
 204              		.cfi_offset 6, -12
 205              		.cfi_offset 7, -8
 206              		.cfi_offset 14, -4
 207              		.loc 1 230 0
 208 0002 0546     		mov	r5, r0
 231:../libraries/CC3000_Host_Driver/socket.c **** 	long ret;
 232:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 233:../libraries/CC3000_Host_Driver/socket.c **** 	
 234:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 235:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 209              		.loc 1 235 0
 210 0004 1048     		ldr	r0, .L17
 211              	.LVL21:
 234:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 212              		.loc 1 234 0
 213 0006 4FF0FF33 		mov	r3, #-1
 214              		.loc 1 235 0
 215 000a 8768     		ldr	r7, [r0, #8]
 216              	.LVL22:
 234:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 217              		.loc 1 234 0
 218 000c 02AC     		add	r4, sp, #8
 236:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 237:../libraries/CC3000_Host_Driver/socket.c **** 	
 238:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in HCI packet structure
 239:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 219              		.loc 1 239 0
 220 000e 2946     		mov	r1, r5
 240:../libraries/CC3000_Host_Driver/socket.c **** 	
 241:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 242:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_CLOSE_SOCKET,
 221              		.loc 1 242 0
 222 0010 41F20B06 		movw	r6, #4107
 239:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 223              		.loc 1 239 0
 224 0014 07F10900 		add	r0, r7, #9
 225              	.LVL23:
 234:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 226              		.loc 1 234 0
 227 0018 44F8043D 		str	r3, [r4, #-4]!
 228              	.LVL24:
 239:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 229              		.loc 1 239 0
 230 001c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 231              	.LVL25:
 232              		.loc 1 242 0
 233 0020 0422     		movs	r2, #4
 234 0022 3946     		mov	r1, r7
 235 0024 3046     		mov	r0, r6
 236 0026 FFF7FEFF 		bl	hci_command_send
 237              	.LVL26:
 243:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_CLOSE_PARAMS_LEN);
 244:../libraries/CC3000_Host_Driver/socket.c **** 	
 245:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 246:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_CLOSE_SOCKET, &ret);
 238              		.loc 1 246 0
 239 002a 2146     		mov	r1, r4
 240 002c 3046     		mov	r0, r6
 241 002e FFF7FEFF 		bl	SimpleLinkWaitEvent
 242              	.LVL27:
 247:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret;
 243              		.loc 1 247 0
 244 0032 FFF7FEFF 		bl	__errno
 245              	.LVL28:
 246 0036 0199     		ldr	r1, [sp, #4]
 247 0038 0160     		str	r1, [r0, #0]
 248:../libraries/CC3000_Host_Driver/socket.c **** 	
 249:../libraries/CC3000_Host_Driver/socket.c **** 	// since 'close' call may result in either OK (and then it closed) or error 
 250:../libraries/CC3000_Host_Driver/socket.c **** 	// mark this socket as invalid 
 251:../libraries/CC3000_Host_Driver/socket.c **** 	set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
 248              		.loc 1 251 0
 249 003a 2846     		mov	r0, r5
 250 003c 0121     		movs	r1, #1
 251 003e FFF7FEFF 		bl	set_socket_active_status
 252              	.LVL29:
 252:../libraries/CC3000_Host_Driver/socket.c **** 	
 253:../libraries/CC3000_Host_Driver/socket.c **** 	return(ret);
 254:../libraries/CC3000_Host_Driver/socket.c **** }
 253              		.loc 1 254 0
 254 0042 0198     		ldr	r0, [sp, #4]
 255 0044 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 256              	.L18:
 257 0046 00BF     		.align	2
 258              	.L17:
 259 0048 00000000 		.word	tSLInformation
 260              		.cfi_endproc
 261              	.LFE2:
 263              		.section	.text.accept,"ax",%progbits
 264              		.align	1
 265              		.global	accept
 266              		.thumb
 267              		.thumb_func
 269              	accept:
 270              	.LFB3:
 255:../libraries/CC3000_Host_Driver/socket.c **** 
 256:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 257:../libraries/CC3000_Host_Driver/socket.c **** //
 258:../libraries/CC3000_Host_Driver/socket.c **** //! accept
 259:../libraries/CC3000_Host_Driver/socket.c **** //!
 260:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   sd      socket descriptor (handle)              
 261:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]  addr    the argument addr is a pointer to a sockaddr structure
 262:../libraries/CC3000_Host_Driver/socket.c **** //!                       This structure is filled in with the address of the  
 263:../libraries/CC3000_Host_Driver/socket.c **** //!                       peer socket, as known to the communications layer.        
 264:../libraries/CC3000_Host_Driver/socket.c **** //!                       determined. The exact format of the address returned             
 265:../libraries/CC3000_Host_Driver/socket.c **** //!                       addr is by the socket's address sockaddr. 
 266:../libraries/CC3000_Host_Driver/socket.c **** //!                       On this version only AF_INET is supported.
 267:../libraries/CC3000_Host_Driver/socket.c **** //!                       This argument returns in network order.
 268:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out] addrlen  the addrlen argument is a value-result argument: 
 269:../libraries/CC3000_Host_Driver/socket.c **** //!                       it should initially contain the size of the structure
 270:../libraries/CC3000_Host_Driver/socket.c **** //!                       pointed to by addr.
 271:../libraries/CC3000_Host_Driver/socket.c **** //!
 272:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  For socket in blocking mode:
 273:../libraries/CC3000_Host_Driver/socket.c **** //!				      On success, socket handle. on failure negative
 274:../libraries/CC3000_Host_Driver/socket.c **** //!			      For socket in non-blocking mode:
 275:../libraries/CC3000_Host_Driver/socket.c **** //!				     - On connection establishment, socket handle
 276:../libraries/CC3000_Host_Driver/socket.c **** //!				     - On connection pending, SOC_IN_PROGRESS (-2)
 277:../libraries/CC3000_Host_Driver/socket.c **** //!			       - On failure, SOC_ERROR	(-1)
 278:../libraries/CC3000_Host_Driver/socket.c **** //!
 279:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  accept a connection on a socket:
 280:../libraries/CC3000_Host_Driver/socket.c **** //!          This function is used with connection-based socket types 
 281:../libraries/CC3000_Host_Driver/socket.c **** //!          (SOCK_STREAM). It extracts the first connection request on the 
 282:../libraries/CC3000_Host_Driver/socket.c **** //!          queue of pending connections, creates a new connected socket, and
 283:../libraries/CC3000_Host_Driver/socket.c **** //!          returns a new file descriptor referring to that socket.
 284:../libraries/CC3000_Host_Driver/socket.c **** //!          The newly created socket is not in the listening state. 
 285:../libraries/CC3000_Host_Driver/socket.c **** //!          The original socket sd is unaffected by this call. 
 286:../libraries/CC3000_Host_Driver/socket.c **** //!          The argument sd is a socket that has been created with socket(),
 287:../libraries/CC3000_Host_Driver/socket.c **** //!          bound to a local address with bind(), and is  listening for 
 288:../libraries/CC3000_Host_Driver/socket.c **** //!          connections after a listen(). The argument addr is a pointer 
 289:../libraries/CC3000_Host_Driver/socket.c **** //!          to a sockaddr structure. This structure is filled in with the 
 290:../libraries/CC3000_Host_Driver/socket.c **** //!          address of the peer socket, as known to the communications layer.
 291:../libraries/CC3000_Host_Driver/socket.c **** //!          The exact format of the address returned addr is determined by the 
 292:../libraries/CC3000_Host_Driver/socket.c **** //!          socket's address family. The addrlen argument is a value-result
 293:../libraries/CC3000_Host_Driver/socket.c **** //!          argument: it should initially contain the size of the structure
 294:../libraries/CC3000_Host_Driver/socket.c **** //!          pointed to by addr, on return it will contain the actual 
 295:../libraries/CC3000_Host_Driver/socket.c **** //!          length (in bytes) of the address returned.
 296:../libraries/CC3000_Host_Driver/socket.c **** //!
 297:../libraries/CC3000_Host_Driver/socket.c **** //! @sa     socket ; bind ; listen
 298:../libraries/CC3000_Host_Driver/socket.c **** //
 299:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 300:../libraries/CC3000_Host_Driver/socket.c **** 
 301:../libraries/CC3000_Host_Driver/socket.c **** long
 302:../libraries/CC3000_Host_Driver/socket.c **** accept(long sd, sockaddr *addr, socklen_t *addrlen)
 303:../libraries/CC3000_Host_Driver/socket.c **** {
 271              		.loc 1 303 0
 272              		.cfi_startproc
 273              		@ args = 0, pretend = 0, frame = 24
 274              		@ frame_needed = 0, uses_anonymous_args = 0
 275              	.LVL30:
 276 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 277              	.LCFI3:
 278              		.cfi_def_cfa_offset 20
 279              		.cfi_offset 4, -20
 280              		.cfi_offset 5, -16
 281              		.cfi_offset 6, -12
 282              		.cfi_offset 7, -8
 283              		.cfi_offset 14, -4
 304:../libraries/CC3000_Host_Driver/socket.c **** 	long ret;
 305:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 306:../libraries/CC3000_Host_Driver/socket.c **** 	tBsdReturnParams tAcceptReturnArguments;
 307:../libraries/CC3000_Host_Driver/socket.c **** 	
 308:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 309:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 284              		.loc 1 309 0
 285 0002 174B     		ldr	r3, .L23
 303:../libraries/CC3000_Host_Driver/socket.c **** {
 286              		.loc 1 303 0
 287 0004 0546     		mov	r5, r0
 288              		.loc 1 309 0
 289 0006 9E68     		ldr	r6, [r3, #8]
 290              	.LVL31:
 303:../libraries/CC3000_Host_Driver/socket.c **** {
 291              		.loc 1 303 0
 292 0008 87B0     		sub	sp, sp, #28
 293              	.LCFI4:
 294              		.cfi_def_cfa_offset 48
 303:../libraries/CC3000_Host_Driver/socket.c **** {
 295              		.loc 1 303 0
 296 000a 0C46     		mov	r4, r1
 310:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 311:../libraries/CC3000_Host_Driver/socket.c **** 	
 312:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 313:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 297              		.loc 1 313 0
 298 000c 06F10900 		add	r0, r6, #9
 299              	.LVL32:
 300 0010 2946     		mov	r1, r5
 301              	.LVL33:
 303:../libraries/CC3000_Host_Driver/socket.c **** {
 302              		.loc 1 303 0
 303 0012 1746     		mov	r7, r2
 304              		.loc 1 313 0
 305 0014 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 306              	.LVL34:
 314:../libraries/CC3000_Host_Driver/socket.c **** 	
 315:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 316:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_ACCEPT,
 307              		.loc 1 316 0
 308 0018 0422     		movs	r2, #4
 309 001a 3146     		mov	r1, r6
 310 001c 41F20500 		movw	r0, #4101
 311 0020 FFF7FEFF 		bl	hci_command_send
 312              	.LVL35:
 317:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_ACCEPT_PARAMS_LEN);
 318:../libraries/CC3000_Host_Driver/socket.c **** 	
 319:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 320:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_ACCEPT, &tAcceptReturnArguments);
 313              		.loc 1 320 0
 314 0024 41F20500 		movw	r0, #4101
 315 0028 6946     		mov	r1, sp
 316 002a FFF7FEFF 		bl	SimpleLinkWaitEvent
 317              	.LVL36:
 321:../libraries/CC3000_Host_Driver/socket.c **** 	
 322:../libraries/CC3000_Host_Driver/socket.c **** 	
 323:../libraries/CC3000_Host_Driver/socket.c **** 	// need specify return parameters!!!
 324:../libraries/CC3000_Host_Driver/socket.c **** 	memcpy(addr, &tAcceptReturnArguments.tSocketAddress, ASIC_ADDR_LEN);
 318              		.loc 1 324 0
 319 002e 02AA     		add	r2, sp, #8
 320 0030 03CA     		ldmia	r2!, {r0, r1}
 321 0032 2060     		str	r0, [r4, #0]	@ unaligned
 325:../libraries/CC3000_Host_Driver/socket.c **** 	*addrlen = ASIC_ADDR_LEN;
 322              		.loc 1 325 0
 323 0034 0820     		movs	r0, #8
 324:../libraries/CC3000_Host_Driver/socket.c **** 	memcpy(addr, &tAcceptReturnArguments.tSocketAddress, ASIC_ADDR_LEN);
 324              		.loc 1 324 0
 325 0036 6160     		str	r1, [r4, #4]	@ unaligned
 326              		.loc 1 325 0
 327 0038 3860     		str	r0, [r7, #0]
 326:../libraries/CC3000_Host_Driver/socket.c **** 	errno = tAcceptReturnArguments.iStatus; 
 328              		.loc 1 326 0
 329 003a FFF7FEFF 		bl	__errno
 330              	.LVL37:
 331 003e 0199     		ldr	r1, [sp, #4]
 332 0040 0160     		str	r1, [r0, #0]
 327:../libraries/CC3000_Host_Driver/socket.c **** 	ret = errno;
 333              		.loc 1 327 0
 334 0042 FFF7FEFF 		bl	__errno
 335              	.LVL38:
 336 0046 0468     		ldr	r4, [r0, #0]
 337              	.LVL39:
 328:../libraries/CC3000_Host_Driver/socket.c **** 	
 329:../libraries/CC3000_Host_Driver/socket.c **** 	// if succeeded, iStatus = new socket descriptor. otherwise - error number 
 330:../libraries/CC3000_Host_Driver/socket.c **** 	if(M_IS_VALID_SD(ret))
 338              		.loc 1 330 0
 339 0048 072C     		cmp	r4, #7
 340 004a 02D8     		bhi	.L20
 331:../libraries/CC3000_Host_Driver/socket.c **** 	{
 332:../libraries/CC3000_Host_Driver/socket.c **** 		set_socket_active_status(ret, SOCKET_STATUS_ACTIVE);
 341              		.loc 1 332 0
 342 004c 2046     		mov	r0, r4
 343 004e 0021     		movs	r1, #0
 344 0050 01E0     		b	.L22
 345              	.L20:
 333:../libraries/CC3000_Host_Driver/socket.c **** 	}
 334:../libraries/CC3000_Host_Driver/socket.c **** 	else
 335:../libraries/CC3000_Host_Driver/socket.c **** 	{
 336:../libraries/CC3000_Host_Driver/socket.c **** 		set_socket_active_status(sd, SOCKET_STATUS_INACTIVE);
 346              		.loc 1 336 0
 347 0052 2846     		mov	r0, r5
 348 0054 0121     		movs	r1, #1
 349              	.L22:
 350 0056 FFF7FEFF 		bl	set_socket_active_status
 351              	.LVL40:
 337:../libraries/CC3000_Host_Driver/socket.c **** 	}
 338:../libraries/CC3000_Host_Driver/socket.c **** 	
 339:../libraries/CC3000_Host_Driver/socket.c **** 	return(ret);
 340:../libraries/CC3000_Host_Driver/socket.c **** }
 352              		.loc 1 340 0
 353 005a 2046     		mov	r0, r4
 354 005c 07B0     		add	sp, sp, #28
 355 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 356              	.L24:
 357              		.align	2
 358              	.L23:
 359 0060 00000000 		.word	tSLInformation
 360              		.cfi_endproc
 361              	.LFE3:
 363              		.section	.text.bind,"ax",%progbits
 364              		.align	1
 365              		.global	bind
 366              		.thumb
 367              		.thumb_func
 369              	bind:
 370              	.LFB4:
 341:../libraries/CC3000_Host_Driver/socket.c **** 
 342:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 343:../libraries/CC3000_Host_Driver/socket.c **** //
 344:../libraries/CC3000_Host_Driver/socket.c **** //! bind
 345:../libraries/CC3000_Host_Driver/socket.c **** //!
 346:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   sd      socket descriptor (handle)              
 347:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]  addr    specifies the destination address. On this version 
 348:../libraries/CC3000_Host_Driver/socket.c **** //!                       only AF_INET is supported.
 349:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out] addrlen  contains the size of the structure pointed to by addr.
 350:../libraries/CC3000_Host_Driver/socket.c **** //!
 351:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, zero is returned. On error, -1 is returned.
 352:../libraries/CC3000_Host_Driver/socket.c **** //!
 353:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  assign a name to a socket
 354:../libraries/CC3000_Host_Driver/socket.c **** //!          This function gives the socket the local address addr.
 355:../libraries/CC3000_Host_Driver/socket.c **** //!          addr is addrlen bytes long. Traditionally, this is called when a 
 356:../libraries/CC3000_Host_Driver/socket.c **** //!          socket is created with socket, it exists in a name space (address 
 357:../libraries/CC3000_Host_Driver/socket.c **** //!          family) but has no name assigned.
 358:../libraries/CC3000_Host_Driver/socket.c **** //!          It is necessary to assign a local address before a SOCK_STREAM
 359:../libraries/CC3000_Host_Driver/socket.c **** //!          socket may receive connections.
 360:../libraries/CC3000_Host_Driver/socket.c **** //!
 361:../libraries/CC3000_Host_Driver/socket.c **** //! @sa     socket ; accept ; listen
 362:../libraries/CC3000_Host_Driver/socket.c **** //
 363:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 364:../libraries/CC3000_Host_Driver/socket.c **** 
 365:../libraries/CC3000_Host_Driver/socket.c **** long
 366:../libraries/CC3000_Host_Driver/socket.c **** bind(long sd, const sockaddr *addr, long addrlen)
 367:../libraries/CC3000_Host_Driver/socket.c **** {
 371              		.loc 1 367 0
 372              		.cfi_startproc
 373              		@ args = 0, pretend = 0, frame = 8
 374              		@ frame_needed = 0, uses_anonymous_args = 0
 375              	.LVL41:
 376 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 377              	.LCFI5:
 378              		.cfi_def_cfa_offset 24
 379              		.cfi_offset 0, -24
 380              		.cfi_offset 1, -20
 381              		.cfi_offset 2, -16
 382              		.cfi_offset 4, -12
 383              		.cfi_offset 5, -8
 384              		.cfi_offset 14, -4
 385              		.loc 1 367 0
 386 0002 0346     		mov	r3, r0
 368:../libraries/CC3000_Host_Driver/socket.c **** 	long ret;
 369:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 370:../libraries/CC3000_Host_Driver/socket.c **** 	
 371:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 372:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 387              		.loc 1 372 0
 388 0004 1348     		ldr	r0, .L28
 389              	.LVL42:
 371:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 390              		.loc 1 371 0
 391 0006 4FF0FF32 		mov	r2, #-1
 392              	.LVL43:
 393              		.loc 1 372 0
 394 000a 8468     		ldr	r4, [r0, #8]
 395              	.LVL44:
 367:../libraries/CC3000_Host_Driver/socket.c **** {
 396              		.loc 1 367 0
 397 000c 0D46     		mov	r5, r1
 373:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 374:../libraries/CC3000_Host_Driver/socket.c **** 	
 375:../libraries/CC3000_Host_Driver/socket.c **** 	addrlen = ASIC_ADDR_LEN;
 376:../libraries/CC3000_Host_Driver/socket.c **** 	
 377:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 378:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 398              		.loc 1 378 0
 399 000e 04F10900 		add	r0, r4, #9
 400              	.LVL45:
 401 0012 1946     		mov	r1, r3
 402              	.LVL46:
 371:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 403              		.loc 1 371 0
 404 0014 0192     		str	r2, [sp, #4]
 405              	.LVL47:
 406              		.loc 1 378 0
 407 0016 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 408              	.LVL48:
 379:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000008);
 409              		.loc 1 379 0
 410 001a 0821     		movs	r1, #8
 411 001c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 412              	.LVL49:
 380:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, addrlen);
 413              		.loc 1 380 0
 414 0020 0821     		movs	r1, #8
 415 0022 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 416              	.LVL50:
 417 0026 0023     		movs	r3, #0
 418              	.LVL51:
 419              	.L26:
 420              	.LBB2:
 381:../libraries/CC3000_Host_Driver/socket.c **** 	ARRAY_TO_STREAM(args, ((unsigned char *)addr), addrlen);
 421              		.loc 1 381 0 discriminator 2
 422 0028 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 423 002a C154     		strb	r1, [r0, r3]
 424 002c 0133     		adds	r3, r3, #1
 425 002e 082B     		cmp	r3, #8
 426 0030 FAD1     		bne	.L26
 427              	.LBE2:
 382:../libraries/CC3000_Host_Driver/socket.c **** 	
 383:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 384:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_BIND,
 428              		.loc 1 384 0
 429 0032 1422     		movs	r2, #20
 430 0034 2146     		mov	r1, r4
 431 0036 41F20200 		movw	r0, #4098
 432 003a FFF7FEFF 		bl	hci_command_send
 433              	.LVL52:
 385:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_BIND_PARAMS_LEN);
 386:../libraries/CC3000_Host_Driver/socket.c **** 	
 387:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 388:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_BIND, &ret);
 434              		.loc 1 388 0
 435 003e 01A9     		add	r1, sp, #4
 436 0040 41F20200 		movw	r0, #4098
 437 0044 FFF7FEFF 		bl	SimpleLinkWaitEvent
 438              	.LVL53:
 389:../libraries/CC3000_Host_Driver/socket.c **** 	
 390:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret;
 439              		.loc 1 390 0
 440 0048 FFF7FEFF 		bl	__errno
 441              	.LVL54:
 442 004c 019A     		ldr	r2, [sp, #4]
 443 004e 0260     		str	r2, [r0, #0]
 391:../libraries/CC3000_Host_Driver/socket.c ****   
 392:../libraries/CC3000_Host_Driver/socket.c **** 	return(ret);
 393:../libraries/CC3000_Host_Driver/socket.c **** }
 444              		.loc 1 393 0
 445 0050 1046     		mov	r0, r2
 446 0052 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 447              	.L29:
 448              		.align	2
 449              	.L28:
 450 0054 00000000 		.word	tSLInformation
 451              		.cfi_endproc
 452              	.LFE4:
 454              		.section	.text.listen,"ax",%progbits
 455              		.align	1
 456              		.global	listen
 457              		.thumb
 458              		.thumb_func
 460              	listen:
 461              	.LFB5:
 394:../libraries/CC3000_Host_Driver/socket.c **** 
 395:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 396:../libraries/CC3000_Host_Driver/socket.c **** //
 397:../libraries/CC3000_Host_Driver/socket.c **** //! listen
 398:../libraries/CC3000_Host_Driver/socket.c **** //!
 399:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   sd      socket descriptor (handle)              
 400:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]  backlog  specifies the listen queue depth. On this version
 401:../libraries/CC3000_Host_Driver/socket.c **** //!                       backlog is not supported.
 402:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, zero is returned. On error, -1 is returned.
 403:../libraries/CC3000_Host_Driver/socket.c **** //!
 404:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  listen for connections on a socket
 405:../libraries/CC3000_Host_Driver/socket.c **** //!          The willingness to accept incoming connections and a queue
 406:../libraries/CC3000_Host_Driver/socket.c **** //!          limit for incoming connections are specified with listen(),
 407:../libraries/CC3000_Host_Driver/socket.c **** //!          and then the connections are accepted with accept.
 408:../libraries/CC3000_Host_Driver/socket.c **** //!          The listen() call applies only to sockets of type SOCK_STREAM
 409:../libraries/CC3000_Host_Driver/socket.c **** //!          The backlog parameter defines the maximum length the queue of
 410:../libraries/CC3000_Host_Driver/socket.c **** //!          pending connections may grow to. 
 411:../libraries/CC3000_Host_Driver/socket.c **** //!
 412:../libraries/CC3000_Host_Driver/socket.c **** //! @sa     socket ; accept ; bind
 413:../libraries/CC3000_Host_Driver/socket.c **** //!
 414:../libraries/CC3000_Host_Driver/socket.c **** //! @note   On this version, backlog is not supported
 415:../libraries/CC3000_Host_Driver/socket.c **** //
 416:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 417:../libraries/CC3000_Host_Driver/socket.c **** 
 418:../libraries/CC3000_Host_Driver/socket.c **** long
 419:../libraries/CC3000_Host_Driver/socket.c **** listen(long sd, long backlog)
 420:../libraries/CC3000_Host_Driver/socket.c **** {
 462              		.loc 1 420 0
 463              		.cfi_startproc
 464              		@ args = 0, pretend = 0, frame = 8
 465              		@ frame_needed = 0, uses_anonymous_args = 0
 466              	.LVL55:
 467 0000 73B5     		push	{r0, r1, r4, r5, r6, lr}
 468              	.LCFI6:
 469              		.cfi_def_cfa_offset 24
 470              		.cfi_offset 0, -24
 471              		.cfi_offset 1, -20
 472              		.cfi_offset 4, -16
 473              		.cfi_offset 5, -12
 474              		.cfi_offset 6, -8
 475              		.cfi_offset 14, -4
 476              		.loc 1 420 0
 477 0002 0346     		mov	r3, r0
 421:../libraries/CC3000_Host_Driver/socket.c **** 	long ret;
 422:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 423:../libraries/CC3000_Host_Driver/socket.c **** 	
 424:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 425:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 478              		.loc 1 425 0
 479 0004 1048     		ldr	r0, .L31
 480              	.LVL56:
 424:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 481              		.loc 1 424 0
 482 0006 4FF0FF32 		mov	r2, #-1
 483              		.loc 1 425 0
 484 000a 8668     		ldr	r6, [r0, #8]
 485              	.LVL57:
 420:../libraries/CC3000_Host_Driver/socket.c **** {
 486              		.loc 1 420 0
 487 000c 0D46     		mov	r5, r1
 424:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 488              		.loc 1 424 0
 489 000e 02AC     		add	r4, sp, #8
 426:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 427:../libraries/CC3000_Host_Driver/socket.c **** 	
 428:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 429:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 490              		.loc 1 429 0
 491 0010 1946     		mov	r1, r3
 492              	.LVL58:
 493 0012 06F10900 		add	r0, r6, #9
 494              	.LVL59:
 424:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 495              		.loc 1 424 0
 496 0016 44F8042D 		str	r2, [r4, #-4]!
 497              	.LVL60:
 498              		.loc 1 429 0
 499 001a FFF7FEFF 		bl	UINT32_TO_STREAM_f
 500              	.LVL61:
 430:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, backlog);
 501              		.loc 1 430 0
 502 001e 2946     		mov	r1, r5
 431:../libraries/CC3000_Host_Driver/socket.c **** 	
 432:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 433:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_LISTEN,
 503              		.loc 1 433 0
 504 0020 41F20605 		movw	r5, #4102
 505              	.LVL62:
 430:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, backlog);
 506              		.loc 1 430 0
 507 0024 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 508              	.LVL63:
 509              		.loc 1 433 0
 510 0028 0822     		movs	r2, #8
 511 002a 3146     		mov	r1, r6
 512 002c 2846     		mov	r0, r5
 513 002e FFF7FEFF 		bl	hci_command_send
 514              	.LVL64:
 434:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_LISTEN_PARAMS_LEN);
 435:../libraries/CC3000_Host_Driver/socket.c **** 	
 436:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 437:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_LISTEN, &ret);
 515              		.loc 1 437 0
 516 0032 2146     		mov	r1, r4
 517 0034 2846     		mov	r0, r5
 518 0036 FFF7FEFF 		bl	SimpleLinkWaitEvent
 519              	.LVL65:
 438:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret;
 520              		.loc 1 438 0
 521 003a FFF7FEFF 		bl	__errno
 522              	.LVL66:
 523 003e 0199     		ldr	r1, [sp, #4]
 524 0040 0160     		str	r1, [r0, #0]
 439:../libraries/CC3000_Host_Driver/socket.c **** 	
 440:../libraries/CC3000_Host_Driver/socket.c **** 	return(ret);
 441:../libraries/CC3000_Host_Driver/socket.c **** }
 525              		.loc 1 441 0
 526 0042 0846     		mov	r0, r1
 527 0044 7CBD     		pop	{r2, r3, r4, r5, r6, pc}
 528              	.L32:
 529 0046 00BF     		.align	2
 530              	.L31:
 531 0048 00000000 		.word	tSLInformation
 532              		.cfi_endproc
 533              	.LFE5:
 535              		.section	.text.gethostbyname,"ax",%progbits
 536              		.align	1
 537              		.global	gethostbyname
 538              		.thumb
 539              		.thumb_func
 541              	gethostbyname:
 542              	.LFB6:
 442:../libraries/CC3000_Host_Driver/socket.c **** 
 443:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 444:../libraries/CC3000_Host_Driver/socket.c **** //
 445:../libraries/CC3000_Host_Driver/socket.c **** //! gethostbyname
 446:../libraries/CC3000_Host_Driver/socket.c **** //!
 447:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   hostname     host name              
 448:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   usNameLen    name length 
 449:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]  out_ip_addr  This parameter is filled in with host IP address. 
 450:../libraries/CC3000_Host_Driver/socket.c **** //!                            In case that host name is not resolved, 
 451:../libraries/CC3000_Host_Driver/socket.c **** //!                            out_ip_addr is zero.                  
 452:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, positive is returned. On error, negative is returned
 453:../libraries/CC3000_Host_Driver/socket.c **** //!
 454:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  Get host IP by name. Obtain the IP Address of machine on network, 
 455:../libraries/CC3000_Host_Driver/socket.c **** //!          by its name.
 456:../libraries/CC3000_Host_Driver/socket.c **** //!
 457:../libraries/CC3000_Host_Driver/socket.c **** //!  @note  On this version, only blocking mode is supported. Also note that
 458:../libraries/CC3000_Host_Driver/socket.c **** //!		     the function requires DNS server to be configured prior to its usage.
 459:../libraries/CC3000_Host_Driver/socket.c **** //
 460:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 461:../libraries/CC3000_Host_Driver/socket.c **** 
 462:../libraries/CC3000_Host_Driver/socket.c **** #ifndef CC3000_TINY_DRIVER
 463:../libraries/CC3000_Host_Driver/socket.c **** int 
 464:../libraries/CC3000_Host_Driver/socket.c **** gethostbyname(char * hostname, unsigned short usNameLen, 
 465:../libraries/CC3000_Host_Driver/socket.c **** 							unsigned long* out_ip_addr)
 466:../libraries/CC3000_Host_Driver/socket.c **** {
 543              		.loc 1 466 0
 544              		.cfi_startproc
 545              		@ args = 0, pretend = 0, frame = 8
 546              		@ frame_needed = 0, uses_anonymous_args = 0
 547              	.LVL67:
 548 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 549              	.LCFI7:
 550              		.cfi_def_cfa_offset 32
 551              		.cfi_offset 0, -32
 552              		.cfi_offset 1, -28
 553              		.cfi_offset 2, -24
 554              		.cfi_offset 4, -20
 555              		.cfi_offset 5, -16
 556              		.cfi_offset 6, -12
 557              		.cfi_offset 7, -8
 558              		.cfi_offset 14, -4
 559              		.loc 1 466 0
 560 0002 0C46     		mov	r4, r1
 561 0004 0746     		mov	r7, r0
 562 0006 1646     		mov	r6, r2
 467:../libraries/CC3000_Host_Driver/socket.c **** 	tBsdGethostbynameParams ret;
 468:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 469:../libraries/CC3000_Host_Driver/socket.c **** 	
 470:../libraries/CC3000_Host_Driver/socket.c **** 	errno = EFAIL;
 563              		.loc 1 470 0
 564 0008 FFF7FEFF 		bl	__errno
 565              	.LVL68:
 566 000c 4FF0FF33 		mov	r3, #-1
 471:../libraries/CC3000_Host_Driver/socket.c **** 	
 472:../libraries/CC3000_Host_Driver/socket.c **** 	if (usNameLen > HOSTNAME_MAX_LENGTH)
 567              		.loc 1 472 0
 568 0010 E62C     		cmp	r4, #230
 470:../libraries/CC3000_Host_Driver/socket.c **** 	errno = EFAIL;
 569              		.loc 1 470 0
 570 0012 0360     		str	r3, [r0, #0]
 571              		.loc 1 472 0
 572 0014 23D8     		bhi	.L38
 573              	.L34:
 473:../libraries/CC3000_Host_Driver/socket.c **** 	{
 474:../libraries/CC3000_Host_Driver/socket.c **** 		return errno;
 475:../libraries/CC3000_Host_Driver/socket.c **** 	}
 476:../libraries/CC3000_Host_Driver/socket.c **** 	
 477:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 574              		.loc 1 477 0
 575 0016 1448     		ldr	r0, .L40
 478:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
 479:../libraries/CC3000_Host_Driver/socket.c **** 	
 480:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in HCI packet structure
 481:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 8);
 576              		.loc 1 481 0
 577 0018 0821     		movs	r1, #8
 477:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 578              		.loc 1 477 0
 579 001a 8568     		ldr	r5, [r0, #8]
 580              	.LVL69:
 581              		.loc 1 481 0
 582 001c 05F10900 		add	r0, r5, #9
 583              	.LVL70:
 584 0020 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 585              	.LVL71:
 482:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, usNameLen);
 586              		.loc 1 482 0
 587 0024 2146     		mov	r1, r4
 588 0026 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 589              	.LVL72:
 590              	.LBB3:
 483:../libraries/CC3000_Host_Driver/socket.c **** 	ARRAY_TO_STREAM(args, hostname, usNameLen);
 591              		.loc 1 483 0
 592 002a 0021     		movs	r1, #0
 593              	.LVL73:
 594              	.L36:
 595              		.loc 1 483 0 is_stmt 0 discriminator 1
 596 002c A142     		cmp	r1, r4
 597 002e 03DA     		bge	.L39
 598              	.L37:
 599              		.loc 1 483 0 discriminator 2
 600 0030 7A5C     		ldrb	r2, [r7, r1]	@ zero_extendqisi2
 601 0032 4254     		strb	r2, [r0, r1]
 602 0034 0131     		adds	r1, r1, #1
 603 0036 F9E7     		b	.L36
 604              	.L39:
 605              	.LBE3:
 484:../libraries/CC3000_Host_Driver/socket.c **** 	
 485:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 486:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_GETHOSTNAME, ptr, SOCKET_GET_HOST_BY_NAME_PARAMS_LEN
 606              		.loc 1 486 0 is_stmt 1
 607 0038 04F10802 		add	r2, r4, #8
 608 003c D2B2     		uxtb	r2, r2
 609 003e 2946     		mov	r1, r5
 610 0040 41F21000 		movw	r0, #4112
 611 0044 FFF7FEFF 		bl	hci_command_send
 612              	.LVL74:
 487:../libraries/CC3000_Host_Driver/socket.c **** 									 + usNameLen - 1);
 488:../libraries/CC3000_Host_Driver/socket.c **** 	
 489:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 490:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_EVNT_BSD_GETHOSTBYNAME, &ret);
 613              		.loc 1 490 0
 614 0048 6946     		mov	r1, sp
 615 004a 41F21000 		movw	r0, #4112
 616 004e FFF7FEFF 		bl	SimpleLinkWaitEvent
 617              	.LVL75:
 491:../libraries/CC3000_Host_Driver/socket.c **** 	
 492:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret.retVal;
 618              		.loc 1 492 0
 619 0052 FFF7FEFF 		bl	__errno
 620              	.LVL76:
 621 0056 0099     		ldr	r1, [sp, #0]
 493:../libraries/CC3000_Host_Driver/socket.c **** 	
 494:../libraries/CC3000_Host_Driver/socket.c **** 	(*((long*)out_ip_addr)) = ret.outputAddress;
 622              		.loc 1 494 0
 623 0058 019B     		ldr	r3, [sp, #4]
 492:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret.retVal;
 624              		.loc 1 492 0
 625 005a 0160     		str	r1, [r0, #0]
 626              		.loc 1 494 0
 627 005c 3360     		str	r3, [r6, #0]
 628              	.LVL77:
 629              	.L38:
 495:../libraries/CC3000_Host_Driver/socket.c **** 	
 496:../libraries/CC3000_Host_Driver/socket.c **** 	return (errno);
 630              		.loc 1 496 0
 631 005e FFF7FEFF 		bl	__errno
 632              	.LVL78:
 633 0062 0068     		ldr	r0, [r0, #0]
 497:../libraries/CC3000_Host_Driver/socket.c **** 	
 498:../libraries/CC3000_Host_Driver/socket.c **** }
 634              		.loc 1 498 0
 635 0064 FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 636              	.L41:
 637 0066 00BF     		.align	2
 638              	.L40:
 639 0068 00000000 		.word	tSLInformation
 640              		.cfi_endproc
 641              	.LFE6:
 643              		.section	.text.connect,"ax",%progbits
 644              		.align	1
 645              		.global	connect
 646              		.thumb
 647              		.thumb_func
 649              	connect:
 650              	.LFB7:
 499:../libraries/CC3000_Host_Driver/socket.c **** #endif
 500:../libraries/CC3000_Host_Driver/socket.c **** 
 501:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 502:../libraries/CC3000_Host_Driver/socket.c **** //
 503:../libraries/CC3000_Host_Driver/socket.c **** //! connect
 504:../libraries/CC3000_Host_Driver/socket.c **** //!
 505:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   sd       socket descriptor (handle)         
 506:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   addr     specifies the destination addr. On this version
 507:../libraries/CC3000_Host_Driver/socket.c **** //!                        only AF_INET is supported.
 508:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]  addrlen  contains the size of the structure pointed to by addr    
 509:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, zero is returned. On error, -1 is returned
 510:../libraries/CC3000_Host_Driver/socket.c **** //!
 511:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  initiate a connection on a socket 
 512:../libraries/CC3000_Host_Driver/socket.c **** //!          Function connects the socket referred to by the socket descriptor 
 513:../libraries/CC3000_Host_Driver/socket.c **** //!          sd, to the address specified by addr. The addrlen argument 
 514:../libraries/CC3000_Host_Driver/socket.c **** //!          specifies the size of addr. The format of the address in addr is 
 515:../libraries/CC3000_Host_Driver/socket.c **** //!          determined by the address space of the socket. If it is of type 
 516:../libraries/CC3000_Host_Driver/socket.c **** //!          SOCK_DGRAM, this call specifies the peer with which the socket is 
 517:../libraries/CC3000_Host_Driver/socket.c **** //!          to be associated; this address is that to which datagrams are to be
 518:../libraries/CC3000_Host_Driver/socket.c **** //!          sent, and the only address from which datagrams are to be received.  
 519:../libraries/CC3000_Host_Driver/socket.c **** //!          If the socket is of type SOCK_STREAM, this call attempts to make a 
 520:../libraries/CC3000_Host_Driver/socket.c **** //!          connection to another socket. The other socket is specified  by 
 521:../libraries/CC3000_Host_Driver/socket.c **** //!          address, which is an address in the communications space of the
 522:../libraries/CC3000_Host_Driver/socket.c **** //!          socket. Note that the function implements only blocking behavior 
 523:../libraries/CC3000_Host_Driver/socket.c **** //!          thus the caller will be waiting either for the connection 
 524:../libraries/CC3000_Host_Driver/socket.c **** //!          establishment or for the connection establishment failure.
 525:../libraries/CC3000_Host_Driver/socket.c **** //!
 526:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa socket
 527:../libraries/CC3000_Host_Driver/socket.c **** //
 528:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 529:../libraries/CC3000_Host_Driver/socket.c **** 
 530:../libraries/CC3000_Host_Driver/socket.c **** long
 531:../libraries/CC3000_Host_Driver/socket.c **** connect(long sd, const sockaddr *addr, long addrlen)
 532:../libraries/CC3000_Host_Driver/socket.c **** {
 651              		.loc 1 532 0
 652              		.cfi_startproc
 653              		@ args = 0, pretend = 0, frame = 8
 654              		@ frame_needed = 0, uses_anonymous_args = 0
 655              	.LVL79:
 656 0000 37B5     		push	{r0, r1, r2, r4, r5, lr}
 657              	.LCFI8:
 658              		.cfi_def_cfa_offset 24
 659              		.cfi_offset 0, -24
 660              		.cfi_offset 1, -20
 661              		.cfi_offset 2, -16
 662              		.cfi_offset 4, -12
 663              		.cfi_offset 5, -8
 664              		.cfi_offset 14, -4
 665              		.loc 1 532 0
 666 0002 0346     		mov	r3, r0
 533:../libraries/CC3000_Host_Driver/socket.c **** 	long int ret;
 534:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 535:../libraries/CC3000_Host_Driver/socket.c **** 	
 536:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 537:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 667              		.loc 1 537 0
 668 0004 1348     		ldr	r0, .L45
 669              	.LVL80:
 536:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 670              		.loc 1 536 0
 671 0006 4FF0FF32 		mov	r2, #-1
 672              	.LVL81:
 673              		.loc 1 537 0
 674 000a 8468     		ldr	r4, [r0, #8]
 675              	.LVL82:
 532:../libraries/CC3000_Host_Driver/socket.c **** {
 676              		.loc 1 532 0
 677 000c 0D46     		mov	r5, r1
 538:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
 539:../libraries/CC3000_Host_Driver/socket.c **** 	addrlen = 8;
 540:../libraries/CC3000_Host_Driver/socket.c **** 	
 541:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 542:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 678              		.loc 1 542 0
 679 000e 04F10900 		add	r0, r4, #9
 680              	.LVL83:
 681 0012 1946     		mov	r1, r3
 682              	.LVL84:
 536:../libraries/CC3000_Host_Driver/socket.c **** 	ret = EFAIL;
 683              		.loc 1 536 0
 684 0014 0192     		str	r2, [sp, #4]
 685              	.LVL85:
 686              		.loc 1 542 0
 687 0016 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 688              	.LVL86:
 543:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000008);
 689              		.loc 1 543 0
 690 001a 0821     		movs	r1, #8
 691 001c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 692              	.LVL87:
 544:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, addrlen);
 693              		.loc 1 544 0
 694 0020 0821     		movs	r1, #8
 695 0022 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 696              	.LVL88:
 697 0026 0023     		movs	r3, #0
 698              	.LVL89:
 699              	.L43:
 700              	.LBB4:
 545:../libraries/CC3000_Host_Driver/socket.c **** 	ARRAY_TO_STREAM(args, ((unsigned char *)addr), addrlen);
 701              		.loc 1 545 0 discriminator 2
 702 0028 E95C     		ldrb	r1, [r5, r3]	@ zero_extendqisi2
 703 002a C154     		strb	r1, [r0, r3]
 704 002c 0133     		adds	r3, r3, #1
 705 002e 082B     		cmp	r3, #8
 706 0030 FAD1     		bne	.L43
 707              	.LBE4:
 546:../libraries/CC3000_Host_Driver/socket.c **** 	
 547:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 548:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_CONNECT,
 708              		.loc 1 548 0
 709 0032 1422     		movs	r2, #20
 710 0034 2146     		mov	r1, r4
 711 0036 41F20700 		movw	r0, #4103
 712 003a FFF7FEFF 		bl	hci_command_send
 713              	.LVL90:
 549:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_CONNECT_PARAMS_LEN);
 550:../libraries/CC3000_Host_Driver/socket.c **** 	
 551:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 552:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_CONNECT, &ret);
 714              		.loc 1 552 0
 715 003e 01A9     		add	r1, sp, #4
 716 0040 41F20700 		movw	r0, #4103
 717 0044 FFF7FEFF 		bl	SimpleLinkWaitEvent
 718              	.LVL91:
 553:../libraries/CC3000_Host_Driver/socket.c **** 	
 554:../libraries/CC3000_Host_Driver/socket.c **** 	errno = ret;
 719              		.loc 1 554 0
 720 0048 FFF7FEFF 		bl	__errno
 721              	.LVL92:
 722 004c 019A     		ldr	r2, [sp, #4]
 723 004e 0260     		str	r2, [r0, #0]
 555:../libraries/CC3000_Host_Driver/socket.c **** 	
 556:../libraries/CC3000_Host_Driver/socket.c **** 	return((long)ret);
 557:../libraries/CC3000_Host_Driver/socket.c **** }
 724              		.loc 1 557 0
 725 0050 1046     		mov	r0, r2
 726 0052 3EBD     		pop	{r1, r2, r3, r4, r5, pc}
 727              	.L46:
 728              		.align	2
 729              	.L45:
 730 0054 00000000 		.word	tSLInformation
 731              		.cfi_endproc
 732              	.LFE7:
 734              		.section	.text.select,"ax",%progbits
 735              		.align	1
 736              		.global	select
 737              		.thumb
 738              		.thumb_func
 740              	select:
 741              	.LFB8:
 558:../libraries/CC3000_Host_Driver/socket.c **** 
 559:../libraries/CC3000_Host_Driver/socket.c **** 
 560:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 561:../libraries/CC3000_Host_Driver/socket.c **** //
 562:../libraries/CC3000_Host_Driver/socket.c **** //! select
 563:../libraries/CC3000_Host_Driver/socket.c **** //!
 564:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   nfds       the highest-numbered file descriptor in any of the
 565:../libraries/CC3000_Host_Driver/socket.c **** //!                           three sets, plus 1.     
 566:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]   writesds   socket descriptors list for write monitoring
 567:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]   readsds    socket descriptors list for read monitoring  
 568:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]   exceptsds  socket descriptors list for exception monitoring
 569:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   timeout     is an upper bound on the amount of time elapsed
 570:../libraries/CC3000_Host_Driver/socket.c **** //!                           before select() returns. Null means infinity 
 571:../libraries/CC3000_Host_Driver/socket.c **** //!                           timeout. The minimum timeout is 5 milliseconds,
 572:../libraries/CC3000_Host_Driver/socket.c **** //!                          less than 5 milliseconds will be set
 573:../libraries/CC3000_Host_Driver/socket.c **** //!                           automatically to 5 milliseconds.
 574:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, select() returns the number of file descriptors
 575:../libraries/CC3000_Host_Driver/socket.c **** //!             contained in the three returned descriptor sets (that is, the
 576:../libraries/CC3000_Host_Driver/socket.c **** //!             total number of bits that are set in readfds, writefds,
 577:../libraries/CC3000_Host_Driver/socket.c **** //!             exceptfds) which may be zero if the timeout expires before
 578:../libraries/CC3000_Host_Driver/socket.c **** //!             anything interesting  happens.
 579:../libraries/CC3000_Host_Driver/socket.c **** //!             On error, -1 is returned.
 580:../libraries/CC3000_Host_Driver/socket.c **** //!                   *readsds - return the sockets on which Read request will
 581:../libraries/CC3000_Host_Driver/socket.c **** //!                              return without delay with valid data.
 582:../libraries/CC3000_Host_Driver/socket.c **** //!                   *writesds - return the sockets on which Write request 
 583:../libraries/CC3000_Host_Driver/socket.c **** //!                                 will return without delay.
 584:../libraries/CC3000_Host_Driver/socket.c **** //!                   *exceptsds - return the sockets which closed recently.
 585:../libraries/CC3000_Host_Driver/socket.c **** //!
 586:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  Monitor socket activity  
 587:../libraries/CC3000_Host_Driver/socket.c **** //!          Select allow a program to monitor multiple file descriptors,
 588:../libraries/CC3000_Host_Driver/socket.c **** //!          waiting until one or more of the file descriptors become 
 589:../libraries/CC3000_Host_Driver/socket.c **** //!         "ready" for some class of I/O operation 
 590:../libraries/CC3000_Host_Driver/socket.c **** //!
 591:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note   If the timeout value set to less than 5ms it will automatically set
 592:../libraries/CC3000_Host_Driver/socket.c **** //!          to 5ms to prevent overload of the system
 593:../libraries/CC3000_Host_Driver/socket.c **** //!
 594:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa socket
 595:../libraries/CC3000_Host_Driver/socket.c **** //
 596:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 597:../libraries/CC3000_Host_Driver/socket.c **** 
 598:../libraries/CC3000_Host_Driver/socket.c **** int
 599:../libraries/CC3000_Host_Driver/socket.c **** select(long nfds, fd_set *readsds, fd_set *writesds, fd_set *exceptsds, 
 600:../libraries/CC3000_Host_Driver/socket.c ****        struct timeval *timeout)
 601:../libraries/CC3000_Host_Driver/socket.c **** {
 742              		.loc 1 601 0
 743              		.cfi_startproc
 744              		@ args = 4, pretend = 0, frame = 16
 745              		@ frame_needed = 0, uses_anonymous_args = 0
 746              	.LVL93:
 747 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 748              	.LCFI9:
 749              		.cfi_def_cfa_offset 40
 750              		.cfi_offset 0, -40
 751              		.cfi_offset 1, -36
 752              		.cfi_offset 2, -32
 753              		.cfi_offset 3, -28
 754              		.cfi_offset 4, -24
 755              		.cfi_offset 5, -20
 756              		.cfi_offset 6, -16
 757              		.cfi_offset 7, -12
 758              		.cfi_offset 8, -8
 759              		.cfi_offset 14, -4
 760              		.loc 1 601 0
 761 0004 1D46     		mov	r5, r3
 602:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 603:../libraries/CC3000_Host_Driver/socket.c **** 	tBsdSelectRecvParams tParams;
 604:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned long is_blocking;
 605:../libraries/CC3000_Host_Driver/socket.c **** 	
 606:../libraries/CC3000_Host_Driver/socket.c **** 	if( timeout == NULL)
 607:../libraries/CC3000_Host_Driver/socket.c **** 	{
 608:../libraries/CC3000_Host_Driver/socket.c **** 		is_blocking = 1; /* blocking , infinity timeout */
 609:../libraries/CC3000_Host_Driver/socket.c **** 	}
 610:../libraries/CC3000_Host_Driver/socket.c **** 	else
 611:../libraries/CC3000_Host_Driver/socket.c **** 	{
 612:../libraries/CC3000_Host_Driver/socket.c **** 		is_blocking = 0; /* no blocking, timeout */
 613:../libraries/CC3000_Host_Driver/socket.c **** 	}
 614:../libraries/CC3000_Host_Driver/socket.c **** 	
 615:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in HCI packet structure
 616:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 762              		.loc 1 616 0
 763 0006 314B     		ldr	r3, .L72
 764              	.LVL94:
 601:../libraries/CC3000_Host_Driver/socket.c **** {
 765              		.loc 1 601 0
 766 0008 8646     		mov	lr, r0
 767              		.loc 1 616 0
 768 000a D3F80880 		ldr	r8, [r3, #8]
 601:../libraries/CC3000_Host_Driver/socket.c **** {
 769              		.loc 1 601 0
 770 000e 0F46     		mov	r7, r1
 617:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 618:../libraries/CC3000_Host_Driver/socket.c **** 	
 619:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 620:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, nfds);
 771              		.loc 1 620 0
 772 0010 08F10900 		add	r0, r8, #9
 773              	.LVL95:
 774 0014 7146     		mov	r1, lr
 775              	.LVL96:
 601:../libraries/CC3000_Host_Driver/socket.c **** {
 776              		.loc 1 601 0
 777 0016 1646     		mov	r6, r2
 778 0018 0A9C     		ldr	r4, [sp, #40]
 779              	.LVL97:
 780              		.loc 1 620 0
 781 001a FFF7FEFF 		bl	UINT32_TO_STREAM_f
 782              	.LVL98:
 621:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000014);
 783              		.loc 1 621 0
 784 001e 1421     		movs	r1, #20
 785 0020 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 786              	.LVL99:
 622:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000014);
 787              		.loc 1 622 0
 788 0024 1421     		movs	r1, #20
 789 0026 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 790              	.LVL100:
 623:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000014);
 791              		.loc 1 623 0
 792 002a 1421     		movs	r1, #20
 793 002c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 794              	.LVL101:
 624:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000014);
 795              		.loc 1 624 0
 796 0030 1421     		movs	r1, #20
 797 0032 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 798              	.LVL102:
 625:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, is_blocking);
 799              		.loc 1 625 0
 800 0036 D4F10101 		rsbs	r1, r4, #1
 801 003a 38BF     		it	cc
 802 003c 0021     		movcc	r1, #0
 803 003e FFF7FEFF 		bl	UINT32_TO_STREAM_f
 804              	.LVL103:
 626:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, ((readsds) ? *(unsigned long*)readsds : 0));
 805              		.loc 1 626 0
 806 0042 0FB1     		cbz	r7, .L57
 807              		.loc 1 626 0 is_stmt 0 discriminator 1
 808 0044 3968     		ldr	r1, [r7, #0]
 809 0046 00E0     		b	.L48
 810              	.L57:
 811              		.loc 1 626 0
 812 0048 3946     		mov	r1, r7
 813              	.L48:
 814              		.loc 1 626 0 discriminator 3
 815 004a FFF7FEFF 		bl	UINT32_TO_STREAM_f
 816              	.LVL104:
 627:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, ((writesds) ? *(unsigned long*)writesds : 0));
 817              		.loc 1 627 0 is_stmt 1 discriminator 3
 818 004e 0EB1     		cbz	r6, .L58
 819              		.loc 1 627 0 is_stmt 0 discriminator 1
 820 0050 3168     		ldr	r1, [r6, #0]
 821 0052 00E0     		b	.L49
 822              	.L58:
 823              		.loc 1 627 0
 824 0054 3146     		mov	r1, r6
 825              	.L49:
 826              		.loc 1 627 0 discriminator 3
 827 0056 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 828              	.LVL105:
 628:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, ((exceptsds) ? *(unsigned long*)exceptsds : 0));
 829              		.loc 1 628 0 is_stmt 1 discriminator 3
 830 005a 0DB1     		cbz	r5, .L59
 831              		.loc 1 628 0 is_stmt 0 discriminator 1
 832 005c 2968     		ldr	r1, [r5, #0]
 833 005e 00E0     		b	.L50
 834              	.L59:
 835              		.loc 1 628 0
 836 0060 2946     		mov	r1, r5
 837              	.L50:
 838              		.loc 1 628 0 discriminator 3
 839 0062 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 840              	.LVL106:
 629:../libraries/CC3000_Host_Driver/socket.c **** 	
 630:../libraries/CC3000_Host_Driver/socket.c **** 	if (timeout)
 841              		.loc 1 630 0 is_stmt 1 discriminator 3
 842 0066 74B1     		cbz	r4, .L51
 631:../libraries/CC3000_Host_Driver/socket.c **** 	{
 632:../libraries/CC3000_Host_Driver/socket.c **** 		if ( 0 == timeout->tv_sec && timeout->tv_usec < 
 843              		.loc 1 632 0
 844 0068 2168     		ldr	r1, [r4, #0]
 845 006a 39B9     		cbnz	r1, .L52
 846              		.loc 1 632 0 is_stmt 0 discriminator 1
 847 006c 6368     		ldr	r3, [r4, #4]
 848 006e 41F28732 		movw	r2, #4999
 849 0072 9342     		cmp	r3, r2
 633:../libraries/CC3000_Host_Driver/socket.c **** 				SELECT_TIMEOUT_MIN_MICRO_SECONDS)
 634:../libraries/CC3000_Host_Driver/socket.c **** 		{
 635:../libraries/CC3000_Host_Driver/socket.c **** 			timeout->tv_usec = SELECT_TIMEOUT_MIN_MICRO_SECONDS;
 850              		.loc 1 635 0 is_stmt 1 discriminator 1
 851 0074 DCBF     		itt	le
 852 0076 41F28833 		movwle	r3, #5000
 853 007a 6360     		strle	r3, [r4, #4]
 854              	.L52:
 636:../libraries/CC3000_Host_Driver/socket.c **** 		}
 637:../libraries/CC3000_Host_Driver/socket.c **** 		args = UINT32_TO_STREAM(args, timeout->tv_sec);
 855              		.loc 1 637 0
 856 007c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 857              	.LVL107:
 638:../libraries/CC3000_Host_Driver/socket.c **** 		args = UINT32_TO_STREAM(args, timeout->tv_usec);
 858              		.loc 1 638 0
 859 0080 6168     		ldr	r1, [r4, #4]
 860 0082 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 861              	.LVL108:
 862              	.L51:
 639:../libraries/CC3000_Host_Driver/socket.c **** 	}
 640:../libraries/CC3000_Host_Driver/socket.c **** 	
 641:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 642:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_BSD_SELECT, ptr, SOCKET_SELECT_PARAMS_LEN);
 863              		.loc 1 642 0
 864 0086 2C22     		movs	r2, #44
 865 0088 4146     		mov	r1, r8
 866 008a 41F20800 		movw	r0, #4104
 867 008e FFF7FEFF 		bl	hci_command_send
 868              	.LVL109:
 643:../libraries/CC3000_Host_Driver/socket.c **** 	
 644:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 645:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_EVNT_SELECT, &tParams);
 869              		.loc 1 645 0
 870 0092 41F20800 		movw	r0, #4104
 871 0096 6946     		mov	r1, sp
 872 0098 FFF7FEFF 		bl	SimpleLinkWaitEvent
 873              	.LVL110:
 646:../libraries/CC3000_Host_Driver/socket.c **** 	
 647:../libraries/CC3000_Host_Driver/socket.c **** 	// Update actually read FD
 648:../libraries/CC3000_Host_Driver/socket.c **** 	if (tParams.iStatus >= 0)
 874              		.loc 1 648 0
 875 009c 009B     		ldr	r3, [sp, #0]
 876 009e 002B     		cmp	r3, #0
 877 00a0 09DB     		blt	.L53
 649:../libraries/CC3000_Host_Driver/socket.c **** 	{
 650:../libraries/CC3000_Host_Driver/socket.c **** 		if (readsds)
 878              		.loc 1 650 0
 879 00a2 0FB1     		cbz	r7, .L54
 651:../libraries/CC3000_Host_Driver/socket.c **** 		{
 652:../libraries/CC3000_Host_Driver/socket.c **** 			memcpy(readsds, &tParams.uiRdfd, sizeof(tParams.uiRdfd));
 880              		.loc 1 652 0
 881 00a4 0198     		ldr	r0, [sp, #4]	@ unaligned
 882 00a6 3860     		str	r0, [r7, #0]	@ unaligned
 883              	.L54:
 653:../libraries/CC3000_Host_Driver/socket.c **** 		}
 654:../libraries/CC3000_Host_Driver/socket.c **** 		
 655:../libraries/CC3000_Host_Driver/socket.c **** 		if (writesds)
 884              		.loc 1 655 0
 885 00a8 0EB1     		cbz	r6, .L55
 656:../libraries/CC3000_Host_Driver/socket.c **** 		{
 657:../libraries/CC3000_Host_Driver/socket.c **** 			memcpy(writesds, &tParams.uiWrfd, sizeof(tParams.uiWrfd)); 
 886              		.loc 1 657 0
 887 00aa 029A     		ldr	r2, [sp, #8]	@ unaligned
 888 00ac 3260     		str	r2, [r6, #0]	@ unaligned
 889              	.L55:
 658:../libraries/CC3000_Host_Driver/socket.c **** 		}
 659:../libraries/CC3000_Host_Driver/socket.c **** 		
 660:../libraries/CC3000_Host_Driver/socket.c **** 		if (exceptsds)
 890              		.loc 1 660 0
 891 00ae 45B1     		cbz	r5, .L56
 661:../libraries/CC3000_Host_Driver/socket.c **** 		{
 662:../libraries/CC3000_Host_Driver/socket.c **** 			memcpy(exceptsds, &tParams.uiExfd, sizeof(tParams.uiExfd)); 
 892              		.loc 1 662 0
 893 00b0 0399     		ldr	r1, [sp, #12]	@ unaligned
 894 00b2 2960     		str	r1, [r5, #0]	@ unaligned
 895 00b4 05E0     		b	.L56
 896              	.L53:
 663:../libraries/CC3000_Host_Driver/socket.c **** 		}
 664:../libraries/CC3000_Host_Driver/socket.c **** 		
 665:../libraries/CC3000_Host_Driver/socket.c **** 		return(tParams.iStatus);
 666:../libraries/CC3000_Host_Driver/socket.c **** 		
 667:../libraries/CC3000_Host_Driver/socket.c **** 	}
 668:../libraries/CC3000_Host_Driver/socket.c **** 	else
 669:../libraries/CC3000_Host_Driver/socket.c **** 	{
 670:../libraries/CC3000_Host_Driver/socket.c **** 		errno = tParams.iStatus;
 897              		.loc 1 670 0
 898 00b6 FFF7FEFF 		bl	__errno
 899              	.LVL111:
 900 00ba 0099     		ldr	r1, [sp, #0]
 671:../libraries/CC3000_Host_Driver/socket.c **** 		return(-1);
 901              		.loc 1 671 0
 902 00bc 4FF0FF33 		mov	r3, #-1
 670:../libraries/CC3000_Host_Driver/socket.c **** 		errno = tParams.iStatus;
 903              		.loc 1 670 0
 904 00c0 0160     		str	r1, [r0, #0]
 905              	.L56:
 672:../libraries/CC3000_Host_Driver/socket.c **** 	}
 673:../libraries/CC3000_Host_Driver/socket.c **** }
 906              		.loc 1 673 0
 907 00c2 1846     		mov	r0, r3
 908 00c4 04B0     		add	sp, sp, #16
 909 00c6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 910              	.L73:
 911 00ca 00BF     		.align	2
 912              	.L72:
 913 00cc 00000000 		.word	tSLInformation
 914              		.cfi_endproc
 915              	.LFE8:
 917              		.section	.text.setsockopt,"ax",%progbits
 918              		.align	1
 919              		.global	setsockopt
 920              		.thumb
 921              		.thumb_func
 923              	setsockopt:
 924              	.LFB9:
 674:../libraries/CC3000_Host_Driver/socket.c **** 
 675:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 676:../libraries/CC3000_Host_Driver/socket.c **** //
 677:../libraries/CC3000_Host_Driver/socket.c **** //! setsockopt
 678:../libraries/CC3000_Host_Driver/socket.c **** //!
 679:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   sd          socket handle
 680:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   level       defines the protocol level for this option
 681:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   optname     defines the option name to Interrogate
 682:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   optval      specifies a value for the option
 683:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   optlen      specifies the length of the option value
 684:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, zero is returned. On error, -1 is returned
 685:../libraries/CC3000_Host_Driver/socket.c **** //!
 686:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  set socket options
 687:../libraries/CC3000_Host_Driver/socket.c **** //!          This function manipulate the options associated with a socket.
 688:../libraries/CC3000_Host_Driver/socket.c **** //!          Options may exist at multiple protocol levels; they are always
 689:../libraries/CC3000_Host_Driver/socket.c **** //!          present at the uppermost socket level.
 690:../libraries/CC3000_Host_Driver/socket.c **** //!          When manipulating socket options the level at which the option 
 691:../libraries/CC3000_Host_Driver/socket.c **** //!          resides and the name of the option must be specified.  
 692:../libraries/CC3000_Host_Driver/socket.c **** //!          To manipulate options at the socket level, level is specified as 
 693:../libraries/CC3000_Host_Driver/socket.c **** //!          SOL_SOCKET. To manipulate options at any other level the protocol 
 694:../libraries/CC3000_Host_Driver/socket.c **** //!          number of the appropriate protocol controlling the option is 
 695:../libraries/CC3000_Host_Driver/socket.c **** //!          supplied. For example, to indicate that an option is to be 
 696:../libraries/CC3000_Host_Driver/socket.c **** //!          interpreted by the TCP protocol, level should be set to the 
 697:../libraries/CC3000_Host_Driver/socket.c **** //!          protocol number of TCP; 
 698:../libraries/CC3000_Host_Driver/socket.c **** //!          The parameters optval and optlen are used to access optval - 
 699:../libraries/CC3000_Host_Driver/socket.c **** //!          use for setsockopt(). For getsockopt() they identify a buffer
 700:../libraries/CC3000_Host_Driver/socket.c **** //!          in which the value for the requested option(s) are to 
 701:../libraries/CC3000_Host_Driver/socket.c **** //!          be returned. For getsockopt(), optlen is a value-result 
 702:../libraries/CC3000_Host_Driver/socket.c **** //!          parameter, initially containing the size of the buffer 
 703:../libraries/CC3000_Host_Driver/socket.c **** //!          pointed to by option_value, and modified on return to 
 704:../libraries/CC3000_Host_Driver/socket.c **** //!          indicate the actual size of the value returned. If no option 
 705:../libraries/CC3000_Host_Driver/socket.c **** //!          value is to be supplied or returned, option_value may be NULL.
 706:../libraries/CC3000_Host_Driver/socket.c **** //!
 707:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note   On this version the following two socket options are enabled:
 708:../libraries/CC3000_Host_Driver/socket.c **** //!    			 The only protocol level supported in this version
 709:../libraries/CC3000_Host_Driver/socket.c **** //!          is SOL_SOCKET (level).
 710:../libraries/CC3000_Host_Driver/socket.c **** //!		       1. SOCKOPT_RECV_TIMEOUT (optname)
 711:../libraries/CC3000_Host_Driver/socket.c **** //!			      SOCKOPT_RECV_TIMEOUT configures recv and recvfrom timeout 
 712:../libraries/CC3000_Host_Driver/socket.c **** //!           in milliseconds.
 713:../libraries/CC3000_Host_Driver/socket.c **** //!		        In that case optval should be pointer to unsigned long.
 714:../libraries/CC3000_Host_Driver/socket.c **** //!		       2. SOCKOPT_NONBLOCK (optname). sets the socket non-blocking mode on 
 715:../libraries/CC3000_Host_Driver/socket.c **** //!           or off.
 716:../libraries/CC3000_Host_Driver/socket.c **** //!		        In that case optval should be SOCK_ON or SOCK_OFF (optval).
 717:../libraries/CC3000_Host_Driver/socket.c **** //!
 718:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa getsockopt
 719:../libraries/CC3000_Host_Driver/socket.c **** //
 720:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 721:../libraries/CC3000_Host_Driver/socket.c **** 
 722:../libraries/CC3000_Host_Driver/socket.c **** #ifndef CC3000_TINY_DRIVER
 723:../libraries/CC3000_Host_Driver/socket.c **** int
 724:../libraries/CC3000_Host_Driver/socket.c **** setsockopt(long sd, long level, long optname, const void *optval,
 725:../libraries/CC3000_Host_Driver/socket.c **** 					 socklen_t optlen)
 726:../libraries/CC3000_Host_Driver/socket.c **** {
 925              		.loc 1 726 0
 926              		.cfi_startproc
 927              		@ args = 4, pretend = 0, frame = 8
 928              		@ frame_needed = 0, uses_anonymous_args = 0
 929              	.LVL112:
 930 0000 2DE9F341 		push	{r0, r1, r4, r5, r6, r7, r8, lr}
 931              	.LCFI10:
 932              		.cfi_def_cfa_offset 32
 933              		.cfi_offset 0, -32
 934              		.cfi_offset 1, -28
 935              		.cfi_offset 4, -24
 936              		.cfi_offset 5, -20
 937              		.cfi_offset 6, -16
 938              		.cfi_offset 7, -12
 939              		.cfi_offset 8, -8
 940              		.cfi_offset 14, -4
 941              		.loc 1 726 0
 942 0004 9846     		mov	r8, r3
 727:../libraries/CC3000_Host_Driver/socket.c **** 	int ret;
 728:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 729:../libraries/CC3000_Host_Driver/socket.c **** 	
 730:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 943              		.loc 1 730 0
 944 0006 1B4B     		ldr	r3, .L80
 945              	.LVL113:
 726:../libraries/CC3000_Host_Driver/socket.c **** {
 946              		.loc 1 726 0
 947 0008 8646     		mov	lr, r0
 948              		.loc 1 730 0
 949 000a 9D68     		ldr	r5, [r3, #8]
 950              	.LVL114:
 726:../libraries/CC3000_Host_Driver/socket.c **** {
 951              		.loc 1 726 0
 952 000c 0E46     		mov	r6, r1
 731:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 732:../libraries/CC3000_Host_Driver/socket.c **** 	
 733:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 734:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 953              		.loc 1 734 0
 954 000e 05F10900 		add	r0, r5, #9
 955              	.LVL115:
 956 0012 7146     		mov	r1, lr
 957              	.LVL116:
 726:../libraries/CC3000_Host_Driver/socket.c **** {
 958              		.loc 1 726 0
 959 0014 1746     		mov	r7, r2
 960 0016 089C     		ldr	r4, [sp, #32]
 961              		.loc 1 734 0
 962 0018 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 963              	.LVL117:
 735:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, level);
 964              		.loc 1 735 0
 965 001c 3146     		mov	r1, r6
 966 001e FFF7FEFF 		bl	UINT32_TO_STREAM_f
 967              	.LVL118:
 736:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, optname);
 968              		.loc 1 736 0
 969 0022 3946     		mov	r1, r7
 970 0024 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 971              	.LVL119:
 737:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, 0x00000008);
 972              		.loc 1 737 0
 973 0028 0821     		movs	r1, #8
 974 002a FFF7FEFF 		bl	UINT32_TO_STREAM_f
 975              	.LVL120:
 738:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, optlen);
 976              		.loc 1 738 0
 977 002e 2146     		mov	r1, r4
 978 0030 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 979              	.LVL121:
 980              	.LBB5:
 739:../libraries/CC3000_Host_Driver/socket.c **** 	ARRAY_TO_STREAM(args, ((unsigned char *)optval), optlen);
 981              		.loc 1 739 0
 982 0034 0022     		movs	r2, #0
 983              	.LVL122:
 984              	.L75:
 985              		.loc 1 739 0 is_stmt 0 discriminator 1
 986 0036 A242     		cmp	r2, r4
 987 0038 04D0     		beq	.L79
 988              	.L76:
 989              		.loc 1 739 0 discriminator 2
 990 003a 18F80230 		ldrb	r3, [r8, r2]	@ zero_extendqisi2
 991 003e 8354     		strb	r3, [r0, r2]
 992 0040 0132     		adds	r2, r2, #1
 993 0042 F8E7     		b	.L75
 994              	.L79:
 995              	.LBE5:
 740:../libraries/CC3000_Host_Driver/socket.c **** 	
 741:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 742:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_SETSOCKOPT,
 996              		.loc 1 742 0 is_stmt 1
 997 0044 1432     		adds	r2, r2, #20
 998 0046 2946     		mov	r1, r5
 999 0048 D2B2     		uxtb	r2, r2
 1000 004a 41F20900 		movw	r0, #4105
 1001 004e FFF7FEFF 		bl	hci_command_send
 1002              	.LVL123:
 743:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_SET_SOCK_OPT_PARAMS_LEN  + optlen);
 744:../libraries/CC3000_Host_Driver/socket.c **** 	
 745:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 746:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_SETSOCKOPT, &ret);
 1003              		.loc 1 746 0
 1004 0052 41F20900 		movw	r0, #4105
 1005 0056 01A9     		add	r1, sp, #4
 1006 0058 FFF7FEFF 		bl	SimpleLinkWaitEvent
 1007              	.LVL124:
 747:../libraries/CC3000_Host_Driver/socket.c **** 	
 748:../libraries/CC3000_Host_Driver/socket.c **** 	if (ret >= 0)
 1008              		.loc 1 748 0
 1009 005c 0199     		ldr	r1, [sp, #4]
 749:../libraries/CC3000_Host_Driver/socket.c **** 	{
 750:../libraries/CC3000_Host_Driver/socket.c **** 		return (0);
 1010              		.loc 1 750 0
 1011 005e 0020     		movs	r0, #0
 748:../libraries/CC3000_Host_Driver/socket.c **** 	if (ret >= 0)
 1012              		.loc 1 748 0
 1013 0060 0029     		cmp	r1, #0
 1014 0062 05DA     		bge	.L77
 751:../libraries/CC3000_Host_Driver/socket.c **** 	}
 752:../libraries/CC3000_Host_Driver/socket.c **** 	else
 753:../libraries/CC3000_Host_Driver/socket.c **** 	{
 754:../libraries/CC3000_Host_Driver/socket.c **** 		errno = ret;
 1015              		.loc 1 754 0
 1016 0064 FFF7FEFF 		bl	__errno
 1017              	.LVL125:
 1018 0068 019A     		ldr	r2, [sp, #4]
 1019 006a 0260     		str	r2, [r0, #0]
 755:../libraries/CC3000_Host_Driver/socket.c **** 		return (-1);
 1020              		.loc 1 755 0
 1021 006c 4FF0FF30 		mov	r0, #-1
 1022              	.L77:
 756:../libraries/CC3000_Host_Driver/socket.c **** 	}
 757:../libraries/CC3000_Host_Driver/socket.c **** }
 1023              		.loc 1 757 0
 1024 0070 BDE8FC81 		pop	{r2, r3, r4, r5, r6, r7, r8, pc}
 1025              	.L81:
 1026              		.align	2
 1027              	.L80:
 1028 0074 00000000 		.word	tSLInformation
 1029              		.cfi_endproc
 1030              	.LFE9:
 1032              		.section	.text.getsockopt,"ax",%progbits
 1033              		.align	1
 1034              		.global	getsockopt
 1035              		.thumb
 1036              		.thumb_func
 1038              	getsockopt:
 1039              	.LFB10:
 758:../libraries/CC3000_Host_Driver/socket.c **** #endif
 759:../libraries/CC3000_Host_Driver/socket.c **** 
 760:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 761:../libraries/CC3000_Host_Driver/socket.c **** //
 762:../libraries/CC3000_Host_Driver/socket.c **** //! getsockopt
 763:../libraries/CC3000_Host_Driver/socket.c **** //!
 764:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   sd          socket handle
 765:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   level       defines the protocol level for this option
 766:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]   optname     defines the option name to Interrogate
 767:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]   optval      specifies a value for the option
 768:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out]   optlen      specifies the length of the option value
 769:../libraries/CC3000_Host_Driver/socket.c **** //!  @return  	On success, zero is returned. On error, -1 is returned
 770:../libraries/CC3000_Host_Driver/socket.c **** //!
 771:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief  set socket options
 772:../libraries/CC3000_Host_Driver/socket.c **** //!          This function manipulate the options associated with a socket.
 773:../libraries/CC3000_Host_Driver/socket.c **** //!          Options may exist at multiple protocol levels; they are always
 774:../libraries/CC3000_Host_Driver/socket.c **** //!          present at the uppermost socket level.
 775:../libraries/CC3000_Host_Driver/socket.c **** //!          When manipulating socket options the level at which the option 
 776:../libraries/CC3000_Host_Driver/socket.c **** //!          resides and the name of the option must be specified.  
 777:../libraries/CC3000_Host_Driver/socket.c **** //!          To manipulate options at the socket level, level is specified as 
 778:../libraries/CC3000_Host_Driver/socket.c **** //!          SOL_SOCKET. To manipulate options at any other level the protocol 
 779:../libraries/CC3000_Host_Driver/socket.c **** //!          number of the appropriate protocol controlling the option is 
 780:../libraries/CC3000_Host_Driver/socket.c **** //!          supplied. For example, to indicate that an option is to be 
 781:../libraries/CC3000_Host_Driver/socket.c **** //!          interpreted by the TCP protocol, level should be set to the 
 782:../libraries/CC3000_Host_Driver/socket.c **** //!          protocol number of TCP; 
 783:../libraries/CC3000_Host_Driver/socket.c **** //!          The parameters optval and optlen are used to access optval - 
 784:../libraries/CC3000_Host_Driver/socket.c **** //!          use for setsockopt(). For getsockopt() they identify a buffer
 785:../libraries/CC3000_Host_Driver/socket.c **** //!          in which the value for the requested option(s) are to 
 786:../libraries/CC3000_Host_Driver/socket.c **** //!          be returned. For getsockopt(), optlen is a value-result 
 787:../libraries/CC3000_Host_Driver/socket.c **** //!          parameter, initially containing the size of the buffer 
 788:../libraries/CC3000_Host_Driver/socket.c **** //!          pointed to by option_value, and modified on return to 
 789:../libraries/CC3000_Host_Driver/socket.c **** //!          indicate the actual size of the value returned. If no option 
 790:../libraries/CC3000_Host_Driver/socket.c **** //!          value is to be supplied or returned, option_value may be NULL.
 791:../libraries/CC3000_Host_Driver/socket.c **** //!
 792:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note   On this version the following two socket options are enabled:
 793:../libraries/CC3000_Host_Driver/socket.c **** //!    			 The only protocol level supported in this version
 794:../libraries/CC3000_Host_Driver/socket.c **** //!          is SOL_SOCKET (level).
 795:../libraries/CC3000_Host_Driver/socket.c **** //!		       1. SOCKOPT_RECV_TIMEOUT (optname)
 796:../libraries/CC3000_Host_Driver/socket.c **** //!			      SOCKOPT_RECV_TIMEOUT configures recv and recvfrom timeout 
 797:../libraries/CC3000_Host_Driver/socket.c **** //!           in milliseconds.
 798:../libraries/CC3000_Host_Driver/socket.c **** //!		        In that case optval should be pointer to unsigned long.
 799:../libraries/CC3000_Host_Driver/socket.c **** //!		       2. SOCKOPT_NONBLOCK (optname). sets the socket non-blocking mode on 
 800:../libraries/CC3000_Host_Driver/socket.c **** //!           or off.
 801:../libraries/CC3000_Host_Driver/socket.c **** //!		        In that case optval should be SOCK_ON or SOCK_OFF (optval).
 802:../libraries/CC3000_Host_Driver/socket.c **** //!
 803:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa setsockopt
 804:../libraries/CC3000_Host_Driver/socket.c **** //
 805:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 806:../libraries/CC3000_Host_Driver/socket.c **** 
 807:../libraries/CC3000_Host_Driver/socket.c **** int
 808:../libraries/CC3000_Host_Driver/socket.c **** getsockopt (long sd, long level, long optname, void *optval, socklen_t *optlen)
 809:../libraries/CC3000_Host_Driver/socket.c **** {
 1040              		.loc 1 809 0
 1041              		.cfi_startproc
 1042              		@ args = 4, pretend = 0, frame = 8
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL126:
 1045 0000 F7B5     		push	{r0, r1, r2, r4, r5, r6, r7, lr}
 1046              	.LCFI11:
 1047              		.cfi_def_cfa_offset 32
 1048              		.cfi_offset 0, -32
 1049              		.cfi_offset 1, -28
 1050              		.cfi_offset 2, -24
 1051              		.cfi_offset 4, -20
 1052              		.cfi_offset 5, -16
 1053              		.cfi_offset 6, -12
 1054              		.cfi_offset 7, -8
 1055              		.cfi_offset 14, -4
 1056              		.loc 1 809 0
 1057 0002 1D46     		mov	r5, r3
 810:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 811:../libraries/CC3000_Host_Driver/socket.c **** 	tBsdGetSockOptReturnParams  tRetParams;
 812:../libraries/CC3000_Host_Driver/socket.c **** 	
 813:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 1058              		.loc 1 813 0
 1059 0004 164B     		ldr	r3, .L85
 1060              	.LVL127:
 809:../libraries/CC3000_Host_Driver/socket.c **** {
 1061              		.loc 1 809 0
 1062 0006 8646     		mov	lr, r0
 1063              		.loc 1 813 0
 1064 0008 9C68     		ldr	r4, [r3, #8]
 1065              	.LVL128:
 809:../libraries/CC3000_Host_Driver/socket.c **** {
 1066              		.loc 1 809 0
 1067 000a 0E46     		mov	r6, r1
 814:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 815:../libraries/CC3000_Host_Driver/socket.c **** 	
 816:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
 817:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 1068              		.loc 1 817 0
 1069 000c 04F10900 		add	r0, r4, #9
 1070              	.LVL129:
 1071 0010 7146     		mov	r1, lr
 1072              	.LVL130:
 809:../libraries/CC3000_Host_Driver/socket.c **** {
 1073              		.loc 1 809 0
 1074 0012 1746     		mov	r7, r2
 1075              		.loc 1 817 0
 1076 0014 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1077              	.LVL131:
 818:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, level);
 1078              		.loc 1 818 0
 1079 0018 3146     		mov	r1, r6
 1080 001a FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1081              	.LVL132:
 819:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, optname);
 1082              		.loc 1 819 0
 1083 001e 3946     		mov	r1, r7
 1084 0020 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1085              	.LVL133:
 820:../libraries/CC3000_Host_Driver/socket.c **** 	
 821:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
 822:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_GETSOCKOPT,
 1086              		.loc 1 822 0
 1087 0024 0C22     		movs	r2, #12
 1088 0026 2146     		mov	r1, r4
 1089 0028 41F20A00 		movw	r0, #4106
 1090 002c FFF7FEFF 		bl	hci_command_send
 1091              	.LVL134:
 823:../libraries/CC3000_Host_Driver/socket.c **** 									 ptr, SOCKET_GET_SOCK_OPT_PARAMS_LEN);
 824:../libraries/CC3000_Host_Driver/socket.c **** 	
 825:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 826:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_CMND_GETSOCKOPT, &tRetParams);
 1092              		.loc 1 826 0
 1093 0030 41F20A00 		movw	r0, #4106
 1094 0034 6946     		mov	r1, sp
 1095 0036 FFF7FEFF 		bl	SimpleLinkWaitEvent
 1096              	.LVL135:
 827:../libraries/CC3000_Host_Driver/socket.c **** 	
 828:../libraries/CC3000_Host_Driver/socket.c **** 	if (((signed char)tRetParams.iStatus) >= 0)
 1097              		.loc 1 828 0
 1098 003a 9DF90400 		ldrsb	r0, [sp, #4]
 1099 003e 0028     		cmp	r0, #0
 1100 0040 06DB     		blt	.L83
 829:../libraries/CC3000_Host_Driver/socket.c **** 	{
 830:../libraries/CC3000_Host_Driver/socket.c **** 		*optlen = 4;
 831:../libraries/CC3000_Host_Driver/socket.c **** 		memcpy(optval, tRetParams.ucOptValue, 4);
 1101              		.loc 1 831 0
 1102 0042 0098     		ldr	r0, [sp, #0]	@ unaligned
 830:../libraries/CC3000_Host_Driver/socket.c **** 		*optlen = 4;
 1103              		.loc 1 830 0
 1104 0044 089A     		ldr	r2, [sp, #32]
 1105 0046 0423     		movs	r3, #4
 1106 0048 1360     		str	r3, [r2, #0]
 1107              		.loc 1 831 0
 1108 004a 2860     		str	r0, [r5, #0]	@ unaligned
 832:../libraries/CC3000_Host_Driver/socket.c **** 		return (0);
 1109              		.loc 1 832 0
 1110 004c 0020     		movs	r0, #0
 1111 004e 06E0     		b	.L84
 1112              	.L83:
 833:../libraries/CC3000_Host_Driver/socket.c **** 	}
 834:../libraries/CC3000_Host_Driver/socket.c **** 	else
 835:../libraries/CC3000_Host_Driver/socket.c **** 	{
 836:../libraries/CC3000_Host_Driver/socket.c **** 		errno = tRetParams.iStatus;
 1113              		.loc 1 836 0
 1114 0050 FFF7FEFF 		bl	__errno
 1115              	.LVL136:
 1116 0054 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 1117 0058 0160     		str	r1, [r0, #0]
 837:../libraries/CC3000_Host_Driver/socket.c **** 		return (-1);
 1118              		.loc 1 837 0
 1119 005a 4FF0FF30 		mov	r0, #-1
 1120              	.L84:
 838:../libraries/CC3000_Host_Driver/socket.c **** 	}
 839:../libraries/CC3000_Host_Driver/socket.c **** }
 1121              		.loc 1 839 0
 1122 005e FEBD     		pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 1123              	.L86:
 1124              		.align	2
 1125              	.L85:
 1126 0060 00000000 		.word	tSLInformation
 1127              		.cfi_endproc
 1128              	.LFE10:
 1130              		.section	.text.simple_link_recv,"ax",%progbits
 1131              		.align	1
 1132              		.global	simple_link_recv
 1133              		.thumb
 1134              		.thumb_func
 1136              	simple_link_recv:
 1137              	.LFB11:
 840:../libraries/CC3000_Host_Driver/socket.c **** 
 841:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 842:../libraries/CC3000_Host_Driver/socket.c **** //
 843:../libraries/CC3000_Host_Driver/socket.c **** //!  simple_link_recv
 844:../libraries/CC3000_Host_Driver/socket.c **** //!
 845:../libraries/CC3000_Host_Driver/socket.c **** //!  @param sd       socket handle
 846:../libraries/CC3000_Host_Driver/socket.c **** //!  @param buf      read buffer
 847:../libraries/CC3000_Host_Driver/socket.c **** //!  @param len      buffer length
 848:../libraries/CC3000_Host_Driver/socket.c **** //!  @param flags    indicates blocking or non-blocking operation
 849:../libraries/CC3000_Host_Driver/socket.c **** //!  @param from     pointer to an address structure indicating source address
 850:../libraries/CC3000_Host_Driver/socket.c **** //!  @param fromlen  source address structure size
 851:../libraries/CC3000_Host_Driver/socket.c **** //!
 852:../libraries/CC3000_Host_Driver/socket.c **** //!  @return         Return the number of bytes received, or -1 if an error
 853:../libraries/CC3000_Host_Driver/socket.c **** //!                  occurred
 854:../libraries/CC3000_Host_Driver/socket.c **** //!
 855:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief          Read data from socket
 856:../libraries/CC3000_Host_Driver/socket.c **** //!                  Return the length of the message on successful completion.
 857:../libraries/CC3000_Host_Driver/socket.c **** //!                  If a message is too long to fit in the supplied buffer,
 858:../libraries/CC3000_Host_Driver/socket.c **** //!                  excess bytes may be discarded depending on the type of
 859:../libraries/CC3000_Host_Driver/socket.c **** //!                  socket the message is received from
 860:../libraries/CC3000_Host_Driver/socket.c **** //
 861:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 862:../libraries/CC3000_Host_Driver/socket.c **** int
 863:../libraries/CC3000_Host_Driver/socket.c **** simple_link_recv(long sd, void *buf, long len, long flags, sockaddr *from,
 864:../libraries/CC3000_Host_Driver/socket.c ****                 socklen_t *fromlen, long opcode)
 865:../libraries/CC3000_Host_Driver/socket.c **** {
 1138              		.loc 1 865 0
 1139              		.cfi_startproc
 1140              		@ args = 12, pretend = 0, frame = 16
 1141              		@ frame_needed = 0, uses_anonymous_args = 0
 1142              	.LVL137:
 1143 0000 2DE9FF41 		push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 1144              	.LCFI12:
 1145              		.cfi_def_cfa_offset 40
 1146              		.cfi_offset 0, -40
 1147              		.cfi_offset 1, -36
 1148              		.cfi_offset 2, -32
 1149              		.cfi_offset 3, -28
 1150              		.cfi_offset 4, -24
 1151              		.cfi_offset 5, -20
 1152              		.cfi_offset 6, -16
 1153              		.cfi_offset 7, -12
 1154              		.cfi_offset 8, -8
 1155              		.cfi_offset 14, -4
 1156              		.loc 1 865 0
 1157 0004 9846     		mov	r8, r3
 866:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *args;
 867:../libraries/CC3000_Host_Driver/socket.c **** 	tBsdReadReturnParams tSocketReadEvent;
 868:../libraries/CC3000_Host_Driver/socket.c **** 	
 869:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 1158              		.loc 1 869 0
 1159 0006 154B     		ldr	r3, .L89
 1160              	.LVL138:
 865:../libraries/CC3000_Host_Driver/socket.c **** {
 1161              		.loc 1 865 0
 1162 0008 0746     		mov	r7, r0
 1163              		.loc 1 869 0
 1164 000a 9D68     		ldr	r5, [r3, #8]
 1165              	.LVL139:
 865:../libraries/CC3000_Host_Driver/socket.c **** {
 1166              		.loc 1 865 0
 1167 000c 1446     		mov	r4, r2
 1168 000e 0E46     		mov	r6, r1
 870:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_CMD);
 871:../libraries/CC3000_Host_Driver/socket.c **** 	
 872:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in HCI packet structure
 873:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 1169              		.loc 1 873 0
 1170 0010 05F10900 		add	r0, r5, #9
 1171              	.LVL140:
 1172 0014 3946     		mov	r1, r7
 1173              	.LVL141:
 1174 0016 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1175              	.LVL142:
 874:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, len);
 1176              		.loc 1 874 0
 1177 001a 2146     		mov	r1, r4
 1178 001c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1179              	.LVL143:
 875:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, flags);
 1180              		.loc 1 875 0
 1181 0020 4146     		mov	r1, r8
 1182 0022 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1183              	.LVL144:
 876:../libraries/CC3000_Host_Driver/socket.c **** 	
 877:../libraries/CC3000_Host_Driver/socket.c **** 	// Generate the read command, and wait for the 
 878:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(opcode,  ptr, SOCKET_RECV_FROM_PARAMS_LEN);
 1184              		.loc 1 878 0
 1185 0026 BDF83040 		ldrh	r4, [sp, #48]
 1186              	.LVL145:
 1187 002a 0C22     		movs	r2, #12
 1188 002c 2946     		mov	r1, r5
 1189 002e 2046     		mov	r0, r4
 1190 0030 FFF7FEFF 		bl	hci_command_send
 1191              	.LVL146:
 879:../libraries/CC3000_Host_Driver/socket.c **** 	
 880:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
 881:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(opcode, &tSocketReadEvent);
 1192              		.loc 1 881 0
 1193 0034 2046     		mov	r0, r4
 1194 0036 01A9     		add	r1, sp, #4
 1195 0038 FFF7FEFF 		bl	SimpleLinkWaitEvent
 1196              	.LVL147:
 882:../libraries/CC3000_Host_Driver/socket.c **** 	
 883:../libraries/CC3000_Host_Driver/socket.c **** 	// In case the number of bytes is more then zero - read data
 884:../libraries/CC3000_Host_Driver/socket.c **** 	if (tSocketReadEvent.iNumberOfBytes > 0)
 1197              		.loc 1 884 0
 1198 003c 0298     		ldr	r0, [sp, #8]
 1199 003e 0028     		cmp	r0, #0
 1200 0040 04DD     		ble	.L88
 885:../libraries/CC3000_Host_Driver/socket.c **** 	{
 886:../libraries/CC3000_Host_Driver/socket.c **** 		// Wait for the data in a synchronous way. Here we assume that the bug is 
 887:../libraries/CC3000_Host_Driver/socket.c **** 		// big enough to store also parameters of receive from too....
 888:../libraries/CC3000_Host_Driver/socket.c **** 		SimpleLinkWaitData(buf, (unsigned char *)from, (unsigned char *)fromlen);
 1201              		.loc 1 888 0
 1202 0042 3046     		mov	r0, r6
 1203 0044 0A99     		ldr	r1, [sp, #40]
 1204 0046 0B9A     		ldr	r2, [sp, #44]
 1205 0048 FFF7FEFF 		bl	SimpleLinkWaitData
 1206              	.LVL148:
 1207              	.L88:
 889:../libraries/CC3000_Host_Driver/socket.c **** 	}
 890:../libraries/CC3000_Host_Driver/socket.c **** 	
 891:../libraries/CC3000_Host_Driver/socket.c **** 	errno = tSocketReadEvent.iNumberOfBytes;
 1208              		.loc 1 891 0
 1209 004c FFF7FEFF 		bl	__errno
 1210              	.LVL149:
 1211 0050 0299     		ldr	r1, [sp, #8]
 1212 0052 0160     		str	r1, [r0, #0]
 892:../libraries/CC3000_Host_Driver/socket.c **** 	
 893:../libraries/CC3000_Host_Driver/socket.c **** 	return(tSocketReadEvent.iNumberOfBytes);
 894:../libraries/CC3000_Host_Driver/socket.c **** }
 1213              		.loc 1 894 0
 1214 0054 0846     		mov	r0, r1
 1215 0056 04B0     		add	sp, sp, #16
 1216 0058 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 1217              	.L90:
 1218              		.align	2
 1219              	.L89:
 1220 005c 00000000 		.word	tSLInformation
 1221              		.cfi_endproc
 1222              	.LFE11:
 1224              		.section	.text.recv,"ax",%progbits
 1225              		.align	1
 1226              		.global	recv
 1227              		.thumb
 1228              		.thumb_func
 1230              	recv:
 1231              	.LFB12:
 895:../libraries/CC3000_Host_Driver/socket.c **** 
 896:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 897:../libraries/CC3000_Host_Driver/socket.c **** //
 898:../libraries/CC3000_Host_Driver/socket.c **** //!  recv
 899:../libraries/CC3000_Host_Driver/socket.c **** //!
 900:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]  sd     socket handle
 901:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out] buf    Points to the buffer where the message should be stored
 902:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]  len    Specifies the length in bytes of the buffer pointed to 
 903:../libraries/CC3000_Host_Driver/socket.c **** //!                     by the buffer argument.
 904:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] flags   Specifies the type of message reception. 
 905:../libraries/CC3000_Host_Driver/socket.c **** //!                     On this version, this parameter is not supported.
 906:../libraries/CC3000_Host_Driver/socket.c **** //!
 907:../libraries/CC3000_Host_Driver/socket.c **** //!  @return         Return the number of bytes received, or -1 if an error
 908:../libraries/CC3000_Host_Driver/socket.c **** //!                  occurred
 909:../libraries/CC3000_Host_Driver/socket.c **** //!
 910:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief          function receives a message from a connection-mode socket
 911:../libraries/CC3000_Host_Driver/socket.c **** //!
 912:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa recvfrom
 913:../libraries/CC3000_Host_Driver/socket.c **** //!
 914:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note On this version, only blocking mode is supported.
 915:../libraries/CC3000_Host_Driver/socket.c **** //
 916:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 917:../libraries/CC3000_Host_Driver/socket.c **** 
 918:../libraries/CC3000_Host_Driver/socket.c **** int
 919:../libraries/CC3000_Host_Driver/socket.c **** recv(long sd, void *buf, long len, long flags)
 920:../libraries/CC3000_Host_Driver/socket.c **** {
 1232              		.loc 1 920 0
 1233              		.cfi_startproc
 1234              		@ args = 0, pretend = 0, frame = 0
 1235              		@ frame_needed = 0, uses_anonymous_args = 0
 1236              	.LVL150:
 1237 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1238              	.LCFI13:
 1239              		.cfi_def_cfa_offset 24
 1240              		.cfi_offset 0, -24
 1241              		.cfi_offset 1, -20
 1242              		.cfi_offset 2, -16
 1243              		.cfi_offset 3, -12
 1244              		.cfi_offset 4, -8
 1245              		.cfi_offset 14, -4
 921:../libraries/CC3000_Host_Driver/socket.c **** 	return(simple_link_recv(sd, buf, len, flags, NULL, NULL, HCI_CMND_RECV));
 1246              		.loc 1 921 0
 1247 0002 0024     		movs	r4, #0
 1248 0004 0094     		str	r4, [sp, #0]
 1249 0006 0194     		str	r4, [sp, #4]
 1250 0008 41F20404 		movw	r4, #4100
 1251 000c 0294     		str	r4, [sp, #8]
 1252 000e FFF7FEFF 		bl	simple_link_recv
 1253              	.LVL151:
 922:../libraries/CC3000_Host_Driver/socket.c **** }
 1254              		.loc 1 922 0
 1255 0012 04B0     		add	sp, sp, #16
 1256 0014 10BD     		pop	{r4, pc}
 1257              		.cfi_endproc
 1258              	.LFE12:
 1260              		.section	.text.recvfrom,"ax",%progbits
 1261              		.align	1
 1262              		.global	recvfrom
 1263              		.thumb
 1264              		.thumb_func
 1266              	recvfrom:
 1267              	.LFB13:
 923:../libraries/CC3000_Host_Driver/socket.c **** 
 924:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 925:../libraries/CC3000_Host_Driver/socket.c **** //
 926:../libraries/CC3000_Host_Driver/socket.c **** //!  recvfrom
 927:../libraries/CC3000_Host_Driver/socket.c **** //!
 928:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]  sd     socket handle
 929:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[out] buf    Points to the buffer where the message should be stored
 930:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in]  len    Specifies the length in bytes of the buffer pointed to 
 931:../libraries/CC3000_Host_Driver/socket.c **** //!                     by the buffer argument.
 932:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] flags   Specifies the type of message reception. 
 933:../libraries/CC3000_Host_Driver/socket.c **** //!                     On this version, this parameter is not supported.
 934:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] from   pointer to an address structure indicating the source
 935:../libraries/CC3000_Host_Driver/socket.c **** //!                    address: sockaddr. On this version only AF_INET is
 936:../libraries/CC3000_Host_Driver/socket.c **** //!                    supported.
 937:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] fromlen   source address tructure size
 938:../libraries/CC3000_Host_Driver/socket.c **** //!
 939:../libraries/CC3000_Host_Driver/socket.c **** //!  @return         Return the number of bytes received, or -1 if an error
 940:../libraries/CC3000_Host_Driver/socket.c **** //!                  occurred
 941:../libraries/CC3000_Host_Driver/socket.c **** //!
 942:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief         read data from socket
 943:../libraries/CC3000_Host_Driver/socket.c **** //!                 function receives a message from a connection-mode or
 944:../libraries/CC3000_Host_Driver/socket.c **** //!                 connectionless-mode socket. Note that raw sockets are not
 945:../libraries/CC3000_Host_Driver/socket.c **** //!                 supported.
 946:../libraries/CC3000_Host_Driver/socket.c **** //!
 947:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa recv
 948:../libraries/CC3000_Host_Driver/socket.c **** //!
 949:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note On this version, only blocking mode is supported.
 950:../libraries/CC3000_Host_Driver/socket.c **** //
 951:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 952:../libraries/CC3000_Host_Driver/socket.c **** int
 953:../libraries/CC3000_Host_Driver/socket.c **** recvfrom(long sd, void *buf, long len, long flags, sockaddr *from,
 954:../libraries/CC3000_Host_Driver/socket.c ****          socklen_t *fromlen)
 955:../libraries/CC3000_Host_Driver/socket.c **** {
 1268              		.loc 1 955 0
 1269              		.cfi_startproc
 1270              		@ args = 8, pretend = 0, frame = 0
 1271              		@ frame_needed = 0, uses_anonymous_args = 0
 1272              	.LVL152:
 1273 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1274              	.LCFI14:
 1275              		.cfi_def_cfa_offset 24
 1276              		.cfi_offset 0, -24
 1277              		.cfi_offset 1, -20
 1278              		.cfi_offset 2, -16
 1279              		.cfi_offset 3, -12
 1280              		.cfi_offset 4, -8
 1281              		.cfi_offset 14, -4
 956:../libraries/CC3000_Host_Driver/socket.c **** 	return(simple_link_recv(sd, buf, len, flags, from, fromlen,
 1282              		.loc 1 956 0
 1283 0002 069C     		ldr	r4, [sp, #24]
 1284 0004 0094     		str	r4, [sp, #0]
 1285 0006 079C     		ldr	r4, [sp, #28]
 1286 0008 0194     		str	r4, [sp, #4]
 1287 000a 41F20D04 		movw	r4, #4109
 1288 000e 0294     		str	r4, [sp, #8]
 1289 0010 FFF7FEFF 		bl	simple_link_recv
 1290              	.LVL153:
 957:../libraries/CC3000_Host_Driver/socket.c **** 													HCI_CMND_RECVFROM));
 958:../libraries/CC3000_Host_Driver/socket.c **** }
 1291              		.loc 1 958 0
 1292 0014 04B0     		add	sp, sp, #16
 1293 0016 10BD     		pop	{r4, pc}
 1294              		.cfi_endproc
 1295              	.LFE13:
 1297              		.section	.text.simple_link_send,"ax",%progbits
 1298              		.align	1
 1299              		.global	simple_link_send
 1300              		.thumb
 1301              		.thumb_func
 1303              	simple_link_send:
 1304              	.LFB14:
 959:../libraries/CC3000_Host_Driver/socket.c **** 
 960:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 961:../libraries/CC3000_Host_Driver/socket.c **** //
 962:../libraries/CC3000_Host_Driver/socket.c **** //!  simple_link_send
 963:../libraries/CC3000_Host_Driver/socket.c **** //!
 964:../libraries/CC3000_Host_Driver/socket.c **** //!  @param sd       socket handle
 965:../libraries/CC3000_Host_Driver/socket.c **** //!  @param buf      write buffer
 966:../libraries/CC3000_Host_Driver/socket.c **** //!  @param len      buffer length
 967:../libraries/CC3000_Host_Driver/socket.c **** //!  @param flags    On this version, this parameter is not supported
 968:../libraries/CC3000_Host_Driver/socket.c **** //!  @param to       pointer to an address structure indicating destination
 969:../libraries/CC3000_Host_Driver/socket.c **** //!                  address
 970:../libraries/CC3000_Host_Driver/socket.c **** //!  @param tolen    destination address structure size
 971:../libraries/CC3000_Host_Driver/socket.c **** //!
 972:../libraries/CC3000_Host_Driver/socket.c **** //!  @return         Return the number of bytes transmitted, or -1 if an error
 973:../libraries/CC3000_Host_Driver/socket.c **** //!                  occurred, or -2 in case there are no free buffers available
 974:../libraries/CC3000_Host_Driver/socket.c **** //!                 (only when SEND_NON_BLOCKING is enabled)
 975:../libraries/CC3000_Host_Driver/socket.c **** //!
 976:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief          This function is used to transmit a message to another
 977:../libraries/CC3000_Host_Driver/socket.c **** //!                  socket
 978:../libraries/CC3000_Host_Driver/socket.c **** //
 979:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
 980:../libraries/CC3000_Host_Driver/socket.c **** int
 981:../libraries/CC3000_Host_Driver/socket.c **** simple_link_send(long sd, const void *buf, long len, long flags,
 982:../libraries/CC3000_Host_Driver/socket.c ****               const sockaddr *to, long tolen, long opcode)
 983:../libraries/CC3000_Host_Driver/socket.c **** {    
 1305              		.loc 1 983 0
 1306              		.cfi_startproc
 1307              		@ args = 12, pretend = 0, frame = 24
 1308              		@ frame_needed = 0, uses_anonymous_args = 0
 1309              	.LVL154:
 1310 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
 1311              	.LCFI15:
 1312              		.cfi_def_cfa_offset 36
 1313              		.cfi_offset 4, -36
 1314              		.cfi_offset 5, -32
 1315              		.cfi_offset 6, -28
 1316              		.cfi_offset 7, -24
 1317              		.cfi_offset 8, -20
 1318              		.cfi_offset 9, -16
 1319              		.cfi_offset 10, -12
 1320              		.cfi_offset 11, -8
 1321              		.cfi_offset 14, -4
 1322 0004 89B0     		sub	sp, sp, #36
 1323              	.LCFI16:
 1324              		.cfi_def_cfa_offset 72
 1325              		.loc 1 983 0
 1326 0006 0391     		str	r1, [sp, #12]
 1327 0008 1446     		mov	r4, r2
 1328 000a 9B46     		mov	fp, r3
 1329 000c 139E     		ldr	r6, [sp, #76]
 1330 000e 149D     		ldr	r5, [sp, #80]
 984:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char uArgSize,  addrlen;
 985:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned char *ptr, *pDataPtr, *args;
 986:../libraries/CC3000_Host_Driver/socket.c **** 	unsigned long addr_offset;
 987:../libraries/CC3000_Host_Driver/socket.c **** 	int res;
 988:../libraries/CC3000_Host_Driver/socket.c ****         tBsdReadReturnParams tSocketSendEvent;
 989:../libraries/CC3000_Host_Driver/socket.c **** 	
 990:../libraries/CC3000_Host_Driver/socket.c **** 	// Check the bsd_arguments
 991:../libraries/CC3000_Host_Driver/socket.c **** 	if (0 != (res = HostFlowControlConsumeBuff(sd)))
 1331              		.loc 1 991 0
 1332 0010 0290     		str	r0, [sp, #8]
 1333 0012 FFF7FEFF 		bl	HostFlowControlConsumeBuff
 1334              	.LVL155:
 1335 0016 DDF808C0 		ldr	ip, [sp, #8]
 1336 001a 0028     		cmp	r0, #0
 1337 001c 57D1     		bne	.L94
 992:../libraries/CC3000_Host_Driver/socket.c **** 	{
 993:../libraries/CC3000_Host_Driver/socket.c **** 		return res;
 994:../libraries/CC3000_Host_Driver/socket.c **** 	}
 995:../libraries/CC3000_Host_Driver/socket.c **** 	
 996:../libraries/CC3000_Host_Driver/socket.c **** 	//Update the number of sent packets
 997:../libraries/CC3000_Host_Driver/socket.c **** 	tSLInformation.NumberOfSentPackets++;
 1338              		.loc 1 997 0
 1339 001e 2D4B     		ldr	r3, .L110
 1340 0020 9A6B     		ldr	r2, [r3, #56]
 1341 0022 511C     		adds	r1, r2, #1
 1342 0024 9963     		str	r1, [r3, #56]
 998:../libraries/CC3000_Host_Driver/socket.c **** 	
 999:../libraries/CC3000_Host_Driver/socket.c **** 	// Allocate a buffer and construct a packet and send it over spi
1000:../libraries/CC3000_Host_Driver/socket.c **** 	ptr = tSLInformation.pucTxCommandBuffer;
 1343              		.loc 1 1000 0
 1344 0026 D3F80890 		ldr	r9, [r3, #8]
 1345              	.LVL156:
1001:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_DATA);
1002:../libraries/CC3000_Host_Driver/socket.c **** 	
1003:../libraries/CC3000_Host_Driver/socket.c **** 	// Update the offset of data and parameters according to the command
1004:../libraries/CC3000_Host_Driver/socket.c **** 	switch(opcode)
 1346              		.loc 1 1004 0
 1347 002a 812D     		cmp	r5, #129
1001:../libraries/CC3000_Host_Driver/socket.c **** 	args = (ptr + HEADERS_SIZE_DATA);
 1348              		.loc 1 1001 0
 1349 002c 09F10A03 		add	r3, r9, #10
 1350              	.LVL157:
 1351              		.loc 1 1004 0
 1352 0030 07D0     		beq	.L96
 1353 0032 832D     		cmp	r5, #131
 1354 0034 0AD1     		bne	.L95
1005:../libraries/CC3000_Host_Driver/socket.c **** 	{ 
1006:../libraries/CC3000_Host_Driver/socket.c **** 	case HCI_CMND_SENDTO:
1007:../libraries/CC3000_Host_Driver/socket.c **** 		{
1008:../libraries/CC3000_Host_Driver/socket.c **** 			addr_offset = len + sizeof(len) + sizeof(len);
 1355              		.loc 1 1008 0
 1356 0036 04F1080A 		add	sl, r4, #8
 1357              	.LVL158:
1009:../libraries/CC3000_Host_Driver/socket.c **** 			addrlen = 8;
1010:../libraries/CC3000_Host_Driver/socket.c **** 			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
1011:../libraries/CC3000_Host_Driver/socket.c **** 			pDataPtr = ptr + HEADERS_SIZE_DATA + SOCKET_SENDTO_PARAMS_LEN;
 1358              		.loc 1 1011 0
 1359 003a 09F12208 		add	r8, r9, #34
 1360              	.LVL159:
1010:../libraries/CC3000_Host_Driver/socket.c **** 			uArgSize = SOCKET_SENDTO_PARAMS_LEN;
 1361              		.loc 1 1010 0
 1362 003e 1827     		movs	r7, #24
1012:../libraries/CC3000_Host_Driver/socket.c **** 			break;
 1363              		.loc 1 1012 0
 1364 0040 04E0     		b	.L95
 1365              	.LVL160:
 1366              	.L96:
1013:../libraries/CC3000_Host_Driver/socket.c **** 		}
1014:../libraries/CC3000_Host_Driver/socket.c **** 		
1015:../libraries/CC3000_Host_Driver/socket.c **** 	case HCI_CMND_SEND:
1016:../libraries/CC3000_Host_Driver/socket.c **** 		{
1017:../libraries/CC3000_Host_Driver/socket.c **** 			tolen = 0;
1018:../libraries/CC3000_Host_Driver/socket.c **** 			to = NULL;
1019:../libraries/CC3000_Host_Driver/socket.c **** 			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
1020:../libraries/CC3000_Host_Driver/socket.c **** 			pDataPtr = ptr + HEADERS_SIZE_DATA + HCI_CMND_SEND_ARG_LENGTH;
 1367              		.loc 1 1020 0
 1368 0042 09F11A08 		add	r8, r9, #26
 1369              	.LVL161:
1019:../libraries/CC3000_Host_Driver/socket.c **** 			uArgSize = HCI_CMND_SEND_ARG_LENGTH;
 1370              		.loc 1 1019 0
 1371 0046 1027     		movs	r7, #16
1017:../libraries/CC3000_Host_Driver/socket.c **** 			tolen = 0;
 1372              		.loc 1 1017 0
 1373 0048 0646     		mov	r6, r0
1018:../libraries/CC3000_Host_Driver/socket.c **** 			to = NULL;
 1374              		.loc 1 1018 0
 1375 004a 1290     		str	r0, [sp, #72]
 1376              	.LVL162:
 1377              	.L95:
1021:../libraries/CC3000_Host_Driver/socket.c **** 			break;
1022:../libraries/CC3000_Host_Driver/socket.c **** 		}
1023:../libraries/CC3000_Host_Driver/socket.c **** 		
1024:../libraries/CC3000_Host_Driver/socket.c **** 	default:
1025:../libraries/CC3000_Host_Driver/socket.c **** 		{
1026:../libraries/CC3000_Host_Driver/socket.c **** 			break;
1027:../libraries/CC3000_Host_Driver/socket.c **** 		}
1028:../libraries/CC3000_Host_Driver/socket.c **** 	}
1029:../libraries/CC3000_Host_Driver/socket.c **** 	
1030:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in temporary command buffer
1031:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, sd);
 1378              		.loc 1 1031 0
 1379 004c 6146     		mov	r1, ip
 1380 004e 1846     		mov	r0, r3
 1381              	.LVL163:
 1382 0050 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1383              	.LVL164:
1032:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, uArgSize - sizeof(sd));
 1384              		.loc 1 1032 0
 1385 0054 391F     		subs	r1, r7, #4
 1386 0056 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1387              	.LVL165:
1033:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, len);
 1388              		.loc 1 1033 0
 1389 005a 2146     		mov	r1, r4
 1390 005c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1391              	.LVL166:
1034:../libraries/CC3000_Host_Driver/socket.c **** 	args = UINT32_TO_STREAM(args, flags);
 1392              		.loc 1 1034 0
 1393 0060 5946     		mov	r1, fp
 1394 0062 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1395              	.LVL167:
1035:../libraries/CC3000_Host_Driver/socket.c **** 	
1036:../libraries/CC3000_Host_Driver/socket.c **** 	if (opcode == HCI_CMND_SENDTO)
 1396              		.loc 1 1036 0
 1397 0066 832D     		cmp	r5, #131
 1398 0068 05D1     		bne	.L98
1037:../libraries/CC3000_Host_Driver/socket.c **** 	{
1038:../libraries/CC3000_Host_Driver/socket.c **** 		args = UINT32_TO_STREAM(args, addr_offset);
 1399              		.loc 1 1038 0
 1400 006a 5146     		mov	r1, sl
 1401 006c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1402              	.LVL168:
1039:../libraries/CC3000_Host_Driver/socket.c **** 		args = UINT32_TO_STREAM(args, addrlen);
 1403              		.loc 1 1039 0
 1404 0070 0821     		movs	r1, #8
 1405 0072 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1406              	.LVL169:
 1407              	.L98:
1018:../libraries/CC3000_Host_Driver/socket.c **** 			to = NULL;
 1408              		.loc 1 1018 0 discriminator 1
 1409 0076 0022     		movs	r2, #0
 1410              	.LVL170:
 1411              	.L99:
 1412              	.LBB6:
1040:../libraries/CC3000_Host_Driver/socket.c **** 	}
1041:../libraries/CC3000_Host_Driver/socket.c **** 	
1042:../libraries/CC3000_Host_Driver/socket.c **** 	// Copy the data received from user into the TX Buffer
1043:../libraries/CC3000_Host_Driver/socket.c **** 	ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)buf), len);
 1413              		.loc 1 1043 0 discriminator 1
 1414 0078 A242     		cmp	r2, r4
 1415 007a 05DA     		bge	.L109
 1416              	.L100:
 1417              		.loc 1 1043 0 is_stmt 0 discriminator 2
 1418 007c 0398     		ldr	r0, [sp, #12]
 1419 007e 815C     		ldrb	r1, [r0, r2]	@ zero_extendqisi2
 1420 0080 08F80210 		strb	r1, [r8, r2]
 1421 0084 0132     		adds	r2, r2, #1
 1422 0086 F7E7     		b	.L99
 1423              	.L109:
 1424 0088 002C     		cmp	r4, #0
 1425 008a A8BF     		it	ge
 1426 008c A044     		addge	r8, r8, r4
 1427              	.LBE6:
1044:../libraries/CC3000_Host_Driver/socket.c **** 	
1045:../libraries/CC3000_Host_Driver/socket.c **** 	// In case we are using SendTo, copy the to parameters
1046:../libraries/CC3000_Host_Driver/socket.c **** 	if (opcode == HCI_CMND_SENDTO)
 1428              		.loc 1 1046 0 is_stmt 1
 1429 008e 832D     		cmp	r5, #131
 1430 0090 0ED0     		beq	.L106
 1431              	.L105:
1047:../libraries/CC3000_Host_Driver/socket.c **** 	{	
1048:../libraries/CC3000_Host_Driver/socket.c **** 		ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)to), tolen);
1049:../libraries/CC3000_Host_Driver/socket.c **** 	}
1050:../libraries/CC3000_Host_Driver/socket.c **** 	
1051:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
1052:../libraries/CC3000_Host_Driver/socket.c **** 	hci_data_send(opcode, ptr, uArgSize, len,(unsigned char*)to, tolen);
 1432              		.loc 1 1052 0
 1433 0092 129A     		ldr	r2, [sp, #72]
 1434 0094 B6B2     		uxth	r6, r6
 1435              	.LVL171:
 1436 0096 0092     		str	r2, [sp, #0]
 1437 0098 0196     		str	r6, [sp, #4]
 1438 009a E8B2     		uxtb	r0, r5
 1439 009c 4946     		mov	r1, r9
 1440 009e 3A46     		mov	r2, r7
 1441 00a0 A3B2     		uxth	r3, r4
 1442 00a2 FFF7FEFF 		bl	hci_data_send
 1443              	.LVL172:
1053:../libraries/CC3000_Host_Driver/socket.c ****         
1054:../libraries/CC3000_Host_Driver/socket.c ****          if (opcode == HCI_CMND_SENDTO)
 1444              		.loc 1 1054 0
 1445 00a6 832D     		cmp	r5, #131
 1446 00a8 0BD1     		bne	.L107
1055:../libraries/CC3000_Host_Driver/socket.c ****             SimpleLinkWaitEvent(HCI_EVNT_SENDTO, &tSocketSendEvent);
 1447              		.loc 1 1055 0
 1448 00aa 41F20F00 		movw	r0, #4111
 1449 00ae 0AE0     		b	.L108
 1450              	.LVL173:
 1451              	.L106:
1046:../libraries/CC3000_Host_Driver/socket.c **** 	if (opcode == HCI_CMND_SENDTO)
 1452              		.loc 1 1046 0
 1453 00b0 0020     		movs	r0, #0
 1454              	.L101:
 1455              	.LBB7:
1048:../libraries/CC3000_Host_Driver/socket.c **** 		ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)to), tolen);
 1456              		.loc 1 1048 0 discriminator 1
 1457 00b2 B042     		cmp	r0, r6
 1458 00b4 EDDA     		bge	.L105
 1459              	.L104:
1048:../libraries/CC3000_Host_Driver/socket.c **** 		ARRAY_TO_STREAM(pDataPtr, ((unsigned char *)to), tolen);
 1460              		.loc 1 1048 0 is_stmt 0 discriminator 2
 1461 00b6 1299     		ldr	r1, [sp, #72]
 1462 00b8 0B5C     		ldrb	r3, [r1, r0]	@ zero_extendqisi2
 1463 00ba 08F80030 		strb	r3, [r8, r0]
 1464 00be 0130     		adds	r0, r0, #1
 1465 00c0 F7E7     		b	.L101
 1466              	.LVL174:
 1467              	.L107:
 1468              	.LBE7:
1056:../libraries/CC3000_Host_Driver/socket.c ****          else
1057:../libraries/CC3000_Host_Driver/socket.c ****             SimpleLinkWaitEvent(HCI_EVNT_SEND, &tSocketSendEvent);
 1469              		.loc 1 1057 0 is_stmt 1
 1470 00c2 41F20300 		movw	r0, #4099
 1471              	.L108:
 1472 00c6 05A9     		add	r1, sp, #20
 1473 00c8 FFF7FEFF 		bl	SimpleLinkWaitEvent
 1474              	.LVL175:
 1475 00cc 2046     		mov	r0, r4
 1476              	.LVL176:
 1477              	.L94:
1058:../libraries/CC3000_Host_Driver/socket.c **** 	
1059:../libraries/CC3000_Host_Driver/socket.c **** 	return	(len);
1060:../libraries/CC3000_Host_Driver/socket.c **** }
 1478              		.loc 1 1060 0
 1479 00ce 09B0     		add	sp, sp, #36
 1480 00d0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
 1481              	.L111:
 1482              		.align	2
 1483              	.L110:
 1484 00d4 00000000 		.word	tSLInformation
 1485              		.cfi_endproc
 1486              	.LFE14:
 1488              		.section	.text.send,"ax",%progbits
 1489              		.align	1
 1490              		.global	send
 1491              		.thumb
 1492              		.thumb_func
 1494              	send:
 1495              	.LFB15:
1061:../libraries/CC3000_Host_Driver/socket.c **** 
1062:../libraries/CC3000_Host_Driver/socket.c **** 
1063:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
1064:../libraries/CC3000_Host_Driver/socket.c **** //
1065:../libraries/CC3000_Host_Driver/socket.c **** //!  send
1066:../libraries/CC3000_Host_Driver/socket.c **** //!
1067:../libraries/CC3000_Host_Driver/socket.c **** //!  @param sd       socket handle
1068:../libraries/CC3000_Host_Driver/socket.c **** //!  @param buf      Points to a buffer containing the message to be sent
1069:../libraries/CC3000_Host_Driver/socket.c **** //!  @param len      message size in bytes
1070:../libraries/CC3000_Host_Driver/socket.c **** //!  @param flags    On this version, this parameter is not supported
1071:../libraries/CC3000_Host_Driver/socket.c **** //!
1072:../libraries/CC3000_Host_Driver/socket.c **** //!  @return         Return the number of bytes transmitted, or -1 if an
1073:../libraries/CC3000_Host_Driver/socket.c **** //!                  error occurred
1074:../libraries/CC3000_Host_Driver/socket.c **** //!
1075:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief          Write data to TCP socket
1076:../libraries/CC3000_Host_Driver/socket.c **** //!                  This function is used to transmit a message to another 
1077:../libraries/CC3000_Host_Driver/socket.c **** //!                  socket.
1078:../libraries/CC3000_Host_Driver/socket.c **** //!
1079:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note           On this version, only blocking mode is supported.
1080:../libraries/CC3000_Host_Driver/socket.c **** //!
1081:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa             sendto
1082:../libraries/CC3000_Host_Driver/socket.c **** //
1083:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
1084:../libraries/CC3000_Host_Driver/socket.c **** 
1085:../libraries/CC3000_Host_Driver/socket.c **** int
1086:../libraries/CC3000_Host_Driver/socket.c **** send(long sd, const void *buf, long len, long flags)
1087:../libraries/CC3000_Host_Driver/socket.c **** {
 1496              		.loc 1 1087 0
 1497              		.cfi_startproc
 1498              		@ args = 0, pretend = 0, frame = 0
 1499              		@ frame_needed = 0, uses_anonymous_args = 0
 1500              	.LVL177:
 1501 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1502              	.LCFI17:
 1503              		.cfi_def_cfa_offset 24
 1504              		.cfi_offset 0, -24
 1505              		.cfi_offset 1, -20
 1506              		.cfi_offset 2, -16
 1507              		.cfi_offset 3, -12
 1508              		.cfi_offset 4, -8
 1509              		.cfi_offset 14, -4
1088:../libraries/CC3000_Host_Driver/socket.c **** 	return(simple_link_send(sd, buf, len, flags, NULL, 0, HCI_CMND_SEND));
 1510              		.loc 1 1088 0
 1511 0002 0024     		movs	r4, #0
 1512 0004 0094     		str	r4, [sp, #0]
 1513 0006 0194     		str	r4, [sp, #4]
 1514 0008 8124     		movs	r4, #129
 1515 000a 0294     		str	r4, [sp, #8]
 1516 000c FFF7FEFF 		bl	simple_link_send
 1517              	.LVL178:
1089:../libraries/CC3000_Host_Driver/socket.c **** }
 1518              		.loc 1 1089 0
 1519 0010 04B0     		add	sp, sp, #16
 1520 0012 10BD     		pop	{r4, pc}
 1521              		.cfi_endproc
 1522              	.LFE15:
 1524              		.section	.text.sendto,"ax",%progbits
 1525              		.align	1
 1526              		.global	sendto
 1527              		.thumb
 1528              		.thumb_func
 1530              	sendto:
 1531              	.LFB16:
1090:../libraries/CC3000_Host_Driver/socket.c **** 
1091:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
1092:../libraries/CC3000_Host_Driver/socket.c **** //
1093:../libraries/CC3000_Host_Driver/socket.c **** //!  sendto
1094:../libraries/CC3000_Host_Driver/socket.c **** //!
1095:../libraries/CC3000_Host_Driver/socket.c **** //!  @param sd       socket handle
1096:../libraries/CC3000_Host_Driver/socket.c **** //!  @param buf      Points to a buffer containing the message to be sent
1097:../libraries/CC3000_Host_Driver/socket.c **** //!  @param len      message size in bytes
1098:../libraries/CC3000_Host_Driver/socket.c **** //!  @param flags    On this version, this parameter is not supported
1099:../libraries/CC3000_Host_Driver/socket.c **** //!  @param to       pointer to an address structure indicating the destination
1100:../libraries/CC3000_Host_Driver/socket.c **** //!                  address: sockaddr. On this version only AF_INET is
1101:../libraries/CC3000_Host_Driver/socket.c **** //!                  supported.
1102:../libraries/CC3000_Host_Driver/socket.c **** //!  @param tolen    destination address structure size
1103:../libraries/CC3000_Host_Driver/socket.c **** //!
1104:../libraries/CC3000_Host_Driver/socket.c **** //!  @return         Return the number of bytes transmitted, or -1 if an
1105:../libraries/CC3000_Host_Driver/socket.c **** //!                  error occurred
1106:../libraries/CC3000_Host_Driver/socket.c **** //!
1107:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief          Write data to TCP socket
1108:../libraries/CC3000_Host_Driver/socket.c **** //!                  This function is used to transmit a message to another 
1109:../libraries/CC3000_Host_Driver/socket.c **** //!                  socket.
1110:../libraries/CC3000_Host_Driver/socket.c **** //!
1111:../libraries/CC3000_Host_Driver/socket.c **** //!  @Note           On this version, only blocking mode is supported.
1112:../libraries/CC3000_Host_Driver/socket.c **** //!
1113:../libraries/CC3000_Host_Driver/socket.c **** //!  @sa             send
1114:../libraries/CC3000_Host_Driver/socket.c **** //
1115:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
1116:../libraries/CC3000_Host_Driver/socket.c **** 
1117:../libraries/CC3000_Host_Driver/socket.c **** int
1118:../libraries/CC3000_Host_Driver/socket.c **** sendto(long sd, const void *buf, long len, long flags, const sockaddr *to,
1119:../libraries/CC3000_Host_Driver/socket.c ****        socklen_t tolen)
1120:../libraries/CC3000_Host_Driver/socket.c **** {
 1532              		.loc 1 1120 0
 1533              		.cfi_startproc
 1534              		@ args = 8, pretend = 0, frame = 0
 1535              		@ frame_needed = 0, uses_anonymous_args = 0
 1536              	.LVL179:
 1537 0000 1FB5     		push	{r0, r1, r2, r3, r4, lr}
 1538              	.LCFI18:
 1539              		.cfi_def_cfa_offset 24
 1540              		.cfi_offset 0, -24
 1541              		.cfi_offset 1, -20
 1542              		.cfi_offset 2, -16
 1543              		.cfi_offset 3, -12
 1544              		.cfi_offset 4, -8
 1545              		.cfi_offset 14, -4
1121:../libraries/CC3000_Host_Driver/socket.c **** 	return(simple_link_send(sd, buf, len, flags, to, tolen, HCI_CMND_SENDTO));
 1546              		.loc 1 1121 0
 1547 0002 069C     		ldr	r4, [sp, #24]
 1548 0004 0094     		str	r4, [sp, #0]
 1549 0006 079C     		ldr	r4, [sp, #28]
 1550 0008 0194     		str	r4, [sp, #4]
 1551 000a 8324     		movs	r4, #131
 1552 000c 0294     		str	r4, [sp, #8]
 1553 000e FFF7FEFF 		bl	simple_link_send
 1554              	.LVL180:
1122:../libraries/CC3000_Host_Driver/socket.c **** }
 1555              		.loc 1 1122 0
 1556 0012 04B0     		add	sp, sp, #16
 1557 0014 10BD     		pop	{r4, pc}
 1558              		.cfi_endproc
 1559              	.LFE16:
 1561              		.section	.text.mdnsAdvertiser,"ax",%progbits
 1562              		.align	1
 1563              		.global	mdnsAdvertiser
 1564              		.thumb
 1565              		.thumb_func
 1567              	mdnsAdvertiser:
 1568              	.LFB17:
1123:../libraries/CC3000_Host_Driver/socket.c **** 
1124:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
1125:../libraries/CC3000_Host_Driver/socket.c **** //
1126:../libraries/CC3000_Host_Driver/socket.c **** //!  mdnsAdvertiser
1127:../libraries/CC3000_Host_Driver/socket.c **** //!
1128:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] mdnsEnabled         flag to enable/disable the mDNS feature
1129:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] deviceServiceName   Service name as part of the published
1130:../libraries/CC3000_Host_Driver/socket.c **** //!                                 canonical domain name
1131:../libraries/CC3000_Host_Driver/socket.c **** //!  @param[in] deviceServiceNameLength   Length of the service name
1132:../libraries/CC3000_Host_Driver/socket.c **** //!  
1133:../libraries/CC3000_Host_Driver/socket.c **** //!
1134:../libraries/CC3000_Host_Driver/socket.c **** //!  @return   On success, zero is returned, return SOC_ERROR if socket was not 
1135:../libraries/CC3000_Host_Driver/socket.c **** //!            opened successfully, or if an error occurred.
1136:../libraries/CC3000_Host_Driver/socket.c **** //!
1137:../libraries/CC3000_Host_Driver/socket.c **** //!  @brief    Set CC3000 in mDNS advertiser mode in order to advertise itself.
1138:../libraries/CC3000_Host_Driver/socket.c **** //
1139:../libraries/CC3000_Host_Driver/socket.c **** //*****************************************************************************
1140:../libraries/CC3000_Host_Driver/socket.c **** 
1141:../libraries/CC3000_Host_Driver/socket.c **** int
1142:../libraries/CC3000_Host_Driver/socket.c **** mdnsAdvertiser(unsigned short mdnsEnabled, char * deviceServiceName, unsigned short deviceServiceNa
1143:../libraries/CC3000_Host_Driver/socket.c **** {
 1569              		.loc 1 1143 0
 1570              		.cfi_startproc
 1571              		@ args = 0, pretend = 0, frame = 8
 1572              		@ frame_needed = 0, uses_anonymous_args = 0
 1573              	.LVL181:
1144:../libraries/CC3000_Host_Driver/socket.c **** 	int ret;
1145:../libraries/CC3000_Host_Driver/socket.c ****  	unsigned char *pTxBuffer, *pArgs;
1146:../libraries/CC3000_Host_Driver/socket.c **** 	
1147:../libraries/CC3000_Host_Driver/socket.c **** 	if (deviceServiceNameLength > MDNS_DEVICE_SERVICE_MAX_LENGTH)
 1574              		.loc 1 1147 0
 1575 0000 202A     		cmp	r2, #32
1143:../libraries/CC3000_Host_Driver/socket.c **** {
 1576              		.loc 1 1143 0
 1577 0002 73B5     		push	{r0, r1, r4, r5, r6, lr}
 1578              	.LCFI19:
 1579              		.cfi_def_cfa_offset 24
 1580              		.cfi_offset 0, -24
 1581              		.cfi_offset 1, -20
 1582              		.cfi_offset 4, -16
 1583              		.cfi_offset 5, -12
 1584              		.cfi_offset 6, -8
 1585              		.cfi_offset 14, -4
1143:../libraries/CC3000_Host_Driver/socket.c **** {
 1586              		.loc 1 1143 0
 1587 0004 0346     		mov	r3, r0
 1588 0006 0E46     		mov	r6, r1
 1589 0008 1446     		mov	r4, r2
 1590              		.loc 1 1147 0
 1591 000a 22D8     		bhi	.L118
1148:../libraries/CC3000_Host_Driver/socket.c **** 	{
1149:../libraries/CC3000_Host_Driver/socket.c **** 		return EFAIL;
1150:../libraries/CC3000_Host_Driver/socket.c **** 	}
1151:../libraries/CC3000_Host_Driver/socket.c **** 	
1152:../libraries/CC3000_Host_Driver/socket.c **** 	pTxBuffer = tSLInformation.pucTxCommandBuffer;
 1592              		.loc 1 1152 0
 1593 000c 124A     		ldr	r2, .L120
 1594              	.LVL182:
1153:../libraries/CC3000_Host_Driver/socket.c **** 	pArgs = (pTxBuffer + SIMPLE_LINK_HCI_CMND_TRANSPORT_HEADER_SIZE);
1154:../libraries/CC3000_Host_Driver/socket.c **** 	
1155:../libraries/CC3000_Host_Driver/socket.c **** 	// Fill in HCI packet structure
1156:../libraries/CC3000_Host_Driver/socket.c **** 	pArgs = UINT32_TO_STREAM(pArgs, mdnsEnabled);
 1595              		.loc 1 1156 0
 1596 000e 1946     		mov	r1, r3
 1597              	.LVL183:
1152:../libraries/CC3000_Host_Driver/socket.c **** 	pTxBuffer = tSLInformation.pucTxCommandBuffer;
 1598              		.loc 1 1152 0
 1599 0010 9568     		ldr	r5, [r2, #8]
 1600              	.LVL184:
 1601              		.loc 1 1156 0
 1602 0012 05F10900 		add	r0, r5, #9
 1603              	.LVL185:
 1604 0016 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1605              	.LVL186:
1157:../libraries/CC3000_Host_Driver/socket.c **** 	pArgs = UINT32_TO_STREAM(pArgs, 8);
 1606              		.loc 1 1157 0
 1607 001a 0821     		movs	r1, #8
 1608 001c FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1609              	.LVL187:
1158:../libraries/CC3000_Host_Driver/socket.c **** 	pArgs = UINT32_TO_STREAM(pArgs, deviceServiceNameLength);
 1610              		.loc 1 1158 0
 1611 0020 2146     		mov	r1, r4
 1612 0022 FFF7FEFF 		bl	UINT32_TO_STREAM_f
 1613              	.LVL188:
 1614              	.LBB8:
1159:../libraries/CC3000_Host_Driver/socket.c **** 	ARRAY_TO_STREAM(pArgs, deviceServiceName, deviceServiceNameLength);
 1615              		.loc 1 1159 0
 1616 0026 0022     		movs	r2, #0
 1617              	.LVL189:
 1618              	.L116:
 1619              		.loc 1 1159 0 is_stmt 0 discriminator 1
 1620 0028 A242     		cmp	r2, r4
 1621 002a 03DA     		bge	.L119
 1622              	.L117:
 1623              		.loc 1 1159 0 discriminator 2
 1624 002c B15C     		ldrb	r1, [r6, r2]	@ zero_extendqisi2
 1625 002e 8154     		strb	r1, [r0, r2]
 1626 0030 0132     		adds	r2, r2, #1
 1627 0032 F9E7     		b	.L116
 1628              	.L119:
 1629              	.LBE8:
1160:../libraries/CC3000_Host_Driver/socket.c **** 	
1161:../libraries/CC3000_Host_Driver/socket.c **** 	// Initiate a HCI command
1162:../libraries/CC3000_Host_Driver/socket.c **** 	hci_command_send(HCI_CMND_MDNS_ADVERTISE, pTxBuffer, SOCKET_MDNS_ADVERTISE_PARAMS_LEN + deviceServ
 1630              		.loc 1 1162 0 is_stmt 1
 1631 0034 04F10C03 		add	r3, r4, #12
 1632 0038 2946     		mov	r1, r5
 1633 003a DAB2     		uxtb	r2, r3
 1634 003c 41F21100 		movw	r0, #4113
 1635 0040 FFF7FEFF 		bl	hci_command_send
 1636              	.LVL190:
1163:../libraries/CC3000_Host_Driver/socket.c **** 	
1164:../libraries/CC3000_Host_Driver/socket.c **** 	// Since we are in blocking state - wait for event complete
1165:../libraries/CC3000_Host_Driver/socket.c **** 	SimpleLinkWaitEvent(HCI_EVNT_MDNS_ADVERTISE, &ret);
 1637              		.loc 1 1165 0
 1638 0044 41F21100 		movw	r0, #4113
 1639 0048 01A9     		add	r1, sp, #4
 1640 004a FFF7FEFF 		bl	SimpleLinkWaitEvent
 1641              	.LVL191:
1166:../libraries/CC3000_Host_Driver/socket.c **** 	
1167:../libraries/CC3000_Host_Driver/socket.c **** 	return ret;
 1642              		.loc 1 1167 0
 1643 004e 0198     		ldr	r0, [sp, #4]
 1644 0050 01E0     		b	.L115
 1645              	.LVL192:
 1646              	.L118:
1149:../libraries/CC3000_Host_Driver/socket.c **** 		return EFAIL;
 1647              		.loc 1 1149 0
 1648 0052 4FF0FF30 		mov	r0, #-1
 1649              	.LVL193:
 1650              	.L115:
1168:../libraries/CC3000_Host_Driver/socket.c **** 	
1169:../libraries/CC3000_Host_Driver/socket.c **** }
 1651              		.loc 1 1169 0
 1652 0056 7CBD     		pop	{r2, r3, r4, r5, r6, pc}
 1653              	.L121:
 1654              		.align	2
 1655              	.L120:
 1656 0058 00000000 		.word	tSLInformation
 1657              		.cfi_endproc
 1658              	.LFE17:
 1660              		.text
 1661              	.Letext0:
 1662              		.file 2 "../libraries/CC3000_Host_Driver/cc3000_common.h"
 1663              		.file 3 "../libraries/CC3000_Host_Driver/socket.h"
 1664              		.file 4 "../libraries/CC3000_Host_Driver/evnt_handler.h"
 1665              		.file 5 "../libraries/CC3000_Host_Driver/hci.h"
 1666              		.file 6 "/usr/local/gcc-arm-none-eabi-4_7-2013q1/bin/../lib/gcc/arm-none-eabi/4.7.3/../../../../ar
DEFINED SYMBOLS
                            *ABS*:0000000000000000 socket.c
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:19     .text.HostFlowControlConsumeBuff:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:24     .text.HostFlowControlConsumeBuff:0000000000000000 HostFlowControlConsumeBuff
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:85     .text.HostFlowControlConsumeBuff:0000000000000040 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:90     .text.socket:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:95     .text.socket:0000000000000000 socket
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:179    .text.socket:0000000000000058 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:184    .text.closesocket:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:189    .text.closesocket:0000000000000000 closesocket
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:259    .text.closesocket:0000000000000048 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:264    .text.accept:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:269    .text.accept:0000000000000000 accept
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:359    .text.accept:0000000000000060 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:364    .text.bind:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:369    .text.bind:0000000000000000 bind
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:450    .text.bind:0000000000000054 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:455    .text.listen:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:460    .text.listen:0000000000000000 listen
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:531    .text.listen:0000000000000048 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:536    .text.gethostbyname:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:541    .text.gethostbyname:0000000000000000 gethostbyname
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:639    .text.gethostbyname:0000000000000068 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:644    .text.connect:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:649    .text.connect:0000000000000000 connect
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:730    .text.connect:0000000000000054 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:735    .text.select:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:740    .text.select:0000000000000000 select
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:913    .text.select:00000000000000cc $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:918    .text.setsockopt:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:923    .text.setsockopt:0000000000000000 setsockopt
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1028   .text.setsockopt:0000000000000074 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1033   .text.getsockopt:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1038   .text.getsockopt:0000000000000000 getsockopt
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1126   .text.getsockopt:0000000000000060 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1131   .text.simple_link_recv:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1136   .text.simple_link_recv:0000000000000000 simple_link_recv
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1220   .text.simple_link_recv:000000000000005c $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1225   .text.recv:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1230   .text.recv:0000000000000000 recv
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1261   .text.recvfrom:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1266   .text.recvfrom:0000000000000000 recvfrom
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1298   .text.simple_link_send:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1303   .text.simple_link_send:0000000000000000 simple_link_send
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1484   .text.simple_link_send:00000000000000d4 $d
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1489   .text.send:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1494   .text.send:0000000000000000 send
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1525   .text.sendto:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1530   .text.sendto:0000000000000000 sendto
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1562   .text.mdnsAdvertiser:0000000000000000 $t
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1567   .text.mdnsAdvertiser:0000000000000000 mdnsAdvertiser
/var/folders/d1/846xqcps64v4wybnmd7kk8540000gn/T//cchNlgMf.s:1656   .text.mdnsAdvertiser:0000000000000058 $d
                     .debug_frame:0000000000000010 $d
                           .group:0000000000000000 wm4.1.94ea818a60f77b04fe5add16507b1dca
                           .group:0000000000000000 wm4.newlib.h.8.a9901dc52d1357e3e94003403d43f8b5
                           .group:0000000000000000 wm4.features.h.22.b72b3baab2bb2eab3661375590100b6b
                           .group:0000000000000000 wm4.config.h.193.5fb8ef056cdff92dec3dee9552839d8c
                           .group:0000000000000000 wm4._ansi.h.23.b5bb84d7ba97d82b5b1dc1826a7ae811
                           .group:0000000000000000 wm4.stdio.h.31.f48311dde756a2aec27351b58a280fb9
                           .group:0000000000000000 wm4.stddef.h.187.9e651b6b8b16e149c1353259404973ea
                           .group:0000000000000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:0000000000000000 wm4._default_types.h.6.5e12cd604db8ce00b62bb2f02708eaf3
                           .group:0000000000000000 wm4.lock.h.2.9bc98482741e5e2a9450b12934a684ea
                           .group:0000000000000000 wm4.stddef.h.349.31f4c5baff3fa2689010b32028da9c47
                           .group:0000000000000000 wm4.reent.h.16.9e42f0e588b85e70b2bf6572af57ce64
                           .group:0000000000000000 wm4.types.h.23.0d949686bbcadd1621462d4fa1f884f9
                           .group:0000000000000000 wm4.stddef.h.40.cf962ebbec441b3ac67502735f0765db
                           .group:0000000000000000 wm4.types.h.2.e9cec8c90ab35f77d9f499e06ae02400
                           .group:0000000000000000 wm4.types.h.80.1f2c84c0d57dd52dd9936095d9ac218e
                           .group:0000000000000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:0000000000000000 wm4.stdio.h.63.dfdea6580b080784d08faace69b6ed76
                           .group:0000000000000000 wm4.string.h.8.ef946ad0bc9ad5c970c365dcd1fc4b0a
                           .group:0000000000000000 wm4.stddef.h.161.e50ff8a9d5d1abbc15641da28ac571bf
                           .group:0000000000000000 wm4.string.h.86.d5c872ff52e2712c985b588a0ef39f3c
                           .group:0000000000000000 wm4.stdlib.h.13.603ed7eb09a1561ab06840b7c0fcff58
                           .group:0000000000000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:0000000000000000 wm4.stdlib.h.53.c69c7609933ff56d59c757cec2d13230
                           .group:0000000000000000 wm4.errno.h.2.ba016d646105af6cad23be83630b6a3f
                           .group:0000000000000000 wm4.errno.h.9.65044c2b5d8494e43f5986ab0a1d770f
                           .group:0000000000000000 wm4.stdint.h.10.90b695f550ca6cc3fb08fa83baf01e05
                           .group:0000000000000000 wm4.cc3000_common.h.58.c968e6f087d13da99b8c4c23daaad62a
                           .group:0000000000000000 wm4.hci.h.51.9deb4690145bc08404ecd70e8dadf8e4
                           .group:0000000000000000 wm4.socket.h.36.41be4fe54cda6cd3756b284824563e42
                           .group:0000000000000000 wm4.evnt_handler.h.36.be99e6836a9f57d146a5dafeb0edb1e6

UNDEFINED SYMBOLS
__errno
get_socket_active_status
tSLInformation
UINT32_TO_STREAM_f
hci_command_send
SimpleLinkWaitEvent
set_socket_active_status
SimpleLinkWaitData
hci_data_send
